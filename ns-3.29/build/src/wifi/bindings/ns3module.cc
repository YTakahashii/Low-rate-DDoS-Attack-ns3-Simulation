#include "ns3module.h"
static PyMethodDef wifi_FatalImpl_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_FatalImpl_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi.FatalImpl",
    NULL,
    -1,
    wifi_FatalImpl_functions,
};
#endif

static PyObject *
initwifi_FatalImpl(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_FatalImpl_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi.FatalImpl", wifi_FatalImpl_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef wifi_Hash_Function_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashFunctionFnv1a_Type;


PyTypeObject *_PyNs3HashFunctionHash32_Type;


PyTypeObject *_PyNs3HashFunctionHash64_Type;


PyTypeObject *_PyNs3HashFunctionMurmur3_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_Hash_Function_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi.Hash.Function",
    NULL,
    -1,
    wifi_Hash_Function_functions,
};
#endif

static PyObject *
initwifi_Hash_Function(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_Hash_Function_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi.Hash.Function", wifi_Hash_Function_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Function::Fnv1a' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionFnv1a_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Fnv1a");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash32' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash32");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash64' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash64_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash64");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Murmur3' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionMurmur3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Murmur3");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    return m;
}
static PyMethodDef wifi_Hash_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashImplementation_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_Hash_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi.Hash",
    NULL,
    -1,
    wifi_Hash_functions,
};
#endif

static PyObject *
initwifi_Hash(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_Hash_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi.Hash", wifi_Hash_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Implementation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Implementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    submodule = initwifi_Hash_Function();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Function", submodule);
    return m;
}
static PyMethodDef wifi_TracedValueCallback_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_TracedValueCallback_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi.TracedValueCallback",
    NULL,
    -1,
    wifi_TracedValueCallback_functions,
};
#endif

static PyObject *
initwifi_TracedValueCallback(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_TracedValueCallback_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi.TracedValueCallback", wifi_TracedValueCallback_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef wifi_internal_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_internal_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi.internal",
    NULL,
    -1,
    wifi_internal_functions,
};
#endif

static PyObject *
initwifi_internal(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_internal_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi.internal", wifi_internal_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
/* --- module functions --- */


PyObject *
_wrap_wifi_QosUtilsMapSeqControlToUniqueInteger(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int seqControl;
    int endSequence;
    const char *keywords[] = {"seqControl", "endSequence", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seqControl, &endSequence)) {
        return NULL;
    }
    if (seqControl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (endSequence > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::QosUtilsMapSeqControlToUniqueInteger(seqControl, endSequence);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_QosUtilsMapSeqControlToUniqueInteger(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_GetTid(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = ns3::GetTid(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}
PyObject * _wrap_wifi_GetTid(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_GetRtsSize()
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = ns3::GetRtsSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_GetRtsSize();


PyObject *
_wrap_wifi_RatioToDb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double ratio;
    const char *keywords[] = {"ratio", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &ratio)) {
        return NULL;
    }
    retval = ns3::RatioToDb(ratio);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap_wifi_RatioToDb(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_GetBlockAckSize(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::BlockAckType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    retval = ns3::GetBlockAckSize(type);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_GetBlockAckSize(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_IsInWindow(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int seq;
    int winstart;
    int winsize;
    const char *keywords[] = {"seq", "winstart", "winsize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iii", (char **) keywords, &seq, &winstart, &winsize)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (winstart > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (winsize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::IsInWindow(seq, winstart, winsize);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_IsInWindow(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_QosUtilsGetTidForPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = ns3::QosUtilsGetTidForPacket(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}
PyObject * _wrap_wifi_QosUtilsGetTidForPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_QosUtilsIsOldPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int startingSeq;
    int seqNumber;
    const char *keywords[] = {"startingSeq", "seqNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &startingSeq, &seqNumber)) {
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (seqNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::QosUtilsIsOldPacket(startingSeq, seqNumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_QosUtilsIsOldPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_MakeSsidChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::MakeSsidChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
    
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}
PyObject * _wrap_wifi_MakeSsidChecker();


PyObject *
_wrap_wifi_AddWifiMacTrailer(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::AddWifiMacTrailer(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_wifi_AddWifiMacTrailer(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_GetAckSize()
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = ns3::GetAckSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_GetAckSize();


PyObject *
_wrap_wifi_GetSize(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    bool isAmpdu;
    PyObject *py_isAmpdu;
    const char *keywords[] = {"packet", "hdr", "isAmpdu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &py_isAmpdu)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    isAmpdu = (bool) PyObject_IsTrue(py_isAmpdu);
    retval = ns3::GetSize(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, isAmpdu);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_GetSize(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_ConvertGuardIntervalToNanoSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiMode *mode;
    bool htShortGuardInterval;
    PyObject *py_htShortGuardInterval;
    PyNs3Time *heGuardInterval;
    const char *keywords[] = {"mode", "htShortGuardInterval", "heGuardInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OO!", (char **) keywords, &PyNs3WifiMode_Type, &mode, &py_htShortGuardInterval, &PyNs3Time_Type, &heGuardInterval)) {
        return NULL;
    }
    htShortGuardInterval = (bool) PyObject_IsTrue(py_htShortGuardInterval);
    retval = ns3::ConvertGuardIntervalToNanoSeconds(*((PyNs3WifiMode *) mode)->obj, htShortGuardInterval, *((PyNs3Time *) heGuardInterval)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_wifi_ConvertGuardIntervalToNanoSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_DbmToW(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double dbm;
    const char *keywords[] = {"dbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &dbm)) {
        return NULL;
    }
    retval = ns3::DbmToW(dbm);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap_wifi_DbmToW(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_MakeWifiModeChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::MakeWifiModeChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
    
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}
PyObject * _wrap_wifi_MakeWifiModeChecker();


PyObject *
_wrap_wifi_DbToRatio(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double db;
    const char *keywords[] = {"db", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &db)) {
        return NULL;
    }
    retval = ns3::DbToRatio(db);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap_wifi_DbToRatio(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_Is2_4Ghz(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    double frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &frequency)) {
        return NULL;
    }
    retval = ns3::Is2_4Ghz(frequency);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_Is2_4Ghz(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_GetCtsSize()
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = ns3::GetCtsSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_GetCtsSize();


PyObject *
_wrap_wifi_QosUtilsMapTidToAc(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::AcIndex retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::QosUtilsMapTidToAc(tid);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_wifi_QosUtilsMapTidToAc(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_Is5Ghz(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    double frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &frequency)) {
        return NULL;
    }
    retval = ns3::Is5Ghz(frequency);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_wifi_Is5Ghz(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_wifi_WToDbm(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double w;
    const char *keywords[] = {"w", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &w)) {
        return NULL;
    }
    retval = ns3::WToDbm(w);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}
PyObject * _wrap_wifi_WToDbm(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);

static PyMethodDef wifi_functions[] = {
    {(char *) "QosUtilsMapSeqControlToUniqueInteger", (PyCFunction) _wrap_wifi_QosUtilsMapSeqControlToUniqueInteger, METH_KEYWORDS|METH_VARARGS, "QosUtilsMapSeqControlToUniqueInteger(seqControl, endSequence)\n\ntype: seqControl: uint16_t\ntype: endSequence: uint16_t" },
    {(char *) "GetTid", (PyCFunction) _wrap_wifi_GetTid, METH_KEYWORDS|METH_VARARGS, "GetTid(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const" },
    {(char *) "GetRtsSize", (PyCFunction) _wrap_wifi_GetRtsSize, METH_NOARGS, "GetRtsSize()\n\n" },
    {(char *) "RatioToDb", (PyCFunction) _wrap_wifi_RatioToDb, METH_KEYWORDS|METH_VARARGS, "RatioToDb(ratio)\n\ntype: ratio: double" },
    {(char *) "GetBlockAckSize", (PyCFunction) _wrap_wifi_GetBlockAckSize, METH_KEYWORDS|METH_VARARGS, "GetBlockAckSize(type)\n\ntype: type: ns3::BlockAckType" },
    {(char *) "IsInWindow", (PyCFunction) _wrap_wifi_IsInWindow, METH_KEYWORDS|METH_VARARGS, "IsInWindow(seq, winstart, winsize)\n\ntype: seq: uint16_t\ntype: winstart: uint16_t\ntype: winsize: uint16_t" },
    {(char *) "QosUtilsGetTidForPacket", (PyCFunction) _wrap_wifi_QosUtilsGetTidForPacket, METH_KEYWORDS|METH_VARARGS, "QosUtilsGetTidForPacket(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "QosUtilsIsOldPacket", (PyCFunction) _wrap_wifi_QosUtilsIsOldPacket, METH_KEYWORDS|METH_VARARGS, "QosUtilsIsOldPacket(startingSeq, seqNumber)\n\ntype: startingSeq: uint16_t\ntype: seqNumber: uint16_t" },
    {(char *) "MakeSsidChecker", (PyCFunction) _wrap_wifi_MakeSsidChecker, METH_NOARGS, "MakeSsidChecker()\n\n" },
    {(char *) "AddWifiMacTrailer", (PyCFunction) _wrap_wifi_AddWifiMacTrailer, METH_KEYWORDS|METH_VARARGS, "AddWifiMacTrailer(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet >" },
    {(char *) "GetAckSize", (PyCFunction) _wrap_wifi_GetAckSize, METH_NOARGS, "GetAckSize()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_wifi_GetSize, METH_KEYWORDS|METH_VARARGS, "GetSize(packet, hdr, isAmpdu)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const *\ntype: isAmpdu: bool" },
    {(char *) "ConvertGuardIntervalToNanoSeconds", (PyCFunction) _wrap_wifi_ConvertGuardIntervalToNanoSeconds, METH_KEYWORDS|METH_VARARGS, "ConvertGuardIntervalToNanoSeconds(mode, htShortGuardInterval, heGuardInterval)\n\ntype: mode: ns3::WifiMode\ntype: htShortGuardInterval: bool\ntype: heGuardInterval: ns3::Time" },
    {(char *) "DbmToW", (PyCFunction) _wrap_wifi_DbmToW, METH_KEYWORDS|METH_VARARGS, "DbmToW(dbm)\n\ntype: dbm: double" },
    {(char *) "MakeWifiModeChecker", (PyCFunction) _wrap_wifi_MakeWifiModeChecker, METH_NOARGS, "MakeWifiModeChecker()\n\n" },
    {(char *) "DbToRatio", (PyCFunction) _wrap_wifi_DbToRatio, METH_KEYWORDS|METH_VARARGS, "DbToRatio(db)\n\ntype: db: double" },
    {(char *) "Is2_4Ghz", (PyCFunction) _wrap_wifi_Is2_4Ghz, METH_KEYWORDS|METH_VARARGS, "Is2_4Ghz(frequency)\n\ntype: frequency: double" },
    {(char *) "GetCtsSize", (PyCFunction) _wrap_wifi_GetCtsSize, METH_NOARGS, "GetCtsSize()\n\n" },
    {(char *) "QosUtilsMapTidToAc", (PyCFunction) _wrap_wifi_QosUtilsMapTidToAc, METH_KEYWORDS|METH_VARARGS, "QosUtilsMapTidToAc(tid)\n\ntype: tid: uint8_t" },
    {(char *) "Is5Ghz", (PyCFunction) _wrap_wifi_Is5Ghz, METH_KEYWORDS|METH_VARARGS, "Is5Ghz(frequency)\n\ntype: frequency: double" },
    {(char *) "WToDbm", (PyCFunction) _wrap_wifi_WToDbm, METH_KEYWORDS|METH_VARARGS, "WToDbm(w)\n\ntype: w: double" },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3Address_Type;
std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;


PyTypeObject *_PyNs3Angles_Type;
std::map<void*, PyObject*> *_PyNs3Angles_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelper_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionList_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;


PyTypeObject *_PyNs3BandInfo_Type;
std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;


PyTypeObject *_PyNs3Buffer_Type;
std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;


PyTypeObject *_PyNs3BufferIterator_Type;
std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3ByteTagList_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3CallbackBase_Type;
std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;


PyTypeObject *_PyNs3DataRate_Type;
std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeChecker_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeValue_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3EventImpl_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3HashImplementation_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3NixVector_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3Packet_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumModel_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry;


PyTypeObject *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type;
std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry;


PyTypeObject *_PyNs3DeviceEnergyModelContainer_Type;
std::map<void*, PyObject*> *_PyNs3DeviceEnergyModelContainer_wrapper_registry;


PyTypeObject *_PyNs3DeviceEnergyModelHelper_Type;
std::map<void*, PyObject*> *_PyNs3DeviceEnergyModelHelper_wrapper_registry;


PyTypeObject *_PyNs3EnergySourceHelper_Type;
std::map<void*, PyObject*> *_PyNs3EnergySourceHelper_wrapper_registry;


PyTypeObject *_PyNs3EventId_Type;
std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;


PyTypeObject *_PyNs3Hasher_Type;
std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Mask_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Prefix_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;


PyTypeObject *_PyNs3LogComponent_Type;
std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;


PyTypeObject *_PyNs3Mac48Address_Type;
std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;


PyTypeObject *_PyNs3Mac8Address_Type;
std::map<void*, PyObject*> *_PyNs3Mac8Address_wrapper_registry;


PyTypeObject *_PyNs3NetDeviceContainer_Type;
std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;


PyTypeObject *_PyNs3NodeContainer_Type;
std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;


PyTypeObject *_PyNs3ObjectBase_Type;
std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;


PyTypeObject *_PyNs3ObjectDeleter_Type;
std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;


PyTypeObject *_PyNs3ObjectFactory_Type;
std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadata_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3PacketTagList_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;


PyTypeObject *_PyNs3PacketTagListTagData_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;


PyTypeObject *_PyNs3ParameterLogger_Type;
std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;


PyTypeObject *_PyNs3PcapFile_Type;
std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;


PyTypeObject *_PyNs3PcapHelper_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;


PyTypeObject *_PyNs3PcapHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3PropagationCache__Ns3JakesProcess_Type;
std::map<void*, PyObject*> *_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry;


PyTypeObject *_PyNs3QueueSize_Type;
std::map<void*, PyObject*> *_PyNs3QueueSize_wrapper_registry;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


PyTypeObject *_PyNs3Simulator_Type;
std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;


PyTypeObject *_PyNs3Tag_Type;


PyTypeObject *_PyNs3TagBuffer_Type;
std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;


PyTypeObject *_PyNs3TimeWithUnit_Type;
std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;


PyTypeObject *_PyNs3TracedValue__Double_Type;
std::map<void*, PyObject*> *_PyNs3TracedValue__Double_wrapper_registry;


PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;


PyTypeObject *_PyNs3TracedValue__Unsigned_long_Type;
std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_long_wrapper_registry;


PyTypeObject *_PyNs3TypeId_Type;
std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;


PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;


PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;


PyTypeObject *_PyNs3Vector2D_Type;
std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;


PyTypeObject *_PyNs3Vector3D_Type;
std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;


PyTypeObject *_PyNs3Empty_Type;
std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;


PyTypeObject *_PyNs3Int64x64_t_Type;
std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;


PyTypeObject *_PyNs3Chunk_Type;


PyTypeObject *_PyNs3Header_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;


PyTypeObject *_PyNs3PcapFileWrapper_Type;


PyTypeObject *_PyNs3PropagationDelayModel_Type;


PyTypeObject *_PyNs3PropagationLossModel_Type;


PyTypeObject *_PyNs3QueueBase_Type;


PyTypeObject *_PyNs3RandomPropagationDelayModel_Type;


PyTypeObject *_PyNs3RandomPropagationLossModel_Type;


PyTypeObject *_PyNs3RandomVariableStream_Type;


PyTypeObject *_PyNs3RangePropagationLossModel_Type;


PyTypeObject *_PyNs3SequentialRandomVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SpectrumModel_Type;


PyTypeObject *_PyNs3SpectrumPhy_Type;


PyTypeObject *_PyNs3SpectrumSignalParameters_Type;


PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;


PyTypeObject *_PyNs3Time_Type;
std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;


PyTypeObject *_PyNs3TraceSourceAccessor_Type;


PyTypeObject *_PyNs3Trailer_Type;


PyTypeObject *_PyNs3TriangularRandomVariable_Type;


PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;


PyTypeObject *_PyNs3UniformRandomVariable_Type;


PyTypeObject *_PyNs3WeibullRandomVariable_Type;


PyTypeObject *_PyNs3ZetaRandomVariable_Type;


PyTypeObject *_PyNs3ZipfRandomVariable_Type;


PyTypeObject *_PyNs3AntennaModel_Type;


PyTypeObject *_PyNs3AttributeAccessor_Type;


PyTypeObject *_PyNs3AttributeChecker_Type;


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3BooleanChecker_Type;


PyTypeObject *_PyNs3BooleanValue_Type;


PyTypeObject *_PyNs3CallbackChecker_Type;


PyTypeObject *_PyNs3CallbackImplBase_Type;


PyTypeObject *_PyNs3CallbackValue_Type;


PyTypeObject *_PyNs3Channel_Type;


PyTypeObject *_PyNs3ConstantRandomVariable_Type;


PyTypeObject *_PyNs3ConstantSpeedPropagationDelayModel_Type;


PyTypeObject *_PyNs3Cost231PropagationLossModel_Type;


PyTypeObject *_PyNs3DataRateChecker_Type;


PyTypeObject *_PyNs3DataRateValue_Type;


PyTypeObject *_PyNs3DeterministicRandomVariable_Type;


PyTypeObject *_PyNs3DeviceEnergyModel_Type;


PyTypeObject *_PyNs3DoubleValue_Type;


PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;


PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;


PyTypeObject *_PyNs3EmptyAttributeChecker_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3EnergyHarvester_Type;


PyTypeObject *_PyNs3EnergySource_Type;


PyTypeObject *_PyNs3EnergySourceContainer_Type;


PyTypeObject *_PyNs3EnumChecker_Type;


PyTypeObject *_PyNs3EnumValue_Type;


PyTypeObject *_PyNs3ErlangRandomVariable_Type;


PyTypeObject *_PyNs3EventImpl_Type;


PyTypeObject *_PyNs3ExponentialRandomVariable_Type;


PyTypeObject *_PyNs3FixedRssLossModel_Type;


PyTypeObject *_PyNs3FriisPropagationLossModel_Type;


PyTypeObject *_PyNs3GammaRandomVariable_Type;


PyTypeObject *_PyNs3IntegerValue_Type;


PyTypeObject *_PyNs3Ipv4AddressChecker_Type;


PyTypeObject *_PyNs3Ipv4AddressValue_Type;


PyTypeObject *_PyNs3Ipv4MaskChecker_Type;


PyTypeObject *_PyNs3Ipv4MaskValue_Type;


PyTypeObject *_PyNs3Ipv6AddressChecker_Type;


PyTypeObject *_PyNs3Ipv6AddressValue_Type;


PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;


PyTypeObject *_PyNs3Ipv6PrefixValue_Type;


PyTypeObject *_PyNs3ItuR1411LosPropagationLossModel_Type;


PyTypeObject *_PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type;


PyTypeObject *_PyNs3JakesProcess_Type;


PyTypeObject *_PyNs3JakesPropagationLossModel_Type;


PyTypeObject *_PyNs3Kun2600MhzPropagationLossModel_Type;


PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;


PyTypeObject *_PyNs3LogNormalRandomVariable_Type;


PyTypeObject *_PyNs3Mac48AddressChecker_Type;


PyTypeObject *_PyNs3Mac48AddressValue_Type;


PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;


PyTypeObject *_PyNs3MobilityModel_Type;


PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;


PyTypeObject *_PyNs3NetDevice_Type;


PyTypeObject *_PyNs3NixVector_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3NormalRandomVariable_Type;


PyTypeObject *_PyNs3ObjectFactoryChecker_Type;


PyTypeObject *_PyNs3ObjectFactoryValue_Type;


PyTypeObject *_PyNs3OkumuraHataPropagationLossModel_Type;


PyTypeObject *_PyNs3OutputStreamWrapper_Type;


PyTypeObject *_PyNs3Packet_Type;


PyTypeObject *_PyNs3ParetoRandomVariable_Type;


PyTypeObject *_PyNs3QueueSizeChecker_Type;


PyTypeObject *_PyNs3QueueSizeValue_Type;


PyTypeObject *_PyNs3SpectrumChannel_Type;


PyTypeObject *_PyNs3TimeValue_Type;


PyTypeObject *_PyNs3TypeIdChecker_Type;


PyTypeObject *_PyNs3TypeIdValue_Type;


PyTypeObject *_PyNs3UintegerValue_Type;


PyTypeObject *_PyNs3Vector2DChecker_Type;


PyTypeObject *_PyNs3Vector2DValue_Type;


PyTypeObject *_PyNs3Vector3DChecker_Type;


PyTypeObject *_PyNs3Vector3DValue_Type;


PyTypeObject *_PyNs3AddressChecker_Type;


PyTypeObject *_PyNs3AddressValue_Type;


PyTypeObject *_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3WifiMacHeader___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


std::map<void*, PyObject*> PyNs3ApInfo_wrapper_registry;
static PyObject* _wrap_PyNs3ApInfo__get_m_activeProbing(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_activeProbing));
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_activeProbing(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_activeProbing = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3ApInfo__get_m_apAddr(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->m_apAddr);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_apAddr(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_apAddr = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3ApInfo__get_m_beacon(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MgtBeaconHeader *py_MgtBeaconHeader;
    
    py_MgtBeaconHeader = PyObject_GC_New(PyNs3MgtBeaconHeader, &PyNs3MgtBeaconHeader_Type);
    py_MgtBeaconHeader->inst_dict = NULL;
    py_MgtBeaconHeader->inst_dict = NULL;
    py_MgtBeaconHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MgtBeaconHeader->obj = new ns3::MgtBeaconHeader(self->obj->m_beacon);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MgtBeaconHeader->obj] = (PyObject *) py_MgtBeaconHeader;
    py_retval = Py_BuildValue((char *) "N", py_MgtBeaconHeader);
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_beacon(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MgtBeaconHeader *tmp_MgtBeaconHeader;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3MgtBeaconHeader_Type, &tmp_MgtBeaconHeader)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_beacon = *tmp_MgtBeaconHeader->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3ApInfo__get_m_bssid(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->m_bssid);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_bssid(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_bssid = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3ApInfo__get_m_probeResp(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MgtProbeResponseHeader *py_MgtProbeResponseHeader;
    
    py_MgtProbeResponseHeader = PyObject_GC_New(PyNs3MgtProbeResponseHeader, &PyNs3MgtProbeResponseHeader_Type);
    py_MgtProbeResponseHeader->inst_dict = NULL;
    py_MgtProbeResponseHeader->inst_dict = NULL;
    py_MgtProbeResponseHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MgtProbeResponseHeader->obj = new ns3::MgtProbeResponseHeader(self->obj->m_probeResp);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MgtProbeResponseHeader->obj] = (PyObject *) py_MgtProbeResponseHeader;
    py_retval = Py_BuildValue((char *) "N", py_MgtProbeResponseHeader);
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_probeResp(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MgtProbeResponseHeader *tmp_MgtProbeResponseHeader;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3MgtProbeResponseHeader_Type, &tmp_MgtProbeResponseHeader)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_probeResp = *tmp_MgtProbeResponseHeader->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3ApInfo__get_m_snr(PyNs3ApInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_snr);
    return py_retval;
}
static int _wrap_PyNs3ApInfo__set_m_snr(PyNs3ApInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_snr)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3ApInfo__getsets[] = {
    {
        (char*) "m_apAddr", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_apAddr, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_apAddr, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_beacon", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_beacon, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_beacon, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_snr", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_snr, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_snr, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_probeResp", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_probeResp, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_probeResp, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_activeProbing", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_activeProbing, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_activeProbing, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_bssid", /* attribute name */
        (getter) _wrap_PyNs3ApInfo__get_m_bssid, /* C function to get the attribute */
        (setter) _wrap_PyNs3ApInfo__set_m_bssid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3ApInfo__tp_init__0(PyNs3ApInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ApInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ApInfo__tp_init__1(PyNs3ApInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ApInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ApInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ApInfo(*((PyNs3ApInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ApInfo__tp_init(PyNs3ApInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ApInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ApInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3ApInfo__copy__(PyNs3ApInfo *self)
{

    PyNs3ApInfo *py_copy;
    py_copy = PyObject_New(PyNs3ApInfo, &PyNs3ApInfo_Type);
    py_copy->obj = new ns3::ApInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ApInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ApInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ApInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ApInfo__tp_dealloc(PyNs3ApInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ApInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ApInfo_wrapper_registry.end()) {
        PyNs3ApInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ApInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ApInfo__tp_richcompare (PyNs3ApInfo *PYBINDGEN_UNUSED(self), PyNs3ApInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ApInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ApInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ApInfo",            /* tp_name */
    sizeof(PyNs3ApInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ApInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ApInfo(arg0)\nApInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ApInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ApInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3ApInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ApInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3AthstatsHelper_wrapper_registry;


static int
_wrap_PyNs3AthstatsHelper__tp_init__0(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AthstatsHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AthstatsHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AthstatsHelper(*((PyNs3AthstatsHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AthstatsHelper__tp_init__1(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AthstatsHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AthstatsHelper__tp_init(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AthstatsHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AthstatsHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3AthstatsHelper_EnableAthstats__0(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    unsigned int nodeid;
    unsigned int deviceid;
    const char *keywords[] = {"filename", "nodeid", "deviceid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#II", (char **) keywords, &filename, &filename_len, &nodeid, &deviceid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAthstats(std::string(filename, filename_len), nodeid, deviceid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3AthstatsHelper_EnableAthstats__1(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    const char *keywords[] = {"filename", "nd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &filename, &filename_len, &PyNs3NetDevice_Type, &nd)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nd_ptr = (nd ? nd->obj : NULL);
    self->obj->EnableAthstats(std::string(filename, filename_len), ns3::Ptr< ns3::NetDevice  > (nd_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3AthstatsHelper_EnableAthstats__2(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"filename", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &filename, &filename_len, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAthstats(std::string(filename, filename_len), *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3AthstatsHelper_EnableAthstats__3(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"filename", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &filename, &filename_len, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAthstats(std::string(filename, filename_len), *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3AthstatsHelper_EnableAthstats(PyNs3AthstatsHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3AthstatsHelper_EnableAthstats__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AthstatsHelper_EnableAthstats__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3AthstatsHelper_EnableAthstats__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3AthstatsHelper_EnableAthstats__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3AthstatsHelper__copy__(PyNs3AthstatsHelper *self)
{

    PyNs3AthstatsHelper *py_copy;
    py_copy = PyObject_New(PyNs3AthstatsHelper, &PyNs3AthstatsHelper_Type);
    py_copy->obj = new ns3::AthstatsHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3AthstatsHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AthstatsHelper_methods[] = {
    {(char *) "EnableAthstats", (PyCFunction) _wrap_PyNs3AthstatsHelper_EnableAthstats, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AthstatsHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3AthstatsHelper__tp_dealloc(PyNs3AthstatsHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3AthstatsHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3AthstatsHelper_wrapper_registry.end()) {
        PyNs3AthstatsHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::AthstatsHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AthstatsHelper__tp_richcompare (PyNs3AthstatsHelper *PYBINDGEN_UNUSED(self), PyNs3AthstatsHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AthstatsHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AthstatsHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AthstatsHelper",            /* tp_name */
    sizeof(PyNs3AthstatsHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AthstatsHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "AthstatsHelper(arg0)\nAthstatsHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AthstatsHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AthstatsHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AthstatsHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Bar_wrapper_registry;
static PyObject* _wrap_PyNs3Bar__get_bar(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_bar(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->bar = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_immediate(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->immediate));
    return py_retval;
}
static int _wrap_PyNs3Bar__set_immediate(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->immediate = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_recipient(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->recipient);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_recipient(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->recipient = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_tid(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->tid);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_tid(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->tid = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Bar__getsets[] = {
    {
        (char*) "tid", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_tid, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_tid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "recipient", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_recipient, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_recipient, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "bar", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_bar, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_bar, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "immediate", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_immediate, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_immediate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Bar__tp_init__0(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Bar *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Bar_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Bar(*((PyNs3Bar *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Bar__tp_init__1(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Bar();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Bar__tp_init__2(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *recipient;
    int tid;
    bool immediate;
    PyObject *py_immediate;
    const char *keywords[] = {"packet", "recipient", "tid", "immediate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iO", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &recipient, &tid, &py_immediate)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    immediate = (bool) PyObject_IsTrue(py_immediate);
    self->obj = new ns3::Bar(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) recipient)->obj, tid, immediate);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Bar__tp_init(PyNs3Bar *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Bar__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Bar__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Bar__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Bar__copy__(PyNs3Bar *self)
{

    PyNs3Bar *py_copy;
    py_copy = PyObject_New(PyNs3Bar, &PyNs3Bar_Type);
    py_copy->obj = new ns3::Bar(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Bar_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Bar_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Bar__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Bar__tp_dealloc(PyNs3Bar *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Bar_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Bar_wrapper_registry.end()) {
        PyNs3Bar_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Bar *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Bar__tp_richcompare (PyNs3Bar *PYBINDGEN_UNUSED(self), PyNs3Bar *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Bar_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Bar_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Bar",            /* tp_name */
    sizeof(PyNs3Bar),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Bar__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Bar(packet, recipient, tid, immediate)\nBar(arg0)\nBar()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Bar__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Bar_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Bar__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Bar__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3BlockAckAgreement_wrapper_registry;


static int
_wrap_PyNs3BlockAckAgreement__tp_init__0(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BlockAckAgreement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BlockAckAgreement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckAgreement(*((PyNs3BlockAckAgreement *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BlockAckAgreement__tp_init__1(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *peer;
    int tid;
    const char *keywords[] = {"peer", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &peer, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckAgreement(*((PyNs3Mac48Address *) peer)->obj, tid);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3BlockAckAgreement__tp_init(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BlockAckAgreement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BlockAckAgreement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetHtSupported(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool htSupported;
    PyObject *py_htSupported;
    const char *keywords[] = {"htSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_htSupported)) {
        return NULL;
    }
    htSupported = (bool) PyObject_IsTrue(py_htSupported);
    self->obj->SetHtSupported(htSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetStartingSequenceControl(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetTimeout(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetStartingSequence(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetTimeout(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetStartingSequence(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetAmsduSupport(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_IsHtSupported(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsHtSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetWinEnd(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetWinEnd();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetImmediateBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetBufferSize(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_IsAmsduSupported(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetDelayedBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetPeer(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetPeer();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetStartingSequenceControl(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequenceControl(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetWinEnd(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetWinEnd(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetTid(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetBufferSize(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int bufferSize;
    const char *keywords[] = {"bufferSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bufferSize)) {
        return NULL;
    }
    if (bufferSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(bufferSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_IsImmediateBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3BlockAckAgreement__copy__(PyNs3BlockAckAgreement *self)
{

    PyNs3BlockAckAgreement *py_copy;
    py_copy = PyObject_New(PyNs3BlockAckAgreement, &PyNs3BlockAckAgreement_Type);
    py_copy->obj = new ns3::BlockAckAgreement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3BlockAckAgreement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BlockAckAgreement_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(htSupported)\n\ntype: htSupported: bool" },
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetStartingSequenceControl, METH_NOARGS, "GetStartingSequenceControl()\n\n" },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetTimeout, METH_KEYWORDS|METH_VARARGS, "SetTimeout(timeout)\n\ntype: timeout: uint16_t" },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetStartingSequence, METH_NOARGS, "GetStartingSequence()\n\n" },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetTimeout, METH_NOARGS, "GetTimeout()\n\n" },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, "SetStartingSequence(seq)\n\ntype: seq: uint16_t" },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, "SetAmsduSupport(supported)\n\ntype: supported: bool" },
    {(char *) "IsHtSupported", (PyCFunction) _wrap_PyNs3BlockAckAgreement_IsHtSupported, METH_NOARGS, "IsHtSupported()\n\n" },
    {(char *) "GetWinEnd", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetWinEnd, METH_NOARGS, "GetWinEnd()\n\n" },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetImmediateBlockAck, METH_NOARGS, "SetImmediateBlockAck()\n\n" },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetBufferSize, METH_NOARGS, "GetBufferSize()\n\n" },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3BlockAckAgreement_IsAmsduSupported, METH_NOARGS, "IsAmsduSupported()\n\n" },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetDelayedBlockAck, METH_NOARGS, "SetDelayedBlockAck()\n\n" },
    {(char *) "GetPeer", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetPeer, METH_NOARGS, "GetPeer()\n\n" },
    {(char *) "SetStartingSequenceControl", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetStartingSequenceControl, METH_KEYWORDS|METH_VARARGS, "SetStartingSequenceControl(seq)\n\ntype: seq: uint16_t" },
    {(char *) "SetWinEnd", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetWinEnd, METH_KEYWORDS|METH_VARARGS, "SetWinEnd(seq)\n\ntype: seq: uint16_t" },
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetTid, METH_NOARGS, "GetTid()\n\n" },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetBufferSize, METH_KEYWORDS|METH_VARARGS, "SetBufferSize(bufferSize)\n\ntype: bufferSize: uint16_t" },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_IsImmediateBlockAck, METH_NOARGS, "IsImmediateBlockAck()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BlockAckAgreement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3BlockAckAgreement__tp_dealloc(PyNs3BlockAckAgreement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckAgreement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckAgreement_wrapper_registry.end()) {
        PyNs3BlockAckAgreement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::BlockAckAgreement *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BlockAckAgreement__tp_richcompare (PyNs3BlockAckAgreement *PYBINDGEN_UNUSED(self), PyNs3BlockAckAgreement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BlockAckAgreement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BlockAckAgreement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.BlockAckAgreement",            /* tp_name */
    sizeof(PyNs3BlockAckAgreement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BlockAckAgreement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "BlockAckAgreement(peer, tid)\nBlockAckAgreement(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BlockAckAgreement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BlockAckAgreement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BlockAckAgreement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3BlockAckCache_wrapper_registry;


static int
_wrap_PyNs3BlockAckCache__tp_init__0(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckCache();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BlockAckCache__tp_init__1(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BlockAckCache *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BlockAckCache_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckCache(*((PyNs3BlockAckCache *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3BlockAckCache__tp_init(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BlockAckCache__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BlockAckCache__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BlockAckCache_Init(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int winStart;
    int winSize;
    const char *keywords[] = {"winStart", "winSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &winStart, &winSize)) {
        return NULL;
    }
    if (winStart > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (winSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Init(winStart, winSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckCache_UpdateWithBlockAckReq(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int startingSeq;
    const char *keywords[] = {"startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &startingSeq)) {
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->UpdateWithBlockAckReq(startingSeq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckCache_GetWinStart(PyNs3BlockAckCache *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetWinStart();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckCache_UpdateWithMpdu(PyNs3BlockAckCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    hdr_ptr = (hdr ? hdr->obj : NULL);
    self->obj->UpdateWithMpdu(hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BlockAckCache__copy__(PyNs3BlockAckCache *self)
{

    PyNs3BlockAckCache *py_copy;
    py_copy = PyObject_New(PyNs3BlockAckCache, &PyNs3BlockAckCache_Type);
    py_copy->obj = new ns3::BlockAckCache(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3BlockAckCache_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BlockAckCache_methods[] = {
    {(char *) "Init", (PyCFunction) _wrap_PyNs3BlockAckCache_Init, METH_KEYWORDS|METH_VARARGS, "Init(winStart, winSize)\n\ntype: winStart: uint16_t\ntype: winSize: uint16_t" },
    {(char *) "UpdateWithBlockAckReq", (PyCFunction) _wrap_PyNs3BlockAckCache_UpdateWithBlockAckReq, METH_KEYWORDS|METH_VARARGS, "UpdateWithBlockAckReq(startingSeq)\n\ntype: startingSeq: uint16_t" },
    {(char *) "GetWinStart", (PyCFunction) _wrap_PyNs3BlockAckCache_GetWinStart, METH_NOARGS, "GetWinStart()\n\n" },
    {(char *) "UpdateWithMpdu", (PyCFunction) _wrap_PyNs3BlockAckCache_UpdateWithMpdu, METH_KEYWORDS|METH_VARARGS, "UpdateWithMpdu(hdr)\n\ntype: hdr: ns3::WifiMacHeader const *" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BlockAckCache__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3BlockAckCache__tp_dealloc(PyNs3BlockAckCache *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckCache_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckCache_wrapper_registry.end()) {
        PyNs3BlockAckCache_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::BlockAckCache *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BlockAckCache__tp_richcompare (PyNs3BlockAckCache *PYBINDGEN_UNUSED(self), PyNs3BlockAckCache *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BlockAckCache_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BlockAckCache_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.BlockAckCache",            /* tp_name */
    sizeof(PyNs3BlockAckCache),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BlockAckCache__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "BlockAckCache(arg0)\nBlockAckCache()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BlockAckCache__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BlockAckCache_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BlockAckCache__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3CapabilityInformation_wrapper_registry;


static int
_wrap_PyNs3CapabilityInformation__tp_init__0(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CapabilityInformation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CapabilityInformation(*((PyNs3CapabilityInformation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CapabilityInformation__tp_init__1(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CapabilityInformation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CapabilityInformation__tp_init(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CapabilityInformation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CapabilityInformation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetEss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    
    self->obj->SetEss();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetShortPreamble(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool shortPreamble;
    PyObject *py_shortPreamble;
    const char *keywords[] = {"shortPreamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_shortPreamble)) {
        return NULL;
    }
    shortPreamble = (bool) PyObject_IsTrue(py_shortPreamble);
    self->obj->SetShortPreamble(shortPreamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsShortPreamble(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsShortPreamble();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_Deserialize(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetIbss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    
    self->obj->SetIbss();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetShortSlotTime(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool shortSlotTime;
    PyObject *py_shortSlotTime;
    const char *keywords[] = {"shortSlotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_shortSlotTime)) {
        return NULL;
    }
    shortSlotTime = (bool) PyObject_IsTrue(py_shortSlotTime);
    self->obj->SetShortSlotTime(shortSlotTime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_Serialize(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsShortSlotTime(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsShortSlotTime();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsIbss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsIbss();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_GetSerializedSize(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsEss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsEss();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsCfPollable(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCfPollable();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetCfPollable(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    
    self->obj->SetCfPollable();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CapabilityInformation__copy__(PyNs3CapabilityInformation *self)
{

    PyNs3CapabilityInformation *py_copy;
    py_copy = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_copy->obj = new ns3::CapabilityInformation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CapabilityInformation_methods[] = {
    {(char *) "SetEss", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetEss, METH_NOARGS, "SetEss()\n\n" },
    {(char *) "SetShortPreamble", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetShortPreamble, METH_KEYWORDS|METH_VARARGS, "SetShortPreamble(shortPreamble)\n\ntype: shortPreamble: bool" },
    {(char *) "IsShortPreamble", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsShortPreamble, METH_NOARGS, "IsShortPreamble()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CapabilityInformation_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetIbss", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetIbss, METH_NOARGS, "SetIbss()\n\n" },
    {(char *) "SetShortSlotTime", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetShortSlotTime, METH_KEYWORDS|METH_VARARGS, "SetShortSlotTime(shortSlotTime)\n\ntype: shortSlotTime: bool" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CapabilityInformation_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "IsShortSlotTime", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsShortSlotTime, METH_NOARGS, "IsShortSlotTime()\n\n" },
    {(char *) "IsIbss", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsIbss, METH_NOARGS, "IsIbss()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CapabilityInformation_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "IsEss", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsEss, METH_NOARGS, "IsEss()\n\n" },
    {(char *) "IsCfPollable", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsCfPollable, METH_NOARGS, "IsCfPollable()\n\n" },
    {(char *) "SetCfPollable", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetCfPollable, METH_NOARGS, "SetCfPollable()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CapabilityInformation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CapabilityInformation__tp_dealloc(PyNs3CapabilityInformation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3CapabilityInformation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3CapabilityInformation_wrapper_registry.end()) {
        PyNs3CapabilityInformation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::CapabilityInformation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CapabilityInformation__tp_richcompare (PyNs3CapabilityInformation *PYBINDGEN_UNUSED(self), PyNs3CapabilityInformation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CapabilityInformation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CapabilityInformation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CapabilityInformation",            /* tp_name */
    sizeof(PyNs3CapabilityInformation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CapabilityInformation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CapabilityInformation(arg0)\nCapabilityInformation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CapabilityInformation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CapabilityInformation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CapabilityInformation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3Event_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3Event__tp_init__0(PyNs3DefaultDeleter__Ns3Event *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::Event >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3Event__tp_init__1(PyNs3DefaultDeleter__Ns3Event *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3Event *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3Event_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::Event >(*((PyNs3DefaultDeleter__Ns3Event *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3Event__tp_init(PyNs3DefaultDeleter__Ns3Event *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3Event__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3Event__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3Event__copy__(PyNs3DefaultDeleter__Ns3Event *self)
{

    PyNs3DefaultDeleter__Ns3Event *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3Event, &PyNs3DefaultDeleter__Ns3Event_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::Event >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3Event_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3Event_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3Event__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3Event__tp_dealloc(PyNs3DefaultDeleter__Ns3Event *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3Event_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3Event_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3Event_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::Event > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3Event__tp_richcompare (PyNs3DefaultDeleter__Ns3Event *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3Event *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3Event_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3Event_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3Event",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3Event),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3Event__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3Event(arg0)\nDefaultDeleter__Ns3Event()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3Event__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3Event_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3Event__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init__0(PyNs3DefaultDeleter__Ns3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::MacRxMiddle >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init__1(PyNs3DefaultDeleter__Ns3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3MacRxMiddle *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3MacRxMiddle_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::MacRxMiddle >(*((PyNs3DefaultDeleter__Ns3MacRxMiddle *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init(PyNs3DefaultDeleter__Ns3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__copy__(PyNs3DefaultDeleter__Ns3MacRxMiddle *self)
{

    PyNs3DefaultDeleter__Ns3MacRxMiddle *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3MacRxMiddle, &PyNs3DefaultDeleter__Ns3MacRxMiddle_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::MacRxMiddle >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3MacRxMiddle_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_dealloc(PyNs3DefaultDeleter__Ns3MacRxMiddle *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::MacRxMiddle > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_richcompare (PyNs3DefaultDeleter__Ns3MacRxMiddle *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3MacRxMiddle *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3MacRxMiddle_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3MacRxMiddle_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3MacRxMiddle",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3MacRxMiddle),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3MacRxMiddle(arg0)\nDefaultDeleter__Ns3MacRxMiddle()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3MacRxMiddle_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3MacRxMiddle__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init__0(PyNs3DefaultDeleter__Ns3MacTxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::MacTxMiddle >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init__1(PyNs3DefaultDeleter__Ns3MacTxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3MacTxMiddle *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3MacTxMiddle_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::MacTxMiddle >(*((PyNs3DefaultDeleter__Ns3MacTxMiddle *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init(PyNs3DefaultDeleter__Ns3MacTxMiddle *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__copy__(PyNs3DefaultDeleter__Ns3MacTxMiddle *self)
{

    PyNs3DefaultDeleter__Ns3MacTxMiddle *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3MacTxMiddle, &PyNs3DefaultDeleter__Ns3MacTxMiddle_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::MacTxMiddle >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3MacTxMiddle_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_dealloc(PyNs3DefaultDeleter__Ns3MacTxMiddle *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::MacTxMiddle > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_richcompare (PyNs3DefaultDeleter__Ns3MacTxMiddle *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3MacTxMiddle *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3MacTxMiddle_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3MacTxMiddle_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3MacTxMiddle",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3MacTxMiddle),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3MacTxMiddle(arg0)\nDefaultDeleter__Ns3MacTxMiddle()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3MacTxMiddle_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3MacTxMiddle__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init__0(PyNs3DefaultDeleter__Ns3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::QosBlockedDestinations >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init__1(PyNs3DefaultDeleter__Ns3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3QosBlockedDestinations *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::QosBlockedDestinations >(*((PyNs3DefaultDeleter__Ns3QosBlockedDestinations *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init(PyNs3DefaultDeleter__Ns3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__copy__(PyNs3DefaultDeleter__Ns3QosBlockedDestinations *self)
{

    PyNs3DefaultDeleter__Ns3QosBlockedDestinations *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3QosBlockedDestinations, &PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::QosBlockedDestinations >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3QosBlockedDestinations_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_dealloc(PyNs3DefaultDeleter__Ns3QosBlockedDestinations *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::QosBlockedDestinations > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_richcompare (PyNs3DefaultDeleter__Ns3QosBlockedDestinations *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3QosBlockedDestinations *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3QosBlockedDestinations",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3QosBlockedDestinations),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3QosBlockedDestinations(arg0)\nDefaultDeleter__Ns3QosBlockedDestinations()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3QosBlockedDestinations_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3QosBlockedDestinations__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init__0(PyNs3DefaultDeleter__Ns3WifiInformationElement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::WifiInformationElement >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init__1(PyNs3DefaultDeleter__Ns3WifiInformationElement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3WifiInformationElement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3WifiInformationElement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::WifiInformationElement >(*((PyNs3DefaultDeleter__Ns3WifiInformationElement *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init(PyNs3DefaultDeleter__Ns3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__copy__(PyNs3DefaultDeleter__Ns3WifiInformationElement *self)
{

    PyNs3DefaultDeleter__Ns3WifiInformationElement *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3WifiInformationElement, &PyNs3DefaultDeleter__Ns3WifiInformationElement_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::WifiInformationElement >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3WifiInformationElement_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_dealloc(PyNs3DefaultDeleter__Ns3WifiInformationElement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::WifiInformationElement > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_richcompare (PyNs3DefaultDeleter__Ns3WifiInformationElement *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3WifiInformationElement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3WifiInformationElement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3WifiInformationElement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3WifiInformationElement",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3WifiInformationElement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3WifiInformationElement(arg0)\nDefaultDeleter__Ns3WifiInformationElement()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3WifiInformationElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3WifiInformationElement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry;


static int
_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init__0(PyNs3DefaultDeleter__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::WifiMacQueueItem >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init__1(PyNs3DefaultDeleter__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DefaultDeleter__Ns3WifiMacQueueItem *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DefaultDeleter< ns3::WifiMacQueueItem >(*((PyNs3DefaultDeleter__Ns3WifiMacQueueItem *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init(PyNs3DefaultDeleter__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__copy__(PyNs3DefaultDeleter__Ns3WifiMacQueueItem *self)
{

    PyNs3DefaultDeleter__Ns3WifiMacQueueItem *py_copy;
    py_copy = PyObject_New(PyNs3DefaultDeleter__Ns3WifiMacQueueItem, &PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type);
    py_copy->obj = new ns3::DefaultDeleter< ns3::WifiMacQueueItem >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DefaultDeleter__Ns3WifiMacQueueItem_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_dealloc(PyNs3DefaultDeleter__Ns3WifiMacQueueItem *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry.end()) {
        PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DefaultDeleter< ns3::WifiMacQueueItem > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_richcompare (PyNs3DefaultDeleter__Ns3WifiMacQueueItem *PYBINDGEN_UNUSED(self), PyNs3DefaultDeleter__Ns3WifiMacQueueItem *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DefaultDeleter__Ns3WifiMacQueueItem",            /* tp_name */
    sizeof(PyNs3DefaultDeleter__Ns3WifiMacQueueItem),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DefaultDeleter__Ns3WifiMacQueueItem(arg0)\nDefaultDeleter__Ns3WifiMacQueueItem()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DefaultDeleter__Ns3WifiMacQueueItem_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DefaultDeleter__Ns3WifiMacQueueItem__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsssErrorRateModel_wrapper_registry;


static int
_wrap_PyNs3DsssErrorRateModel__tp_init__0(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssErrorRateModel();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsssErrorRateModel__tp_init__1(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsssErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsssErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssErrorRateModel(*((PyNs3DsssErrorRateModel *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsssErrorRateModel__tp_init(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsssErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsssErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck11SuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    uint64_t nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dK", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskCck11SuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_DqpskFunction(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double x;
    const char *keywords[] = {"x", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &x)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::DqpskFunction(x);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDbpskSuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    uint64_t nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dK", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDbpskSuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck5_5SuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    uint64_t nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dK", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskCck5_5SuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskSuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    uint64_t nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dK", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskSuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsssErrorRateModel__copy__(PyNs3DsssErrorRateModel *self)
{

    PyNs3DsssErrorRateModel *py_copy;
    py_copy = PyObject_New(PyNs3DsssErrorRateModel, &PyNs3DsssErrorRateModel_Type);
    py_copy->obj = new ns3::DsssErrorRateModel(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsssErrorRateModel_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsssErrorRateModel_methods[] = {
    {(char *) "GetDsssDqpskCck11SuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck11SuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetDsssDqpskCck11SuccessRate(sinr, nbits)\n\ntype: sinr: double\ntype: nbits: uint64_t" },
    {(char *) "DqpskFunction", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_DqpskFunction, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "DqpskFunction(x)\n\ntype: x: double" },
    {(char *) "GetDsssDbpskSuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDbpskSuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetDsssDbpskSuccessRate(sinr, nbits)\n\ntype: sinr: double\ntype: nbits: uint64_t" },
    {(char *) "GetDsssDqpskCck5_5SuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck5_5SuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetDsssDqpskCck5_5SuccessRate(sinr, nbits)\n\ntype: sinr: double\ntype: nbits: uint64_t" },
    {(char *) "GetDsssDqpskSuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskSuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetDsssDqpskSuccessRate(sinr, nbits)\n\ntype: sinr: double\ntype: nbits: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsssErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsssErrorRateModel__tp_dealloc(PyNs3DsssErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsssErrorRateModel_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsssErrorRateModel_wrapper_registry.end()) {
        PyNs3DsssErrorRateModel_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DsssErrorRateModel *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsssErrorRateModel__tp_richcompare (PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3DsssErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsssErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsssErrorRateModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DsssErrorRateModel",            /* tp_name */
    sizeof(PyNs3DsssErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsssErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsssErrorRateModel(arg0)\nDsssErrorRateModel()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsssErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsssErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsssErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3GroupInfo_wrapper_registry;
static PyObject* _wrap_PyNs3GroupInfo__get_m_col(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_col);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_col(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_col = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_index(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_index);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_index(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_index = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_maxProbRate(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxProbRate);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_maxProbRate(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxProbRate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_maxTpRate(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxTpRate);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_maxTpRate(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxTpRate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_maxTpRate2(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxTpRate2);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_maxTpRate2(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxTpRate2 = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_ratesTable(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::HtMinstrelRate retval;
    Pyns3__HtMinstrelRate *py_ns3__HtMinstrelRate;
    
    py_ns3__HtMinstrelRate = PyObject_New(Pyns3__HtMinstrelRate, &Pyns3__HtMinstrelRate_Type);
    py_ns3__HtMinstrelRate->obj = new ns3::HtMinstrelRate(self->obj->m_ratesTable);
    py_retval = Py_BuildValue((char *) "N", py_ns3__HtMinstrelRate);
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_ratesTable(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::HtMinstrelRate retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__HtMinstrelRate, &self->obj->m_ratesTable)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3GroupInfo__get_m_supported(PyNs3GroupInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_supported));
    return py_retval;
}
static int _wrap_PyNs3GroupInfo__set_m_supported(PyNs3GroupInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_supported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3GroupInfo__getsets[] = {
    {
        (char*) "m_col", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_col, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_col, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxProbRate", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_maxProbRate, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_maxProbRate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_index", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_index, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_index, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxTpRate2", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_maxTpRate2, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_maxTpRate2, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_supported", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_supported, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_supported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ratesTable", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_ratesTable, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_ratesTable, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxTpRate", /* attribute name */
        (getter) _wrap_PyNs3GroupInfo__get_m_maxTpRate, /* C function to get the attribute */
        (setter) _wrap_PyNs3GroupInfo__set_m_maxTpRate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3GroupInfo__tp_init__0(PyNs3GroupInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GroupInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3GroupInfo__tp_init__1(PyNs3GroupInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3GroupInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3GroupInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GroupInfo(*((PyNs3GroupInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3GroupInfo__tp_init(PyNs3GroupInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3GroupInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3GroupInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3GroupInfo__copy__(PyNs3GroupInfo *self)
{

    PyNs3GroupInfo *py_copy;
    py_copy = PyObject_New(PyNs3GroupInfo, &PyNs3GroupInfo_Type);
    py_copy->obj = new ns3::GroupInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3GroupInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3GroupInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3GroupInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3GroupInfo__tp_dealloc(PyNs3GroupInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3GroupInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3GroupInfo_wrapper_registry.end()) {
        PyNs3GroupInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::GroupInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3GroupInfo__tp_richcompare (PyNs3GroupInfo *PYBINDGEN_UNUSED(self), PyNs3GroupInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3GroupInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3GroupInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.GroupInfo",            /* tp_name */
    sizeof(PyNs3GroupInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3GroupInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "GroupInfo(arg0)\nGroupInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3GroupInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3GroupInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3GroupInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3GroupInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3HtRateInfo_wrapper_registry;
static PyObject* _wrap_PyNs3HtRateInfo__get_adjustedRetryCount(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->adjustedRetryCount));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_adjustedRetryCount(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->adjustedRetryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_attemptHist(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->attemptHist);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_attemptHist(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->attemptHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_ewmaProb(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->ewmaProb);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_ewmaProb(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->ewmaProb)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_ewmsdProb(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->ewmsdProb);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_ewmsdProb(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->ewmsdProb)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_mcsIndex(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->mcsIndex);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_mcsIndex(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->mcsIndex = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_numRateAttempt(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_numRateAttempt(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_numRateSuccess(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_numRateSuccess(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_numSamplesSkipped(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numSamplesSkipped));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_numSamplesSkipped(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numSamplesSkipped)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_perfectTxTime(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->perfectTxTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_perfectTxTime(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->perfectTxTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_prevNumRateAttempt(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_prevNumRateAttempt(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_prevNumRateSuccess(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_prevNumRateSuccess(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_prob(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->prob);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_prob(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->prob)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_retryCount(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->retryCount));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_retryCount(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->retryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_retryUpdated(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->retryUpdated));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_retryUpdated(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->retryUpdated = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_successHist(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->successHist);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_successHist(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->successHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_supported(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->supported));
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_supported(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->supported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3HtRateInfo__get_throughput(PyNs3HtRateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->throughput);
    return py_retval;
}
static int _wrap_PyNs3HtRateInfo__set_throughput(PyNs3HtRateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->throughput)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3HtRateInfo__getsets[] = {
    {
        (char*) "ewmsdProb", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_ewmsdProb, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_ewmsdProb, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_numRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_numRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "mcsIndex", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_mcsIndex, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_mcsIndex, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "adjustedRetryCount", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_adjustedRetryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_adjustedRetryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_prevNumRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_prevNumRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "supported", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_supported, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_supported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numSamplesSkipped", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_numSamplesSkipped, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_numSamplesSkipped, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retryUpdated", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_retryUpdated, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_retryUpdated, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "throughput", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_throughput, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_throughput, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "perfectTxTime", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_perfectTxTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_perfectTxTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_numRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_numRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "attemptHist", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_attemptHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_attemptHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retryCount", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_retryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_retryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ewmaProb", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_ewmaProb, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_ewmaProb, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_prevNumRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_prevNumRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prob", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_prob, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_prob, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "successHist", /* attribute name */
        (getter) _wrap_PyNs3HtRateInfo__get_successHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3HtRateInfo__set_successHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3HtRateInfo__tp_init__0(PyNs3HtRateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtRateInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3HtRateInfo__tp_init__1(PyNs3HtRateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3HtRateInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtRateInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtRateInfo(*((PyNs3HtRateInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3HtRateInfo__tp_init(PyNs3HtRateInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3HtRateInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3HtRateInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3HtRateInfo__copy__(PyNs3HtRateInfo *self)
{

    PyNs3HtRateInfo *py_copy;
    py_copy = PyObject_New(PyNs3HtRateInfo, &PyNs3HtRateInfo_Type);
    py_copy->obj = new ns3::HtRateInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3HtRateInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3HtRateInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3HtRateInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3HtRateInfo__tp_dealloc(PyNs3HtRateInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3HtRateInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3HtRateInfo_wrapper_registry.end()) {
        PyNs3HtRateInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::HtRateInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3HtRateInfo__tp_richcompare (PyNs3HtRateInfo *PYBINDGEN_UNUSED(self), PyNs3HtRateInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3HtRateInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3HtRateInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.HtRateInfo",            /* tp_name */
    sizeof(PyNs3HtRateInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3HtRateInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "HtRateInfo(arg0)\nHtRateInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3HtRateInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3HtRateInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3HtRateInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3HtRateInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3InterferenceHelper_wrapper_registry;


static int
_wrap_PyNs3InterferenceHelper__tp_init__0(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3InterferenceHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3InterferenceHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper(*((PyNs3InterferenceHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3InterferenceHelper__tp_init__1(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3InterferenceHelper__tp_init(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3InterferenceHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3InterferenceHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetEnergyDuration(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyW;
    const char *keywords[] = {"energyW", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyW)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetEnergyDuration(energyW);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_NotifyRxEnd(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEnd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_SetNoiseFigure(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &value)) {
        return NULL;
    }
    self->obj->SetNoiseFigure(value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_EraseEvents(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->EraseEvents();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_CalculatePlcpPayloadSnrPer(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Event *event;
    ns3::Event *event_ptr;
    const char *keywords[] = {"event", NULL};
    PyNs3InterferenceHelperSnrPer *py_SnrPer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Event_Type, &event)) {
        return NULL;
    }
    event_ptr = (event ? event->obj : NULL);
    ns3::InterferenceHelper::SnrPer retval = self->obj->CalculatePlcpPayloadSnrPer(ns3::Ptr< ns3::Event  > (event_ptr));
    py_SnrPer = PyObject_New(PyNs3InterferenceHelperSnrPer, &PyNs3InterferenceHelperSnrPer_Type);
    py_SnrPer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SnrPer->obj = new ns3::InterferenceHelper::SnrPer(retval);
    PyNs3InterferenceHelperSnrPer_wrapper_registry[(void *) py_SnrPer->obj] = (PyObject *) py_SnrPer;
    py_retval = Py_BuildValue((char *) "N", py_SnrPer);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_AddForeignSignal(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    double rxPower;
    const char *keywords[] = {"duration", "rxPower", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Time_Type, &duration, &rxPower)) {
        return NULL;
    }
    self->obj->AddForeignSignal(*((PyNs3Time *) duration)->obj, rxPower);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_Add(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Event > retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    PyNs3Time *duration;
    double rxPower;
    const char *keywords[] = {"packet", "txVector", "duration", "rxPower", NULL};
    PyNs3Event *py_Event;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &PyNs3Time_Type, &duration, &rxPower)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Add(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) duration)->obj, rxPower);
    if (!(const_cast<ns3::Event *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Event *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Event = NULL;
    } else {
        py_Event = (PyNs3Event *) wrapper_lookup_iter->second;
        Py_INCREF(py_Event);
    }
    
    if (py_Event == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Event *> (ns3::PeekPointer (retval)))), &PyNs3Event_Type);
        py_Event = PyObject_New(PyNs3Event, wrapper_type);
    
        py_Event->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Event *> (ns3::PeekPointer (retval))->Ref();
        py_Event->obj = const_cast<ns3::Event *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Event->obj] = (PyObject *) py_Event;
    }
    py_retval = Py_BuildValue((char *) "N", py_Event);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetErrorRateModel(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ErrorRateModel > retval;
    PyNs3ErrorRateModel *py_ErrorRateModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetErrorRateModel();
    if (!(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3ErrorRateModel__PythonHelper).name())
    {
        py_ErrorRateModel = reinterpret_cast< PyNs3ErrorRateModel* >(reinterpret_cast< PyNs3ErrorRateModel__PythonHelper* >(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_ErrorRateModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ErrorRateModel = NULL;
        } else {
            py_ErrorRateModel = (PyNs3ErrorRateModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_ErrorRateModel);
        }
    
        if (py_ErrorRateModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))), &PyNs3ErrorRateModel_Type);
            py_ErrorRateModel = PyObject_GC_New(PyNs3ErrorRateModel, wrapper_type);
            py_ErrorRateModel->inst_dict = NULL;
    
            py_ErrorRateModel->inst_dict = NULL;
            py_ErrorRateModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval))->Ref();
            py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ErrorRateModel->obj] = (PyObject *) py_ErrorRateModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_ErrorRateModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_CalculatePlcpHeaderSnrPer(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Event *event;
    ns3::Event *event_ptr;
    const char *keywords[] = {"event", NULL};
    PyNs3InterferenceHelperSnrPer *py_SnrPer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Event_Type, &event)) {
        return NULL;
    }
    event_ptr = (event ? event->obj : NULL);
    ns3::InterferenceHelper::SnrPer retval = self->obj->CalculatePlcpHeaderSnrPer(ns3::Ptr< ns3::Event  > (event_ptr));
    py_SnrPer = PyObject_New(PyNs3InterferenceHelperSnrPer, &PyNs3InterferenceHelperSnrPer_Type);
    py_SnrPer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SnrPer->obj = new ns3::InterferenceHelper::SnrPer(retval);
    PyNs3InterferenceHelperSnrPer_wrapper_registry[(void *) py_SnrPer->obj] = (PyObject *) py_SnrPer;
    py_retval = Py_BuildValue((char *) "N", py_SnrPer);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_SetNumberOfReceiveAntennas(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rx;
    const char *keywords[] = {"rx", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rx)) {
        return NULL;
    }
    if (rx > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNumberOfReceiveAntennas(rx);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_NotifyRxStart(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxStart();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3InterferenceHelper__copy__(PyNs3InterferenceHelper *self)
{

    PyNs3InterferenceHelper *py_copy;
    py_copy = PyObject_New(PyNs3InterferenceHelper, &PyNs3InterferenceHelper_Type);
    py_copy->obj = new ns3::InterferenceHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3InterferenceHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3InterferenceHelper_methods[] = {
    {(char *) "GetEnergyDuration", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetEnergyDuration, METH_KEYWORDS|METH_VARARGS, "GetEnergyDuration(energyW)\n\ntype: energyW: double" },
    {(char *) "NotifyRxEnd", (PyCFunction) _wrap_PyNs3InterferenceHelper_NotifyRxEnd, METH_NOARGS, "NotifyRxEnd()\n\n" },
    {(char *) "SetNoiseFigure", (PyCFunction) _wrap_PyNs3InterferenceHelper_SetNoiseFigure, METH_KEYWORDS|METH_VARARGS, "SetNoiseFigure(value)\n\ntype: value: double" },
    {(char *) "EraseEvents", (PyCFunction) _wrap_PyNs3InterferenceHelper_EraseEvents, METH_NOARGS, "EraseEvents()\n\n" },
    {(char *) "CalculatePlcpPayloadSnrPer", (PyCFunction) _wrap_PyNs3InterferenceHelper_CalculatePlcpPayloadSnrPer, METH_KEYWORDS|METH_VARARGS, "CalculatePlcpPayloadSnrPer(event)\n\ntype: event: ns3::Ptr< ns3::Event >" },
    {(char *) "AddForeignSignal", (PyCFunction) _wrap_PyNs3InterferenceHelper_AddForeignSignal, METH_KEYWORDS|METH_VARARGS, "AddForeignSignal(duration, rxPower)\n\ntype: duration: ns3::Time\ntype: rxPower: double" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3InterferenceHelper_Add, METH_KEYWORDS|METH_VARARGS, "Add(packet, txVector, duration, rxPower)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: txVector: ns3::WifiTxVector\ntype: duration: ns3::Time\ntype: rxPower: double" },
    {(char *) "GetErrorRateModel", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetErrorRateModel, METH_NOARGS, "GetErrorRateModel()\n\n" },
    {(char *) "CalculatePlcpHeaderSnrPer", (PyCFunction) _wrap_PyNs3InterferenceHelper_CalculatePlcpHeaderSnrPer, METH_KEYWORDS|METH_VARARGS, "CalculatePlcpHeaderSnrPer(event)\n\ntype: event: ns3::Ptr< ns3::Event >" },
    {(char *) "SetNumberOfReceiveAntennas", (PyCFunction) _wrap_PyNs3InterferenceHelper_SetNumberOfReceiveAntennas, METH_KEYWORDS|METH_VARARGS, "SetNumberOfReceiveAntennas(rx)\n\ntype: rx: uint8_t" },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3InterferenceHelper_NotifyRxStart, METH_NOARGS, "NotifyRxStart()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3InterferenceHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3InterferenceHelper__tp_dealloc(PyNs3InterferenceHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3InterferenceHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3InterferenceHelper_wrapper_registry.end()) {
        PyNs3InterferenceHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::InterferenceHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3InterferenceHelper__tp_richcompare (PyNs3InterferenceHelper *PYBINDGEN_UNUSED(self), PyNs3InterferenceHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3InterferenceHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3InterferenceHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.InterferenceHelper",            /* tp_name */
    sizeof(PyNs3InterferenceHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3InterferenceHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "InterferenceHelper(arg0)\nInterferenceHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3InterferenceHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3InterferenceHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3InterferenceHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3InterferenceHelperSnrPer_wrapper_registry;
static PyObject* _wrap_PyNs3InterferenceHelperSnrPer__get_per(PyNs3InterferenceHelperSnrPer *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->per);
    return py_retval;
}
static int _wrap_PyNs3InterferenceHelperSnrPer__set_per(PyNs3InterferenceHelperSnrPer *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->per)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3InterferenceHelperSnrPer__get_snr(PyNs3InterferenceHelperSnrPer *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->snr);
    return py_retval;
}
static int _wrap_PyNs3InterferenceHelperSnrPer__set_snr(PyNs3InterferenceHelperSnrPer *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->snr)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3InterferenceHelperSnrPer__getsets[] = {
    {
        (char*) "snr", /* attribute name */
        (getter) _wrap_PyNs3InterferenceHelperSnrPer__get_snr, /* C function to get the attribute */
        (setter) _wrap_PyNs3InterferenceHelperSnrPer__set_snr, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "per", /* attribute name */
        (getter) _wrap_PyNs3InterferenceHelperSnrPer__get_per, /* C function to get the attribute */
        (setter) _wrap_PyNs3InterferenceHelperSnrPer__set_per, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3InterferenceHelperSnrPer__tp_init__0(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper::SnrPer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3InterferenceHelperSnrPer__tp_init__1(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3InterferenceHelperSnrPer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3InterferenceHelperSnrPer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper::SnrPer(*((PyNs3InterferenceHelperSnrPer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3InterferenceHelperSnrPer__tp_init(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3InterferenceHelperSnrPer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3InterferenceHelperSnrPer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3InterferenceHelperSnrPer__copy__(PyNs3InterferenceHelperSnrPer *self)
{

    PyNs3InterferenceHelperSnrPer *py_copy;
    py_copy = PyObject_New(PyNs3InterferenceHelperSnrPer, &PyNs3InterferenceHelperSnrPer_Type);
    py_copy->obj = new ns3::InterferenceHelper::SnrPer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3InterferenceHelperSnrPer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3InterferenceHelperSnrPer_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3InterferenceHelperSnrPer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3InterferenceHelperSnrPer__tp_dealloc(PyNs3InterferenceHelperSnrPer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3InterferenceHelperSnrPer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3InterferenceHelperSnrPer_wrapper_registry.end()) {
        PyNs3InterferenceHelperSnrPer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::InterferenceHelper::SnrPer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3InterferenceHelperSnrPer__tp_richcompare (PyNs3InterferenceHelperSnrPer *PYBINDGEN_UNUSED(self), PyNs3InterferenceHelperSnrPer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3InterferenceHelperSnrPer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3InterferenceHelperSnrPer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.InterferenceHelper.SnrPer",            /* tp_name */
    sizeof(PyNs3InterferenceHelperSnrPer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3InterferenceHelperSnrPer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SnrPer(arg0)\nSnrPer()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3InterferenceHelperSnrPer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3InterferenceHelperSnrPer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3InterferenceHelperSnrPer__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3InterferenceHelperSnrPer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacLowTransmissionParameters_wrapper_registry;


static int
_wrap_PyNs3MacLowTransmissionParameters__tp_init__0(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLowTransmissionParameters *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLowTransmissionParameters_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacLowTransmissionParameters(*((PyNs3MacLowTransmissionParameters *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MacLowTransmissionParameters__tp_init__1(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacLowTransmissionParameters();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MacLowTransmissionParameters__tp_init(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLowTransmissionParameters__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLowTransmissionParameters__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableBasicBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableBasicBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_GetNextPacketSize(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNextPacketSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableRts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableNextData(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &size)) {
        return NULL;
    }
    self->obj->EnableNextData(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitNormalAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitNormalAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitMultiTidBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitMultiTidBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_HasNextPacket(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasNextPacket();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustSendRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendRts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableCompressedBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableCompressedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableRts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitBasicBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitBasicBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableMultiTidBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableMultiTidBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableNextData(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableNextData();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitCompressedBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitCompressedBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacLowTransmissionParameters__copy__(PyNs3MacLowTransmissionParameters *self)
{

    PyNs3MacLowTransmissionParameters *py_copy;
    py_copy = PyObject_New(PyNs3MacLowTransmissionParameters, &PyNs3MacLowTransmissionParameters_Type);
    py_copy->obj = new ns3::MacLowTransmissionParameters(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MacLowTransmissionParameters_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacLowTransmissionParameters_methods[] = {
    {(char *) "EnableBasicBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableBasicBlockAck, METH_NOARGS, "EnableBasicBlockAck()\n\n" },
    {(char *) "GetNextPacketSize", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_GetNextPacketSize, METH_NOARGS, "GetNextPacketSize()\n\n" },
    {(char *) "DisableRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableRts, METH_NOARGS, "DisableRts()\n\n" },
    {(char *) "EnableNextData", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableNextData, METH_KEYWORDS|METH_VARARGS, "EnableNextData(size)\n\ntype: size: uint32_t" },
    {(char *) "MustWaitNormalAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitNormalAck, METH_NOARGS, "MustWaitNormalAck()\n\n" },
    {(char *) "MustWaitMultiTidBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitMultiTidBlockAck, METH_NOARGS, "MustWaitMultiTidBlockAck()\n\n" },
    {(char *) "HasNextPacket", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_HasNextPacket, METH_NOARGS, "HasNextPacket()\n\n" },
    {(char *) "MustSendRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustSendRts, METH_NOARGS, "MustSendRts()\n\n" },
    {(char *) "EnableCompressedBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableCompressedBlockAck, METH_NOARGS, "EnableCompressedBlockAck()\n\n" },
    {(char *) "EnableRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableRts, METH_NOARGS, "EnableRts()\n\n" },
    {(char *) "MustWaitBasicBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitBasicBlockAck, METH_NOARGS, "MustWaitBasicBlockAck()\n\n" },
    {(char *) "EnableMultiTidBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableMultiTidBlockAck, METH_NOARGS, "EnableMultiTidBlockAck()\n\n" },
    {(char *) "DisableNextData", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableNextData, METH_NOARGS, "DisableNextData()\n\n" },
    {(char *) "EnableAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableAck, METH_NOARGS, "EnableAck()\n\n" },
    {(char *) "DisableAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableAck, METH_NOARGS, "DisableAck()\n\n" },
    {(char *) "MustWaitCompressedBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitCompressedBlockAck, METH_NOARGS, "MustWaitCompressedBlockAck()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MacLowTransmissionParameters__tp_dealloc(PyNs3MacLowTransmissionParameters *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacLowTransmissionParameters_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacLowTransmissionParameters_wrapper_registry.end()) {
        PyNs3MacLowTransmissionParameters_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MacLowTransmissionParameters *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3MacLowTransmissionParameters__tp_str(PyNs3MacLowTransmissionParameters *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3MacLowTransmissionParameters__tp_richcompare (PyNs3MacLowTransmissionParameters *PYBINDGEN_UNUSED(self), PyNs3MacLowTransmissionParameters *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLowTransmissionParameters_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLowTransmissionParameters_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MacLowTransmissionParameters",            /* tp_name */
    sizeof(PyNs3MacLowTransmissionParameters),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLowTransmissionParameters__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3MacLowTransmissionParameters__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MacLowTransmissionParameters(arg0)\nMacLowTransmissionParameters()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLowTransmissionParameters__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLowTransmissionParameters_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLowTransmissionParameters__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3McsGroup_wrapper_registry;
static PyObject* _wrap_PyNs3McsGroup__get_chWidth(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->chWidth);
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_chWidth(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->chWidth = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_isSupported(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->isSupported));
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_isSupported(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->isSupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_isVht(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->isVht));
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_isVht(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->isVht = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_ratesFirstMpduTxTimeTable(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::TxTime retval;
    Pyns3__TxTime *py_ns3__TxTime;
    
    py_ns3__TxTime = PyObject_New(Pyns3__TxTime, &Pyns3__TxTime_Type);
    py_ns3__TxTime->obj = new ns3::TxTime(self->obj->ratesFirstMpduTxTimeTable);
    py_retval = Py_BuildValue((char *) "N", py_ns3__TxTime);
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_ratesFirstMpduTxTimeTable(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::TxTime retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__TxTime, &self->obj->ratesFirstMpduTxTimeTable)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_ratesTxTimeTable(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::TxTime retval;
    Pyns3__TxTime *py_ns3__TxTime;
    
    py_ns3__TxTime = PyObject_New(Pyns3__TxTime, &Pyns3__TxTime_Type);
    py_ns3__TxTime->obj = new ns3::TxTime(self->obj->ratesTxTimeTable);
    py_retval = Py_BuildValue((char *) "N", py_ns3__TxTime);
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_ratesTxTimeTable(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::TxTime retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__TxTime, &self->obj->ratesTxTimeTable)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_sgi(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->sgi);
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_sgi(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->sgi = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3McsGroup__get_streams(PyNs3McsGroup *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->streams);
    return py_retval;
}
static int _wrap_PyNs3McsGroup__set_streams(PyNs3McsGroup *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->streams = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3McsGroup__getsets[] = {
    {
        (char*) "chWidth", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_chWidth, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_chWidth, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "isSupported", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_isSupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_isSupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ratesTxTimeTable", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_ratesTxTimeTable, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_ratesTxTimeTable, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "sgi", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_sgi, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_sgi, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "streams", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_streams, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_streams, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ratesFirstMpduTxTimeTable", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_ratesFirstMpduTxTimeTable, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_ratesFirstMpduTxTimeTable, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "isVht", /* attribute name */
        (getter) _wrap_PyNs3McsGroup__get_isVht, /* C function to get the attribute */
        (setter) _wrap_PyNs3McsGroup__set_isVht, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3McsGroup__tp_init__0(PyNs3McsGroup *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::McsGroup();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3McsGroup__tp_init__1(PyNs3McsGroup *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3McsGroup *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3McsGroup_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::McsGroup(*((PyNs3McsGroup *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3McsGroup__tp_init(PyNs3McsGroup *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3McsGroup__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3McsGroup__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3McsGroup__copy__(PyNs3McsGroup *self)
{

    PyNs3McsGroup *py_copy;
    py_copy = PyObject_New(PyNs3McsGroup, &PyNs3McsGroup_Type);
    py_copy->obj = new ns3::McsGroup(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3McsGroup_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3McsGroup_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3McsGroup__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3McsGroup__tp_dealloc(PyNs3McsGroup *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3McsGroup_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3McsGroup_wrapper_registry.end()) {
        PyNs3McsGroup_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::McsGroup *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3McsGroup__tp_richcompare (PyNs3McsGroup *PYBINDGEN_UNUSED(self), PyNs3McsGroup *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3McsGroup_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3McsGroup_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.McsGroup",            /* tp_name */
    sizeof(PyNs3McsGroup),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3McsGroup__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "McsGroup(arg0)\nMcsGroup()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3McsGroup__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3McsGroup_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3McsGroup__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3McsGroup__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MpduInfo_wrapper_registry;
static PyObject* _wrap_PyNs3MpduInfo__get_mpduRefNumber(PyNs3MpduInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->mpduRefNumber));
    return py_retval;
}
static int _wrap_PyNs3MpduInfo__set_mpduRefNumber(PyNs3MpduInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->mpduRefNumber)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MpduInfo__get_type(PyNs3MpduInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->type);
    return py_retval;
}
static int _wrap_PyNs3MpduInfo__set_type(PyNs3MpduInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->type)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3MpduInfo__getsets[] = {
    {
        (char*) "mpduRefNumber", /* attribute name */
        (getter) _wrap_PyNs3MpduInfo__get_mpduRefNumber, /* C function to get the attribute */
        (setter) _wrap_PyNs3MpduInfo__set_mpduRefNumber, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "type", /* attribute name */
        (getter) _wrap_PyNs3MpduInfo__get_type, /* C function to get the attribute */
        (setter) _wrap_PyNs3MpduInfo__set_type, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3MpduInfo__tp_init__0(PyNs3MpduInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MpduInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MpduInfo__tp_init__1(PyNs3MpduInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MpduInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MpduInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MpduInfo(*((PyNs3MpduInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MpduInfo__tp_init(PyNs3MpduInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MpduInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MpduInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3MpduInfo__copy__(PyNs3MpduInfo *self)
{

    PyNs3MpduInfo *py_copy;
    py_copy = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
    py_copy->obj = new ns3::MpduInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MpduInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MpduInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MpduInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MpduInfo__tp_dealloc(PyNs3MpduInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MpduInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MpduInfo_wrapper_registry.end()) {
        PyNs3MpduInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MpduInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MpduInfo__tp_richcompare (PyNs3MpduInfo *PYBINDGEN_UNUSED(self), PyNs3MpduInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MpduInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MpduInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MpduInfo",            /* tp_name */
    sizeof(PyNs3MpduInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MpduInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MpduInfo(arg0)\nMpduInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MpduInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MpduInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3MpduInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MpduInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3OriginatorBlockAckAgreement__tp_init__0(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OriginatorBlockAckAgreement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OriginatorBlockAckAgreement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OriginatorBlockAckAgreement(*((PyNs3OriginatorBlockAckAgreement *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OriginatorBlockAckAgreement__tp_init__1(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OriginatorBlockAckAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OriginatorBlockAckAgreement__tp_init(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OriginatorBlockAckAgreement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OriginatorBlockAckAgreement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_NotifyMpduTransmission(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nextSeqNumber;
    const char *keywords[] = {"nextSeqNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nextSeqNumber)) {
        return NULL;
    }
    if (nextSeqNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyMpduTransmission(nextSeqNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsPending(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPending();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsUnsuccessful(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUnsuccessful();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsBlockAckRequestNeeded(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBlockAckRequestNeeded();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsInactive(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsInactive();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_CompleteExchange(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->CompleteExchange();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_SetState(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::OriginatorBlockAckAgreement::State state;
    const char *keywords[] = {"state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &state)) {
        return NULL;
    }
    self->obj->SetState(state);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsEstablished(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsEstablished();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3OriginatorBlockAckAgreement__copy__(PyNs3OriginatorBlockAckAgreement *self)
{

    PyNs3OriginatorBlockAckAgreement *py_copy;
    py_copy = PyObject_New(PyNs3OriginatorBlockAckAgreement, &PyNs3OriginatorBlockAckAgreement_Type);
    py_copy->obj = new ns3::OriginatorBlockAckAgreement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3BlockAckAgreement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OriginatorBlockAckAgreement_methods[] = {
    {(char *) "NotifyMpduTransmission", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_NotifyMpduTransmission, METH_KEYWORDS|METH_VARARGS, "NotifyMpduTransmission(nextSeqNumber)\n\ntype: nextSeqNumber: uint16_t" },
    {(char *) "IsPending", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsPending, METH_NOARGS, "IsPending()\n\n" },
    {(char *) "IsUnsuccessful", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsUnsuccessful, METH_NOARGS, "IsUnsuccessful()\n\n" },
    {(char *) "IsBlockAckRequestNeeded", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsBlockAckRequestNeeded, METH_NOARGS, "IsBlockAckRequestNeeded()\n\n" },
    {(char *) "IsInactive", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsInactive, METH_NOARGS, "IsInactive()\n\n" },
    {(char *) "CompleteExchange", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_CompleteExchange, METH_NOARGS, "CompleteExchange()\n\n" },
    {(char *) "SetState", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_SetState, METH_KEYWORDS|METH_VARARGS, "SetState(state)\n\ntype: state: ns3::OriginatorBlockAckAgreement::State" },
    {(char *) "IsEstablished", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsEstablished, METH_NOARGS, "IsEstablished()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OriginatorBlockAckAgreement__tp_dealloc(PyNs3OriginatorBlockAckAgreement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckAgreement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckAgreement_wrapper_registry.end()) {
        PyNs3BlockAckAgreement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OriginatorBlockAckAgreement *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OriginatorBlockAckAgreement__tp_richcompare (PyNs3OriginatorBlockAckAgreement *PYBINDGEN_UNUSED(self), PyNs3OriginatorBlockAckAgreement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OriginatorBlockAckAgreement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OriginatorBlockAckAgreement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.OriginatorBlockAckAgreement",            /* tp_name */
    sizeof(PyNs3OriginatorBlockAckAgreement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OriginatorBlockAckAgreement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OriginatorBlockAckAgreement(recipient, tid)\nOriginatorBlockAckAgreement(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OriginatorBlockAckAgreement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OriginatorBlockAckAgreement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OriginatorBlockAckAgreement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3RateInfo_wrapper_registry;
static PyObject* _wrap_PyNs3RateInfo__get_adjustedRetryCount(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->adjustedRetryCount));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_adjustedRetryCount(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->adjustedRetryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_attemptHist(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->attemptHist);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_attemptHist(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->attemptHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_ewmaProb(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->ewmaProb));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_ewmaProb(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->ewmaProb)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_numRateAttempt(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_numRateAttempt(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_numRateSuccess(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_numRateSuccess(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_numSamplesSkipped(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->numSamplesSkipped);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_numSamplesSkipped(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->numSamplesSkipped = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_perfectTxTime(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->perfectTxTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_perfectTxTime(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->perfectTxTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prevNumRateAttempt(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prevNumRateAttempt(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prevNumRateSuccess(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prevNumRateSuccess(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prob(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prob));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prob(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prob)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_retryCount(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->retryCount));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_retryCount(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->retryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_sampleLimit(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->sampleLimit);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_sampleLimit(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->sampleLimit)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_successHist(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->successHist);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_successHist(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->successHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_throughput(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->throughput));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_throughput(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->throughput)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3RateInfo__getsets[] = {
    {
        (char*) "adjustedRetryCount", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_adjustedRetryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_adjustedRetryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_numRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_numRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_numRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_numRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prevNumRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prevNumRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "sampleLimit", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_sampleLimit, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_sampleLimit, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numSamplesSkipped", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_numSamplesSkipped, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_numSamplesSkipped, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "throughput", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_throughput, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_throughput, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "perfectTxTime", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_perfectTxTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_perfectTxTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "attemptHist", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_attemptHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_attemptHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retryCount", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_retryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_retryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ewmaProb", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_ewmaProb, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_ewmaProb, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prevNumRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prevNumRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prob", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prob, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prob, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "successHist", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_successHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_successHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3RateInfo__tp_init__0(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RateInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3RateInfo__tp_init__1(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RateInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RateInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RateInfo(*((PyNs3RateInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3RateInfo__tp_init(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RateInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RateInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3RateInfo__copy__(PyNs3RateInfo *self)
{

    PyNs3RateInfo *py_copy;
    py_copy = PyObject_New(PyNs3RateInfo, &PyNs3RateInfo_Type);
    py_copy->obj = new ns3::RateInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3RateInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RateInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RateInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3RateInfo__tp_dealloc(PyNs3RateInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3RateInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3RateInfo_wrapper_registry.end()) {
        PyNs3RateInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::RateInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RateInfo__tp_richcompare (PyNs3RateInfo *PYBINDGEN_UNUSED(self), PyNs3RateInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RateInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RateInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.RateInfo",            /* tp_name */
    sizeof(PyNs3RateInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RateInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "RateInfo(arg0)\nRateInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RateInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RateInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3RateInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RateInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SignalNoiseDbm_wrapper_registry;
static PyObject* _wrap_PyNs3SignalNoiseDbm__get_noise(PyNs3SignalNoiseDbm *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->noise);
    return py_retval;
}
static int _wrap_PyNs3SignalNoiseDbm__set_noise(PyNs3SignalNoiseDbm *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->noise)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3SignalNoiseDbm__get_signal(PyNs3SignalNoiseDbm *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->signal);
    return py_retval;
}
static int _wrap_PyNs3SignalNoiseDbm__set_signal(PyNs3SignalNoiseDbm *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->signal)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3SignalNoiseDbm__getsets[] = {
    {
        (char*) "signal", /* attribute name */
        (getter) _wrap_PyNs3SignalNoiseDbm__get_signal, /* C function to get the attribute */
        (setter) _wrap_PyNs3SignalNoiseDbm__set_signal, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "noise", /* attribute name */
        (getter) _wrap_PyNs3SignalNoiseDbm__get_noise, /* C function to get the attribute */
        (setter) _wrap_PyNs3SignalNoiseDbm__set_noise, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3SignalNoiseDbm__tp_init__0(PyNs3SignalNoiseDbm *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SignalNoiseDbm();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SignalNoiseDbm__tp_init__1(PyNs3SignalNoiseDbm *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SignalNoiseDbm *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SignalNoiseDbm_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SignalNoiseDbm(*((PyNs3SignalNoiseDbm *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SignalNoiseDbm__tp_init(PyNs3SignalNoiseDbm *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SignalNoiseDbm__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SignalNoiseDbm__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SignalNoiseDbm__copy__(PyNs3SignalNoiseDbm *self)
{

    PyNs3SignalNoiseDbm *py_copy;
    py_copy = PyObject_New(PyNs3SignalNoiseDbm, &PyNs3SignalNoiseDbm_Type);
    py_copy->obj = new ns3::SignalNoiseDbm(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SignalNoiseDbm_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SignalNoiseDbm_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SignalNoiseDbm__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SignalNoiseDbm__tp_dealloc(PyNs3SignalNoiseDbm *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SignalNoiseDbm_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SignalNoiseDbm_wrapper_registry.end()) {
        PyNs3SignalNoiseDbm_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::SignalNoiseDbm *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SignalNoiseDbm__tp_richcompare (PyNs3SignalNoiseDbm *PYBINDGEN_UNUSED(self), PyNs3SignalNoiseDbm *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SignalNoiseDbm_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SignalNoiseDbm_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SignalNoiseDbm",            /* tp_name */
    sizeof(PyNs3SignalNoiseDbm),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SignalNoiseDbm__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SignalNoiseDbm(arg0)\nSignalNoiseDbm()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SignalNoiseDbm__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SignalNoiseDbm_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3SignalNoiseDbm__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SignalNoiseDbm__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3StatusCode_wrapper_registry;


static int
_wrap_PyNs3StatusCode__tp_init__0(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3StatusCode *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::StatusCode(*((PyNs3StatusCode *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3StatusCode__tp_init__1(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::StatusCode();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3StatusCode__tp_init(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3StatusCode__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3StatusCode__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3StatusCode_SetSuccess(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    
    self->obj->SetSuccess();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_Deserialize(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_Serialize(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_IsSuccess(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsSuccess();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_GetSerializedSize(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_SetFailure(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    
    self->obj->SetFailure();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3StatusCode__copy__(PyNs3StatusCode *self)
{

    PyNs3StatusCode *py_copy;
    py_copy = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_copy->obj = new ns3::StatusCode(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3StatusCode_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3StatusCode_methods[] = {
    {(char *) "SetSuccess", (PyCFunction) _wrap_PyNs3StatusCode_SetSuccess, METH_NOARGS, "SetSuccess()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3StatusCode_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3StatusCode_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "IsSuccess", (PyCFunction) _wrap_PyNs3StatusCode_IsSuccess, METH_NOARGS, "IsSuccess()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3StatusCode_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetFailure", (PyCFunction) _wrap_PyNs3StatusCode_SetFailure, METH_NOARGS, "SetFailure()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3StatusCode__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3StatusCode__tp_dealloc(PyNs3StatusCode *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3StatusCode_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3StatusCode_wrapper_registry.end()) {
        PyNs3StatusCode_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::StatusCode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3StatusCode__tp_str(PyNs3StatusCode *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3StatusCode__tp_richcompare (PyNs3StatusCode *PYBINDGEN_UNUSED(self), PyNs3StatusCode *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3StatusCode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3StatusCode_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.StatusCode",            /* tp_name */
    sizeof(PyNs3StatusCode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3StatusCode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3StatusCode__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "StatusCode(arg0)\nStatusCode()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3StatusCode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3StatusCode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3StatusCode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiHelper_wrapper_registry;




void
PyNs3WifiHelper__PythonHelper::SetStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiHelper *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiHelper::SetStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiHelper* >(m_pyself)->obj = (ns3::WifiHelper*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiHelper__tp_init__0(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiHelper_Type)
    {
        self->obj = new PyNs3WifiHelper__PythonHelper(*((PyNs3WifiHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiHelper(*((PyNs3WifiHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3WifiHelper__tp_init__1(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiHelper_Type)
    {
        self->obj = new PyNs3WifiHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3WifiHelper__tp_init(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiHelper_SetStandard(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3WifiHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetStandard(standard)) : (self->obj->ns3::WifiHelper::SetStandard(standard));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiHelper_EnableLogComponents(void)
{
    PyObject *py_retval;
    
    ns3::WifiHelper::EnableLogComponents();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiHelper_SetRemoteStationManager(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetRemoteStationManager(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiHelper_Install__0(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3WifiPhyHelper *phy;
    PyNs3WifiMacHelper *mac;
    PyNs3NodeContainer *c;
    PyNs3WifiHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", "mac", "c", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3WifiPhyHelper_Type, &phy, &PyNs3WifiMacHelper_Type, &mac, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::NetDeviceContainer retval = (helper_class == NULL)? (self->obj->Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, *((PyNs3NodeContainer *) c)->obj)) : (self->obj->ns3::WifiHelper::Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, *((PyNs3NodeContainer *) c)->obj));
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiHelper_Install__1(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3WifiPhyHelper *phy;
    PyNs3WifiMacHelper *mac;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WifiHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", "mac", "node", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3WifiPhyHelper_Type, &phy, &PyNs3WifiMacHelper_Type, &mac, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::NetDeviceContainer retval = (helper_class == NULL)? (self->obj->Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::WifiHelper::Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, ns3::Ptr< ns3::Node  > (node_ptr)));
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiHelper_Install__2(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3WifiPhyHelper *phy;
    PyNs3WifiMacHelper *mac;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    PyNs3WifiHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", "mac", "nodeName", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!s#", (char **) keywords, &PyNs3WifiPhyHelper_Type, &phy, &PyNs3WifiMacHelper_Type, &mac, &nodeName, &nodeName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::NetDeviceContainer retval = (helper_class == NULL)? (self->obj->Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, std::string(nodeName, nodeName_len))) : (self->obj->ns3::WifiHelper::Install(*((PyNs3WifiPhyHelper *) phy)->obj, *((PyNs3WifiMacHelper *) mac)->obj, std::string(nodeName, nodeName_len)));
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiHelper_Install(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiHelper_Install__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiHelper_AssignStreams(PyNs3WifiHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    PyNs3NetDeviceContainer *c;
    int64_t stream;
    const char *keywords[] = {"c", "stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!L", (char **) keywords, &PyNs3NetDeviceContainer_Type, &c, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(*((PyNs3NetDeviceContainer *) c)->obj, stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiHelper__copy__(PyNs3WifiHelper *self)
{

    PyNs3WifiHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiHelper, &PyNs3WifiHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiHelper_methods[] = {
    {(char *) "SetStandard", (PyCFunction) _wrap_PyNs3WifiHelper_SetStandard, METH_KEYWORDS|METH_VARARGS, "SetStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "EnableLogComponents", (PyCFunction) _wrap_PyNs3WifiHelper_EnableLogComponents, METH_NOARGS|METH_STATIC, "EnableLogComponents()\n\n" },
    {(char *) "SetRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiHelper_SetRemoteStationManager, METH_KEYWORDS|METH_VARARGS, "SetRemoteStationManager(type, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: type: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3WifiHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3WifiHelper_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(c, stream)\n\ntype: c: ns3::NetDeviceContainer\ntype: stream: int64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiHelper__tp_clear(PyNs3WifiHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiHelper__tp_traverse(PyNs3WifiHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiHelper__tp_dealloc(PyNs3WifiHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiHelper_wrapper_registry.end()) {
        PyNs3WifiHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiHelper__tp_richcompare (PyNs3WifiHelper *PYBINDGEN_UNUSED(self), PyNs3WifiHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiHelper",            /* tp_name */
    sizeof(PyNs3WifiHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiHelper(arg0)\nWifiHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WifiHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiMacHelper_wrapper_registry;

ns3::Ptr< ns3::WifiMac >
PyNs3WifiMacHelper__PythonHelper::Create() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMac > retval;
    PyNs3WifiMac *tmp_WifiMac;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Create"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHelper::Create();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacHelper* >(m_pyself)->obj = const_cast< ns3::WifiMacHelper* >((const ns3::WifiMacHelper*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Create", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHelper::Create();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMac_Type, &tmp_WifiMac)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHelper::Create();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMac  > (tmp_WifiMac->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}



static int
_wrap_PyNs3WifiMacHelper__tp_init__0(PyNs3WifiMacHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMacHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiMacHelper_Type)
    {
        self->obj = new PyNs3WifiMacHelper__PythonHelper(*((PyNs3WifiMacHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiMacHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacHelper(*((PyNs3WifiMacHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3WifiMacHelper__tp_init__1(PyNs3WifiMacHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiMacHelper_Type)
    {
        self->obj = new PyNs3WifiMacHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiMacHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3WifiMacHelper__tp_init(PyNs3WifiMacHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMacHelper_Create(PyNs3WifiMacHelper *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMac > retval;
    PyNs3WifiMacHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHelper__PythonHelper*> (self->obj);
    PyNs3WifiMac *py_WifiMac;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->Create()) : (self->obj->ns3::WifiMacHelper::Create());
    if (!(const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMac = NULL;
    } else {
        py_WifiMac = (PyNs3WifiMac *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMac);
    }
    
    if (py_WifiMac == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))), &PyNs3WifiMac_Type);
        py_WifiMac = PyObject_GC_New(PyNs3WifiMac, wrapper_type);
        py_WifiMac->inst_dict = NULL;
    
        py_WifiMac->inst_dict = NULL;
        py_WifiMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMac->obj = const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMac->obj] = (PyObject *) py_WifiMac;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMac);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHelper_SetType(PyNs3WifiMacHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *n8 = NULL;
    Py_ssize_t n8_len;
    PyNs3AttributeValue *v8 = NULL;
    ns3::EmptyAttributeValue v8_default = ns3::EmptyAttributeValue();
    const char *n9 = NULL;
    Py_ssize_t n9_len;
    PyNs3AttributeValue *v9 = NULL;
    ns3::EmptyAttributeValue v9_default = ns3::EmptyAttributeValue();
    const char *n10 = NULL;
    Py_ssize_t n10_len;
    PyNs3AttributeValue *v10 = NULL;
    ns3::EmptyAttributeValue v10_default = ns3::EmptyAttributeValue();
    PyNs3WifiMacHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", "n8", "v8", "n9", "v9", "n10", "v10", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7, &n8, &n8_len, &PyNs3AttributeValue_Type, &v8, &n9, &n9_len, &PyNs3AttributeValue_Type, &v9, &n10, &n10_len, &PyNs3AttributeValue_Type, &v10)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetType(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default), (n8 ? std::string(n8, n8_len) : ""), (v8 ? (*((PyNs3AttributeValue *) v8)->obj) : v8_default), (n9 ? std::string(n9, n9_len) : ""), (v9 ? (*((PyNs3AttributeValue *) v9)->obj) : v9_default), (n10 ? std::string(n10, n10_len) : ""), (v10 ? (*((PyNs3AttributeValue *) v10)->obj) : v10_default))) : (self->obj->ns3::WifiMacHelper::SetType(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default), (n8 ? std::string(n8, n8_len) : ""), (v8 ? (*((PyNs3AttributeValue *) v8)->obj) : v8_default), (n9 ? std::string(n9, n9_len) : ""), (v9 ? (*((PyNs3AttributeValue *) v9)->obj) : v9_default), (n10 ? std::string(n10, n10_len) : ""), (v10 ? (*((PyNs3AttributeValue *) v10)->obj) : v10_default)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMacHelper__copy__(PyNs3WifiMacHelper *self)
{

    PyNs3WifiMacHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiMacHelper, &PyNs3WifiMacHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiMacHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiMacHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMacHelper_methods[] = {
    {(char *) "Create", (PyCFunction) _wrap_PyNs3WifiMacHelper_Create, METH_NOARGS, "Create()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3WifiMacHelper_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7, n8, v8, n9, v9, n10, v10)\n\ntype: type: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &\ntype: n8: std::string\ntype: v8: ns3::AttributeValue const &\ntype: n9: std::string\ntype: v9: ns3::AttributeValue const &\ntype: n10: std::string\ntype: v10: ns3::AttributeValue const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMacHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMacHelper__tp_clear(PyNs3WifiMacHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiMacHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiMacHelper__tp_traverse(PyNs3WifiMacHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiMacHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiMacHelper__tp_dealloc(PyNs3WifiMacHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiMacHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiMacHelper_wrapper_registry.end()) {
        PyNs3WifiMacHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMacHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacHelper__tp_richcompare (PyNs3WifiMacHelper *PYBINDGEN_UNUSED(self), PyNs3WifiMacHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMacHelper",            /* tp_name */
    sizeof(PyNs3WifiMacHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiMacHelper(arg0)\nWifiMacHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WifiMacHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMacHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMacHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiMode_wrapper_registry;


static int
_wrap_PyNs3WifiMode__tp_init__0(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMode *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode(*((PyNs3WifiMode *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiMode__tp_init__1(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiMode__tp_init__2(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *name;
    Py_ssize_t name_len;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode(std::string(name, name_len));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiMode__tp_init(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiMode__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMode__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiMode__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMode_GetCodeRate(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    ns3::WifiCodeRate retval;
    
    retval = self->obj->GetCodeRate();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetUid(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetUid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiMode_GetPhyRate__0(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    int channelWidth;
    int guardInterval;
    int nss;
    const char *keywords[] = {"channelWidth", "guardInterval", "nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iii", (char **) keywords, &channelWidth, &guardInterval, &nss)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (guardInterval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetPhyRate(channelWidth, guardInterval, nss);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMode_GetPhyRate__1(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetPhyRate(*((PyNs3WifiTxVector *) txVector)->obj);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiMode_GetPhyRate(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMode_GetPhyRate__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMode_GetPhyRate__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3WifiMode_GetDataRate__0(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    int channelWidth;
    int guardInterval;
    int nss;
    const char *keywords[] = {"channelWidth", "guardInterval", "nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iii", (char **) keywords, &channelWidth, &guardInterval, &nss)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (guardInterval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetDataRate(channelWidth, guardInterval, nss);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMode_GetDataRate__1(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetDataRate(*((PyNs3WifiTxVector *) txVector)->obj);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMode_GetDataRate__2(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    int channelWidth;
    const char *keywords[] = {"channelWidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelWidth)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetDataRate(channelWidth);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiMode_GetDataRate(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiMode_GetDataRate__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMode_GetDataRate__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiMode_GetDataRate__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiMode_GetNonHtReferenceRate(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetNonHtReferenceRate();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_IsMandatory(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMandatory();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_IsAllowed(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int channelWidth;
    int nss;
    const char *keywords[] = {"channelWidth", "nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &channelWidth, &nss)) {
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsAllowed(channelWidth, nss);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetModulationClass(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    ns3::WifiModulationClass retval;
    
    retval = self->obj->GetModulationClass();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetConstellationSize(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetConstellationSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetMcsValue(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMcsValue();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_IsHigherCodeRate(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    retval = self->obj->IsHigherCodeRate(*((PyNs3WifiMode *) mode)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_IsHigherDataRate(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    retval = self->obj->IsHigherDataRate(*((PyNs3WifiMode *) mode)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetUniqueName(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetUniqueName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMode__copy__(PyNs3WifiMode *self)
{

    PyNs3WifiMode *py_copy;
    py_copy = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_copy->obj = new ns3::WifiMode(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiMode_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMode_methods[] = {
    {(char *) "GetCodeRate", (PyCFunction) _wrap_PyNs3WifiMode_GetCodeRate, METH_NOARGS, "GetCodeRate()\n\n" },
    {(char *) "GetUid", (PyCFunction) _wrap_PyNs3WifiMode_GetUid, METH_NOARGS, "GetUid()\n\n" },
    {(char *) "GetPhyRate", (PyCFunction) _wrap_PyNs3WifiMode_GetPhyRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDataRate", (PyCFunction) _wrap_PyNs3WifiMode_GetDataRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNonHtReferenceRate", (PyCFunction) _wrap_PyNs3WifiMode_GetNonHtReferenceRate, METH_NOARGS, "GetNonHtReferenceRate()\n\n" },
    {(char *) "IsMandatory", (PyCFunction) _wrap_PyNs3WifiMode_IsMandatory, METH_NOARGS, "IsMandatory()\n\n" },
    {(char *) "IsAllowed", (PyCFunction) _wrap_PyNs3WifiMode_IsAllowed, METH_KEYWORDS|METH_VARARGS, "IsAllowed(channelWidth, nss)\n\ntype: channelWidth: uint16_t\ntype: nss: uint8_t" },
    {(char *) "GetModulationClass", (PyCFunction) _wrap_PyNs3WifiMode_GetModulationClass, METH_NOARGS, "GetModulationClass()\n\n" },
    {(char *) "GetConstellationSize", (PyCFunction) _wrap_PyNs3WifiMode_GetConstellationSize, METH_NOARGS, "GetConstellationSize()\n\n" },
    {(char *) "GetMcsValue", (PyCFunction) _wrap_PyNs3WifiMode_GetMcsValue, METH_NOARGS, "GetMcsValue()\n\n" },
    {(char *) "IsHigherCodeRate", (PyCFunction) _wrap_PyNs3WifiMode_IsHigherCodeRate, METH_KEYWORDS|METH_VARARGS, "IsHigherCodeRate(mode)\n\ntype: mode: ns3::WifiMode" },
    {(char *) "IsHigherDataRate", (PyCFunction) _wrap_PyNs3WifiMode_IsHigherDataRate, METH_KEYWORDS|METH_VARARGS, "IsHigherDataRate(mode)\n\ntype: mode: ns3::WifiMode" },
    {(char *) "GetUniqueName", (PyCFunction) _wrap_PyNs3WifiMode_GetUniqueName, METH_NOARGS, "GetUniqueName()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMode__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiMode__tp_dealloc(PyNs3WifiMode *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiMode_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiMode_wrapper_registry.end()) {
        PyNs3WifiMode_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiMode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3WifiMode__tp_str(PyNs3WifiMode *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3WifiMode__tp_richcompare (PyNs3WifiMode *PYBINDGEN_UNUSED(self), PyNs3WifiMode *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMode_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMode",            /* tp_name */
    sizeof(PyNs3WifiMode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3WifiMode__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiMode(arg0)\nWifiMode(name)\nWifiMode()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiModeFactory_wrapper_registry;

static int
_wrap_PyNs3WifiModeFactory__tp_init(PyNs3WifiModeFactory *self, PyObject *args, PyObject *kwargs)
{
    PyNs3WifiModeFactory *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiModeFactory_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::WifiModeFactory(*((PyNs3WifiModeFactory *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3WifiModeFactory_CreateWifiMcs(PyNs3WifiModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *uniqueName;
    Py_ssize_t uniqueName_len;
    int mcsValue;
    ns3::WifiModulationClass modClass;
    const char *keywords[] = {"uniqueName", "mcsValue", "modClass", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#ii", (char **) keywords, &uniqueName, &uniqueName_len, &mcsValue, &modClass)) {
        return NULL;
    }
    if (mcsValue > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = ns3::WifiModeFactory::CreateWifiMcs(std::string(uniqueName, uniqueName_len), mcsValue, modClass);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeFactory_CreateWifiMode(PyNs3WifiModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *uniqueName;
    Py_ssize_t uniqueName_len;
    ns3::WifiModulationClass modClass;
    bool isMandatory;
    PyObject *py_isMandatory;
    ns3::WifiCodeRate codingRate;
    int constellationSize;
    const char *keywords[] = {"uniqueName", "modClass", "isMandatory", "codingRate", "constellationSize", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#iOii", (char **) keywords, &uniqueName, &uniqueName_len, &modClass, &py_isMandatory, &codingRate, &constellationSize)) {
        return NULL;
    }
    isMandatory = (bool) PyObject_IsTrue(py_isMandatory);
    if (constellationSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = ns3::WifiModeFactory::CreateWifiMode(std::string(uniqueName, uniqueName_len), modClass, isMandatory, codingRate, constellationSize);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiModeFactory__copy__(PyNs3WifiModeFactory *self)
{

    PyNs3WifiModeFactory *py_copy;
    py_copy = PyObject_New(PyNs3WifiModeFactory, &PyNs3WifiModeFactory_Type);
    py_copy->obj = new ns3::WifiModeFactory(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiModeFactory_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiModeFactory_methods[] = {
    {(char *) "CreateWifiMcs", (PyCFunction) _wrap_PyNs3WifiModeFactory_CreateWifiMcs, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "CreateWifiMcs(uniqueName, mcsValue, modClass)\n\ntype: uniqueName: std::string\ntype: mcsValue: uint8_t\ntype: modClass: ns3::WifiModulationClass" },
    {(char *) "CreateWifiMode", (PyCFunction) _wrap_PyNs3WifiModeFactory_CreateWifiMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "CreateWifiMode(uniqueName, modClass, isMandatory, codingRate, constellationSize)\n\ntype: uniqueName: std::string\ntype: modClass: ns3::WifiModulationClass\ntype: isMandatory: bool\ntype: codingRate: ns3::WifiCodeRate\ntype: constellationSize: uint16_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiModeFactory__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeFactory__tp_dealloc(PyNs3WifiModeFactory *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiModeFactory_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiModeFactory_wrapper_registry.end()) {
        PyNs3WifiModeFactory_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiModeFactory *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeFactory__tp_richcompare (PyNs3WifiModeFactory *PYBINDGEN_UNUSED(self), PyNs3WifiModeFactory *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeFactory_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeFactory_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiModeFactory",            /* tp_name */
    sizeof(PyNs3WifiModeFactory),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeFactory__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiModeFactory(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeFactory__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeFactory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeFactory__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiPhyHelper__PythonHelper::_wrap_PcapSniffRxEvent(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PcapFileWrapper *file;
    ns3::PcapFileWrapper *file_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    PyNs3WifiTxVector *txVector;
    PyNs3MpduInfo *aMpdu;
    PyNs3SignalNoiseDbm *signalNoise;
    PyNs3WifiPhyHelper__PythonHelper *helper = dynamic_cast< PyNs3WifiPhyHelper__PythonHelper* >(self->obj);
    const char *keywords[] = {"file", "packet", "channelFreqMhz", "txVector", "aMpdu", "signalNoise", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iO!O!O!", (char **) keywords, &PyNs3PcapFileWrapper_Type, &file, &PyNs3Packet_Type, &packet, &channelFreqMhz, &PyNs3WifiTxVector_Type, &txVector, &PyNs3MpduInfo_Type, &aMpdu, &PyNs3SignalNoiseDbm_Type, &signalNoise)) {
        return NULL;
    }
    file_ptr = (file ? file->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method PcapSniffRxEvent of class WifiPhyHelper is protected and can only be called by a subclass");
        return NULL;
    }
    helper->PcapSniffRxEvent__parent_caller(ns3::Ptr< ns3::PcapFileWrapper  > (file_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3MpduInfo *) aMpdu)->obj, *((PyNs3SignalNoiseDbm *) signalNoise)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhyHelper__PythonHelper::_wrap_PcapSniffTxEvent(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PcapFileWrapper *file;
    ns3::PcapFileWrapper *file_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    PyNs3WifiTxVector *txVector;
    PyNs3MpduInfo *aMpdu;
    PyNs3WifiPhyHelper__PythonHelper *helper = dynamic_cast< PyNs3WifiPhyHelper__PythonHelper* >(self->obj);
    const char *keywords[] = {"file", "packet", "channelFreqMhz", "txVector", "aMpdu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iO!O!", (char **) keywords, &PyNs3PcapFileWrapper_Type, &file, &PyNs3Packet_Type, &packet, &channelFreqMhz, &PyNs3WifiTxVector_Type, &txVector, &PyNs3MpduInfo_Type, &aMpdu)) {
        return NULL;
    }
    file_ptr = (file ? file->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method PcapSniffTxEvent of class WifiPhyHelper is protected and can only be called by a subclass");
        return NULL;
    }
    helper->PcapSniffTxEvent__parent_caller(ns3::Ptr< ns3::PcapFileWrapper  > (file_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3MpduInfo *) aMpdu)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3WifiPhyHelper__PythonHelper::Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Create"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = const_cast< ns3::WifiPhyHelper* >((const ns3::WifiPhyHelper*) this);
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Create", (char *) "NN", py_Node, py_NetDevice);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiPhyHelper__PythonHelper::EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *py_OutputStreamWrapper;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnableAsciiInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_OutputStreamWrapper = NULL;
    } else {
        py_OutputStreamWrapper = (PyNs3OutputStreamWrapper *) wrapper_lookup_iter->second;
        Py_INCREF(py_OutputStreamWrapper);
    }
    
    if (py_OutputStreamWrapper == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))), &PyNs3OutputStreamWrapper_Type);
        py_OutputStreamWrapper = PyObject_New(PyNs3OutputStreamWrapper, wrapper_type);
    
        py_OutputStreamWrapper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))->Ref();
        py_OutputStreamWrapper->obj = const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream));
        PyNs3Empty_wrapper_registry[(void *) py_OutputStreamWrapper->obj] = (PyObject *) py_OutputStreamWrapper;
    }
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnableAsciiInternal", (char *) "Ns#NN", py_OutputStreamWrapper, prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyHelper__PythonHelper::EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnablePcapInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnablePcapInternal", (char *) "s#NNN", prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(promiscuous), PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiPhyHelper__tp_init__0(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhyHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhyHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhyHelper_Type)
    {
        self->obj = new PyNs3WifiPhyHelper__PythonHelper(*((PyNs3WifiPhyHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyHelper' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiPhyHelper__tp_init__1(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhyHelper_Type)
    {
        self->obj = new PyNs3WifiPhyHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyHelper' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiPhyHelper__tp_init(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhyHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_Create(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3NetDevice *device;
    ns3::NetDevice *device_ptr;
    const char *keywords[] = {"node", "device", NULL};
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Node_Type, &node, &PyNs3NetDevice_Type, &device)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    device_ptr = (device ? device->obj : NULL);
    retval = self->obj->Create(ns3::Ptr< ns3::Node  > (node_ptr), ns3::Ptr< ns3::NetDevice  > (device_ptr));
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = reinterpret_cast< PyNs3WifiPhy* >(reinterpret_cast< PyNs3WifiPhy__PythonHelper* >(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->inst_dict = NULL;
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_Set(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_SetErrorRateModel(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"name", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &name, &name_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetErrorRateModel(std::string(name, name_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_SetPcapDataLinkType(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyHelper::SupportedPcapDataLinkTypes dlt;
    const char *keywords[] = {"dlt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dlt)) {
        return NULL;
    }
    self->obj->SetPcapDataLinkType(dlt);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_GetPcapDataLinkType(PyNs3WifiPhyHelper *self)
{
    PyObject *py_retval;
    ns3::PcapHelper::DataLinkType retval;
    
    retval = self->obj->GetPcapDataLinkType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAsciiAll__0(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *keywords[] = {"prefix", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &prefix, &prefix_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAsciiAll(std::string(prefix, prefix_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAsciiAll__1(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAsciiAll(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiPhyHelper_EnableAsciiAll(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhyHelper_EnableAsciiAll__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAsciiAll__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcap__0(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "nd", "promiscuous", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|OO", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDevice_Type, &nd, &py_promiscuous, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nd_ptr = (nd ? nd->obj : NULL);
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), ns3::Ptr< ns3::NetDevice  > (nd_ptr), promiscuous, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcap__1(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *ndName;
    Py_ssize_t ndName_len;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "ndName", "promiscuous", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#|OO", (char **) keywords, &prefix, &prefix_len, &ndName, &ndName_len, &py_promiscuous, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), std::string(ndName, ndName_len), promiscuous, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcap__2(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDeviceContainer *d;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "d", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDeviceContainer_Type, &d, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), *((PyNs3NetDeviceContainer *) d)->obj, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcap__3(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NodeContainer *n;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "n", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NodeContainer_Type, &n, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), *((PyNs3NodeContainer *) n)->obj, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcap__4(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    unsigned int nodeid;
    unsigned int deviceid;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "nodeid", "deviceid", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#II|O", (char **) keywords, &prefix, &prefix_len, &nodeid, &deviceid, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), nodeid, deviceid, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiPhyHelper_EnablePcap(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3WifiPhyHelper_EnablePcap__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnablePcap__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnablePcap__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnablePcap__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnablePcap__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__0(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "nd", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDevice_Type, &nd, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nd_ptr = (nd ? nd->obj : NULL);
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnableAscii(std::string(prefix, prefix_len), ns3::Ptr< ns3::NetDevice  > (nd_ptr), explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__1(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    const char *keywords[] = {"stream", "nd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NetDevice_Type, &nd)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    nd_ptr = (nd ? nd->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), ns3::Ptr< ns3::NetDevice  > (nd_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__2(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *ndName;
    Py_ssize_t ndName_len;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "ndName", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#|O", (char **) keywords, &prefix, &prefix_len, &ndName, &ndName_len, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnableAscii(std::string(prefix, prefix_len), std::string(ndName, ndName_len), explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__3(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    const char *ndName;
    Py_ssize_t ndName_len;
    const char *keywords[] = {"stream", "ndName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &ndName, &ndName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), std::string(ndName, ndName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__4(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"prefix", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAscii(std::string(prefix, prefix_len), *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__5(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"stream", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__6(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"prefix", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAscii(std::string(prefix, prefix_len), *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__7(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"stream", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__8(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    unsigned int nodeid;
    unsigned int deviceid;
    bool explicitFilename;
    PyObject *py_explicitFilename;
    const char *keywords[] = {"prefix", "nodeid", "deviceid", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#IIO", (char **) keywords, &prefix, &prefix_len, &nodeid, &deviceid, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    explicitFilename = (bool) PyObject_IsTrue(py_explicitFilename);
    self->obj->EnableAscii(std::string(prefix, prefix_len), nodeid, deviceid, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnableAscii__9(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    unsigned int nodeid;
    unsigned int deviceid;
    const char *keywords[] = {"stream", "nodeid", "deviceid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!II", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &nodeid, &deviceid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), nodeid, deviceid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiPhyHelper_EnableAscii(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[10] = {0,};
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyHelper_EnableAscii__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    error_list = PyList_New(10);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

PyObject *
_wrap_PyNs3WifiPhyHelper_EnablePcapAll(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O", (char **) keywords, &prefix, &prefix_len, &py_promiscuous)) {
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcapAll(std::string(prefix, prefix_len), promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiPhyHelper_methods[] = {
    {(char *) "Create", (PyCFunction) _wrap_PyNs3WifiPhyHelper_Create, METH_KEYWORDS|METH_VARARGS, "Create(node, device)\n\ntype: node: ns3::Ptr< ns3::Node >\ntype: device: ns3::Ptr< ns3::NetDevice >" },
    {(char *) "Set", (PyCFunction) _wrap_PyNs3WifiPhyHelper_Set, METH_KEYWORDS|METH_VARARGS, "Set(name, v)\n\ntype: name: std::string\ntype: v: ns3::AttributeValue const &" },
    {(char *) "SetErrorRateModel", (PyCFunction) _wrap_PyNs3WifiPhyHelper_SetErrorRateModel, METH_KEYWORDS|METH_VARARGS, "SetErrorRateModel(name, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: name: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "SetPcapDataLinkType", (PyCFunction) _wrap_PyNs3WifiPhyHelper_SetPcapDataLinkType, METH_KEYWORDS|METH_VARARGS, "SetPcapDataLinkType(dlt)\n\ntype: dlt: ns3::WifiPhyHelper::SupportedPcapDataLinkTypes" },
    {(char *) "GetPcapDataLinkType", (PyCFunction) _wrap_PyNs3WifiPhyHelper_GetPcapDataLinkType, METH_NOARGS, "GetPcapDataLinkType()\n\n" },
    {(char *) "PcapSniffRxEvent", (PyCFunction) PyNs3WifiPhyHelper__PythonHelper::_wrap_PcapSniffRxEvent, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "PcapSniffTxEvent", (PyCFunction) PyNs3WifiPhyHelper__PythonHelper::_wrap_PcapSniffTxEvent, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnableAsciiAll", (PyCFunction) _wrap_PyNs3WifiPhyHelper_EnableAsciiAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnablePcap", (PyCFunction) _wrap_PyNs3WifiPhyHelper_EnablePcap, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnableAscii", (PyCFunction) _wrap_PyNs3WifiPhyHelper_EnableAscii, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnablePcapAll", (PyCFunction) _wrap_PyNs3WifiPhyHelper_EnablePcapAll, METH_KEYWORDS|METH_VARARGS, "EnablePcapAll(prefix, promiscuous)\n\ntype: prefix: std::string\ntype: promiscuous: bool" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhyHelper__tp_clear(PyNs3WifiPhyHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiPhyHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiPhyHelper__tp_traverse(PyNs3WifiPhyHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiPhyHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiPhyHelper__tp_dealloc(PyNs3WifiPhyHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3PcapHelperForDevice_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3PcapHelperForDevice_wrapper_registry.end()) {
        PyNs3PcapHelperForDevice_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhyHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhyHelper__tp_richcompare (PyNs3WifiPhyHelper *PYBINDGEN_UNUSED(self), PyNs3WifiPhyHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhyHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhyHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiPhyHelper",            /* tp_name */
    sizeof(PyNs3WifiPhyHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhyHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiPhyHelper(arg0)\nWifiPhyHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WifiPhyHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhyHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhyHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhyHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhyHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhyHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiPhyListener_wrapper_registry;

void
PyNs3WifiPhyListener__PythonHelper::NotifyMaybeCcaBusyStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyMaybeCcaBusyStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyMaybeCcaBusyStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyOff()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOff", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyOn()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOn"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxEndError()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndError"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndError", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxEndOk()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndOk", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifySleep()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySleep"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySleep", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifySwitchingStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySwitchingStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySwitchingStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyTxStart(ns3::Time duration, double txPowerDbm)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyTxStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyTxStart", (char *) "Nd", py_Time, txPowerDbm);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyWakeup()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyWakeup"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyWakeup", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiPhyListener__tp_init__0(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhyListener_Type)
    {
        self->obj = new PyNs3WifiPhyListener__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiPhyListener__tp_init__1(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhyListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhyListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhyListener_Type)
    {
        self->obj = new PyNs3WifiPhyListener__PythonHelper(*((PyNs3WifiPhyListener *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiPhyListener__tp_init(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhyListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyWakeup(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyWakeup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxEndOk(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndOk();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyOn(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyOn();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyMaybeCcaBusyStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyMaybeCcaBusyStart(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxEndError(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndError();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifySleep(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifySleep();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyTxStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    double txPowerDbm;
    const char *keywords[] = {"duration", "txPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Time_Type, &duration, &txPowerDbm)) {
        return NULL;
    }
    self->obj->NotifyTxStart(*((PyNs3Time *) duration)->obj, txPowerDbm);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyOff(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyOff();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifySwitchingStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifySwitchingStart(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyRxStart(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiPhyListener_methods[] = {
    {(char *) "NotifyWakeup", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyWakeup, METH_NOARGS, "NotifyWakeup()\n\n" },
    {(char *) "NotifyRxEndOk", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxEndOk, METH_NOARGS, "NotifyRxEndOk()\n\n" },
    {(char *) "NotifyOn", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyOn, METH_NOARGS, "NotifyOn()\n\n" },
    {(char *) "NotifyMaybeCcaBusyStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyMaybeCcaBusyStart, METH_KEYWORDS|METH_VARARGS, "NotifyMaybeCcaBusyStart(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyRxEndError", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxEndError, METH_NOARGS, "NotifyRxEndError()\n\n" },
    {(char *) "NotifySleep", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifySleep, METH_NOARGS, "NotifySleep()\n\n" },
    {(char *) "NotifyTxStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyTxStart, METH_KEYWORDS|METH_VARARGS, "NotifyTxStart(duration, txPowerDbm)\n\ntype: duration: ns3::Time\ntype: txPowerDbm: double" },
    {(char *) "NotifyOff", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyOff, METH_NOARGS, "NotifyOff()\n\n" },
    {(char *) "NotifySwitchingStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifySwitchingStart, METH_KEYWORDS|METH_VARARGS, "NotifySwitchingStart(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxStart, METH_KEYWORDS|METH_VARARGS, "NotifyRxStart(duration)\n\ntype: duration: ns3::Time" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhyListener__tp_clear(PyNs3WifiPhyListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiPhyListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiPhyListener__tp_traverse(PyNs3WifiPhyListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiPhyListener__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiPhyListener__tp_dealloc(PyNs3WifiPhyListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiPhyListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiPhyListener_wrapper_registry.end()) {
        PyNs3WifiPhyListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhyListener__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhyListener__tp_richcompare (PyNs3WifiPhyListener *PYBINDGEN_UNUSED(self), PyNs3WifiPhyListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhyListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhyListener_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiPhyListener",            /* tp_name */
    sizeof(PyNs3WifiPhyListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhyListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiPhyListener(arg0)\nWifiPhyListener()",                        /* Documentation string */
    (traverseproc)PyNs3WifiPhyListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhyListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhyListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhyListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhyListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhyListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiPhyTag__tp_init__0(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhyTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhyTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiPhyTag(*((PyNs3WifiPhyTag *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiPhyTag__tp_init__1(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiPhyTag();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiPhyTag__tp_init__2(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiTxVector *txVector;
    ns3::MpduType mpdutype;
    int frameComplete;
    const char *keywords[] = {"txVector", "mpdutype", "frameComplete", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector, &mpdutype, &frameComplete)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (frameComplete > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiPhyTag(*((PyNs3WifiTxVector *) txVector)->obj, mpdutype, frameComplete);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiPhyTag__tp_init(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiPhyTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyTag__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetWifiTxVector(PyNs3WifiPhyTag *self)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    ns3::WifiTxVector retval = self->obj->GetWifiTxVector();
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_Deserialize(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Deserialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiPhyTag::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_Serialize(PyNs3WifiPhyTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetFrameComplete(PyNs3WifiPhyTag *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameComplete();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetInstanceTypeId(PyNs3WifiPhyTag *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetSerializedSize(PyNs3WifiPhyTag *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyTag_GetMpduType(PyNs3WifiPhyTag *self)
{
    PyObject *py_retval;
    ns3::MpduType retval;
    
    retval = self->obj->GetMpduType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiPhyTag__copy__(PyNs3WifiPhyTag *self)
{

    PyNs3WifiPhyTag *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiPhyTag, &PyNs3WifiPhyTag_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiPhyTag(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiPhyTag_methods[] = {
    {(char *) "GetWifiTxVector", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetWifiTxVector, METH_NOARGS, "GetWifiTxVector()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiPhyTag_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiPhyTag_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "GetFrameComplete", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetFrameComplete, METH_NOARGS, "GetFrameComplete()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetMpduType", (PyCFunction) _wrap_PyNs3WifiPhyTag_GetMpduType, METH_NOARGS, "GetMpduType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiPhyTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhyTag__tp_clear(PyNs3WifiPhyTag *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiPhyTag *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiPhyTag__tp_traverse(PyNs3WifiPhyTag *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiPhyTag__tp_dealloc(PyNs3WifiPhyTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhyTag__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhyTag__tp_richcompare (PyNs3WifiPhyTag *PYBINDGEN_UNUSED(self), PyNs3WifiPhyTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhyTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhyTag_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiPhyTag",            /* tp_name */
    sizeof(PyNs3WifiPhyTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhyTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiPhyTag(txVector, mpdutype, frameComplete)\nWifiPhyTag(arg0)\nWifiPhyTag()",                        /* Documentation string */
    (traverseproc)PyNs3WifiPhyTag__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhyTag__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhyTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhyTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhyTag, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhyTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





ns3::Ptr< ns3::DeviceEnergyModel >
PyNs3WifiRadioEnergyModelHelper__PythonHelper::DoInstall(ns3::Ptr< ns3::NetDevice > device, ns3::Ptr< ns3::EnergySource > source) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::DeviceEnergyModel > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3DeviceEnergyModel *tmp_DeviceEnergyModel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInstall"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModelHelper* >((const ns3::WifiRadioEnergyModelHelper*) this);
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    if (typeid(*(const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))).name() == typeid(PyNs3EnergySource__PythonHelper).name())
    {
        py_EnergySource = (PyNs3EnergySource*) (((PyNs3EnergySource__PythonHelper*) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter2->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type2);
            py_EnergySource->inst_dict = NULL;
    
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInstall", (char *) "NN", py_NetDevice, py_EnergySource);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DeviceEnergyModel_Type, &tmp_DeviceEnergyModel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::DeviceEnergyModel  > (tmp_DeviceEnergyModel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__0(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRadioEnergyModelHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRadioEnergyModelHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModelHelper_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelHelper__PythonHelper(*((PyNs3WifiRadioEnergyModelHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModelHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelHelper(*((PyNs3WifiRadioEnergyModelHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__1(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModelHelper_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModelHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_SetRechargedCallback(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetRechargedCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_Set(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    PyNs3WifiRadioEnergyModelHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj)) : (self->obj->ns3::WifiRadioEnergyModelHelper::Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_SetTxCurrentModel(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"name", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &name, &name_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetTxCurrentModel(std::string(name, name_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_SetDepletionCallback(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetDepletionCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRadioEnergyModelHelper__copy__(PyNs3WifiRadioEnergyModelHelper *self)
{

    PyNs3WifiRadioEnergyModelHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiRadioEnergyModelHelper, &PyNs3WifiRadioEnergyModelHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiRadioEnergyModelHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DeviceEnergyModelHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRadioEnergyModelHelper_methods[] = {
    {(char *) "SetRechargedCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_SetRechargedCallback, METH_KEYWORDS|METH_VARARGS, "SetRechargedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "Set", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_Set, METH_KEYWORDS|METH_VARARGS, "Set(name, v)\n\ntype: name: std::string\ntype: v: ns3::AttributeValue const &" },
    {(char *) "SetTxCurrentModel", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_SetTxCurrentModel, METH_KEYWORDS|METH_VARARGS, "SetTxCurrentModel(name, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: name: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "SetDepletionCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_SetDepletionCallback, METH_KEYWORDS|METH_VARARGS, "SetDepletionCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRadioEnergyModelHelper__tp_clear(PyNs3WifiRadioEnergyModelHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiRadioEnergyModelHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiRadioEnergyModelHelper__tp_traverse(PyNs3WifiRadioEnergyModelHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiRadioEnergyModelHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_dealloc(PyNs3WifiRadioEnergyModelHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DeviceEnergyModelHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DeviceEnergyModelHelper_wrapper_registry.end()) {
        PyNs3DeviceEnergyModelHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRadioEnergyModelHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_richcompare (PyNs3WifiRadioEnergyModelHelper *PYBINDGEN_UNUSED(self), PyNs3WifiRadioEnergyModelHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRadioEnergyModelHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRadioEnergyModelHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRadioEnergyModelHelper",            /* tp_name */
    sizeof(PyNs3WifiRadioEnergyModelHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiRadioEnergyModelHelper(arg0)\nWifiRadioEnergyModelHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WifiRadioEnergyModelHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRadioEnergyModelHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRadioEnergyModelHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRadioEnergyModelHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyMaybeCcaBusyStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyMaybeCcaBusyStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyMaybeCcaBusyStart(duration);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyMaybeCcaBusyStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyOff()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyOff();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOff", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyOn()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOn"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyOn();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyRxEndError()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndError"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyRxEndError();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndError", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyRxEndOk()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyRxEndOk();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndOk", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyRxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyRxStart(duration);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifySleep()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySleep"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifySleep();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySleep", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifySwitchingStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySwitchingStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifySwitchingStart(duration);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySwitchingStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyTxStart(ns3::Time duration, double txPowerDbm)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyTxStart"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyTxStart(duration, txPowerDbm);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyTxStart", (char *) "Nd", py_Time, txPowerDbm);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModelPhyListener__PythonHelper::NotifyWakeup()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyWakeup"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModelPhyListener::NotifyWakeup();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = (ns3::WifiRadioEnergyModelPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyWakeup", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init__0(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRadioEnergyModelPhyListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRadioEnergyModelPhyListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModelPhyListener_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelPhyListener__PythonHelper(*((PyNs3WifiRadioEnergyModelPhyListener *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelPhyListener(*((PyNs3WifiRadioEnergyModelPhyListener *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init__1(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModelPhyListener_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelPhyListener__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelPhyListener();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyWakeup(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyWakeup()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyWakeup());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxEndOk(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyRxEndOk()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyRxEndOk());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyOn(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyOn()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyOn());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyMaybeCcaBusyStart(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->NotifyMaybeCcaBusyStart(*((PyNs3Time *) duration)->obj)) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyMaybeCcaBusyStart(*((PyNs3Time *) duration)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxEndError(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyRxEndError()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyRxEndError());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifySleep(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifySleep()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifySleep());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyTxStart(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    double txPowerDbm;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", "txPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Time_Type, &duration, &txPowerDbm)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->NotifyTxStart(*((PyNs3Time *) duration)->obj, txPowerDbm)) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyTxStart(*((PyNs3Time *) duration)->obj, txPowerDbm));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyOff(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyOff()) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyOff());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_SetUpdateTxCurrentCallback(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl25> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl25> (callback);
    self->obj->SetUpdateTxCurrentCallback(ns3::Callback<void, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifySwitchingStart(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->NotifySwitchingStart(*((PyNs3Time *) duration)->obj)) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifySwitchingStart(*((PyNs3Time *) duration)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_SetChangeStateCallback(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl32> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl32> (callback);
    self->obj->SetChangeStateCallback(ns3::Callback<void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxStart(PyNs3WifiRadioEnergyModelPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelPhyListener__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->NotifyRxStart(*((PyNs3Time *) duration)->obj)) : (self->obj->ns3::WifiRadioEnergyModelPhyListener::NotifyRxStart(*((PyNs3Time *) duration)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRadioEnergyModelPhyListener__copy__(PyNs3WifiRadioEnergyModelPhyListener *self)
{

    PyNs3WifiRadioEnergyModelPhyListener *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiRadioEnergyModelPhyListener, &PyNs3WifiRadioEnergyModelPhyListener_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiRadioEnergyModelPhyListener(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiPhyListener_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRadioEnergyModelPhyListener_methods[] = {
    {(char *) "NotifyWakeup", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyWakeup, METH_NOARGS, "NotifyWakeup()\n\n" },
    {(char *) "NotifyRxEndOk", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxEndOk, METH_NOARGS, "NotifyRxEndOk()\n\n" },
    {(char *) "NotifyOn", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyOn, METH_NOARGS, "NotifyOn()\n\n" },
    {(char *) "NotifyMaybeCcaBusyStart", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyMaybeCcaBusyStart, METH_KEYWORDS|METH_VARARGS, "NotifyMaybeCcaBusyStart(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyRxEndError", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxEndError, METH_NOARGS, "NotifyRxEndError()\n\n" },
    {(char *) "NotifySleep", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifySleep, METH_NOARGS, "NotifySleep()\n\n" },
    {(char *) "NotifyTxStart", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyTxStart, METH_KEYWORDS|METH_VARARGS, "NotifyTxStart(duration, txPowerDbm)\n\ntype: duration: ns3::Time\ntype: txPowerDbm: double" },
    {(char *) "NotifyOff", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyOff, METH_NOARGS, "NotifyOff()\n\n" },
    {(char *) "SetUpdateTxCurrentCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_SetUpdateTxCurrentCallback, METH_KEYWORDS|METH_VARARGS, "SetUpdateTxCurrentCallback(callback)\n\ntype: callback: ns3::Callback< void, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "NotifySwitchingStart", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifySwitchingStart, METH_KEYWORDS|METH_VARARGS, "NotifySwitchingStart(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SetChangeStateCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_SetChangeStateCallback, METH_KEYWORDS|METH_VARARGS, "SetChangeStateCallback(callback)\n\ntype: callback: ns3::Callback< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener_NotifyRxStart, METH_KEYWORDS|METH_VARARGS, "NotifyRxStart(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelPhyListener__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRadioEnergyModelPhyListener__tp_clear(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiRadioEnergyModelPhyListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiRadioEnergyModelPhyListener__tp_traverse(PyNs3WifiRadioEnergyModelPhyListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiRadioEnergyModelPhyListener__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_dealloc(PyNs3WifiRadioEnergyModelPhyListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiPhyListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiPhyListener_wrapper_registry.end()) {
        PyNs3WifiPhyListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRadioEnergyModelPhyListener__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_richcompare (PyNs3WifiRadioEnergyModelPhyListener *PYBINDGEN_UNUSED(self), PyNs3WifiRadioEnergyModelPhyListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRadioEnergyModelPhyListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRadioEnergyModelPhyListener_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRadioEnergyModelPhyListener",            /* tp_name */
    sizeof(PyNs3WifiRadioEnergyModelPhyListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiRadioEnergyModelPhyListener(arg0)\nWifiRadioEnergyModelPhyListener()",                        /* Documentation string */
    (traverseproc)PyNs3WifiRadioEnergyModelPhyListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRadioEnergyModelPhyListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRadioEnergyModelPhyListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRadioEnergyModelPhyListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRadioEnergyModelPhyListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStation_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_slrc(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_slrc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_slrc(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_slrc)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_ssrc(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_ssrc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_ssrc(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_ssrc)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_tid(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_tid);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_tid(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_tid = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRemoteStation__getsets[] = {
    {
        (char*) "m_ssrc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_ssrc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_ssrc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_slrc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_slrc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_slrc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_tid", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_tid, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_tid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRemoteStation__tp_init__0(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStation__tp_init__1(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStation(*((PyNs3WifiRemoteStation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiRemoteStation__tp_init(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRemoteStation__copy__(PyNs3WifiRemoteStation *self)
{

    PyNs3WifiRemoteStation *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStation, &PyNs3WifiRemoteStation_Type);
    py_copy->obj = new ns3::WifiRemoteStation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStation_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStation_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStation__tp_dealloc(PyNs3WifiRemoteStation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStation_wrapper_registry.end()) {
        PyNs3WifiRemoteStation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStation__tp_richcompare (PyNs3WifiRemoteStation *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRemoteStation",            /* tp_name */
    sizeof(PyNs3WifiRemoteStation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiRemoteStation(arg0)\nWifiRemoteStation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRemoteStation__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStationInfo_wrapper_registry;


static int
_wrap_PyNs3WifiRemoteStationInfo__tp_init__0(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStationInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationInfo(*((PyNs3WifiRemoteStationInfo *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStationInfo__tp_init__1(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiRemoteStationInfo__tp_init(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStationInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStationInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_NotifyTxFailed(PyNs3WifiRemoteStationInfo *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyTxFailed();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_GetFrameErrorRate(PyNs3WifiRemoteStationInfo *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetFrameErrorRate();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_NotifyTxSuccess(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int retryCounter;
    const char *keywords[] = {"retryCounter", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &retryCounter)) {
        return NULL;
    }
    self->obj->NotifyTxSuccess(retryCounter);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRemoteStationInfo__copy__(PyNs3WifiRemoteStationInfo *self)
{

    PyNs3WifiRemoteStationInfo *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_copy->obj = new ns3::WifiRemoteStationInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStationInfo_methods[] = {
    {(char *) "NotifyTxFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_NotifyTxFailed, METH_NOARGS, "NotifyTxFailed()\n\n" },
    {(char *) "GetFrameErrorRate", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_GetFrameErrorRate, METH_NOARGS, "GetFrameErrorRate()\n\n" },
    {(char *) "NotifyTxSuccess", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_NotifyTxSuccess, METH_KEYWORDS|METH_VARARGS, "NotifyTxSuccess(retryCounter)\n\ntype: retryCounter: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStationInfo__tp_dealloc(PyNs3WifiRemoteStationInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStationInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStationInfo_wrapper_registry.end()) {
        PyNs3WifiRemoteStationInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStationInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationInfo__tp_richcompare (PyNs3WifiRemoteStationInfo *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationInfo_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRemoteStationInfo",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiRemoteStationInfo(arg0)\nWifiRemoteStationInfo()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStationState_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_address(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->m_address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_address(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_address = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_aggregation(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_aggregation));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_aggregation(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_aggregation = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_channelWidth(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_channelWidth);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_channelWidth(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_channelWidth = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_greenfield(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_greenfield));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_greenfield(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_greenfield = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_guardInterval(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_guardInterval);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_guardInterval(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_guardInterval = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_heSupported(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_heSupported));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_heSupported(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_heSupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_htSupported(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_htSupported));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_htSupported(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_htSupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_info(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationInfo *py_WifiRemoteStationInfo;
    
    py_WifiRemoteStationInfo = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_WifiRemoteStationInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiRemoteStationInfo->obj = new ns3::WifiRemoteStationInfo(self->obj->m_info);
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_WifiRemoteStationInfo->obj] = (PyObject *) py_WifiRemoteStationInfo;
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationInfo);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_info(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationInfo *tmp_WifiRemoteStationInfo;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationInfo_Type, &tmp_WifiRemoteStationInfo)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_info = *tmp_WifiRemoteStationInfo->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_ldpc(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_ldpc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_ldpc(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ldpc = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_ness(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_ness);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_ness(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ness = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_operationalMcsSet(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::WifiModeList retval;
    Pyns3__WifiModeList *py_ns3__WifiModeList;
    
    py_ns3__WifiModeList = PyObject_New(Pyns3__WifiModeList, &Pyns3__WifiModeList_Type);
    py_ns3__WifiModeList->obj = new ns3::WifiModeList(self->obj->m_operationalMcsSet);
    py_retval = Py_BuildValue((char *) "N", py_ns3__WifiModeList);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_operationalMcsSet(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::WifiModeList retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__WifiModeList, &self->obj->m_operationalMcsSet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_operationalRateSet(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::WifiModeList retval;
    Pyns3__WifiModeList *py_ns3__WifiModeList;
    
    py_ns3__WifiModeList = PyObject_New(Pyns3__WifiModeList, &Pyns3__WifiModeList_Type);
    py_ns3__WifiModeList->obj = new ns3::WifiModeList(self->obj->m_operationalRateSet);
    py_retval = Py_BuildValue((char *) "N", py_ns3__WifiModeList);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_operationalRateSet(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::WifiModeList retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__WifiModeList, &self->obj->m_operationalRateSet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_qosSupported(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_qosSupported));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_qosSupported(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_qosSupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_shortGuardInterval(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_shortGuardInterval));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_shortGuardInterval(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_shortGuardInterval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_shortPreamble(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_shortPreamble));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_shortPreamble(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_shortPreamble = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_shortSlotTime(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_shortSlotTime));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_shortSlotTime(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_shortSlotTime = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_stbc(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_stbc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_stbc(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_stbc = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_streams(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_streams);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_streams(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_streams = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_vhtSupported(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_vhtSupported));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_vhtSupported(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_vhtSupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRemoteStationState__getsets[] = {
    {
        (char*) "m_streams", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_streams, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_streams, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_shortPreamble", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_shortPreamble, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_shortPreamble, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_shortSlotTime", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_shortSlotTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_shortSlotTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_htSupported", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_htSupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_htSupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_channelWidth", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_channelWidth, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_channelWidth, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_info", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_info, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_info, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_stbc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_stbc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_stbc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_operationalRateSet", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_operationalRateSet, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_operationalRateSet, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_address", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_address, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_address, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_aggregation", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_aggregation, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_aggregation, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_heSupported", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_heSupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_heSupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_qosSupported", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_qosSupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_qosSupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ness", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_ness, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_ness, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_shortGuardInterval", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_shortGuardInterval, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_shortGuardInterval, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_vhtSupported", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_vhtSupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_vhtSupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_greenfield", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_greenfield, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_greenfield, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ldpc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_ldpc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_ldpc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_operationalMcsSet", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_operationalMcsSet, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_operationalMcsSet, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_guardInterval", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_guardInterval, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_guardInterval, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRemoteStationState__tp_init__0(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationState();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStationState__tp_init__1(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStationState *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationState_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationState(*((PyNs3WifiRemoteStationState *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiRemoteStationState__tp_init(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStationState__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStationState__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRemoteStationState__copy__(PyNs3WifiRemoteStationState *self)
{

    PyNs3WifiRemoteStationState *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStationState, &PyNs3WifiRemoteStationState_Type);
    py_copy->obj = new ns3::WifiRemoteStationState(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStationState_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStationState_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStationState__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStationState__tp_dealloc(PyNs3WifiRemoteStationState *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStationState_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStationState_wrapper_registry.end()) {
        PyNs3WifiRemoteStationState_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStationState *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationState__tp_richcompare (PyNs3WifiRemoteStationState *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationState *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationState_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationState_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRemoteStationState",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationState),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationState__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiRemoteStationState(arg0)\nWifiRemoteStationState()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationState__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationState_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRemoteStationState__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationState__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRraaThresholds_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRraaThresholds__get_m_ewnd(PyNs3WifiRraaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_ewnd));
    return py_retval;
}
static int _wrap_PyNs3WifiRraaThresholds__set_m_ewnd(PyNs3WifiRraaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_ewnd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRraaThresholds__get_m_mtl(PyNs3WifiRraaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_mtl);
    return py_retval;
}
static int _wrap_PyNs3WifiRraaThresholds__set_m_mtl(PyNs3WifiRraaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_mtl)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRraaThresholds__get_m_ori(PyNs3WifiRraaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_ori);
    return py_retval;
}
static int _wrap_PyNs3WifiRraaThresholds__set_m_ori(PyNs3WifiRraaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_ori)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRraaThresholds__getsets[] = {
    {
        (char*) "m_ewnd", /* attribute name */
        (getter) _wrap_PyNs3WifiRraaThresholds__get_m_ewnd, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRraaThresholds__set_m_ewnd, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_mtl", /* attribute name */
        (getter) _wrap_PyNs3WifiRraaThresholds__get_m_mtl, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRraaThresholds__set_m_mtl, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ori", /* attribute name */
        (getter) _wrap_PyNs3WifiRraaThresholds__get_m_ori, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRraaThresholds__set_m_ori, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRraaThresholds__tp_init__0(PyNs3WifiRraaThresholds *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRraaThresholds();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiRraaThresholds__tp_init__1(PyNs3WifiRraaThresholds *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRraaThresholds *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRraaThresholds_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRraaThresholds(*((PyNs3WifiRraaThresholds *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiRraaThresholds__tp_init(PyNs3WifiRraaThresholds *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRraaThresholds__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRraaThresholds__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRraaThresholds__copy__(PyNs3WifiRraaThresholds *self)
{

    PyNs3WifiRraaThresholds *py_copy;
    py_copy = PyObject_New(PyNs3WifiRraaThresholds, &PyNs3WifiRraaThresholds_Type);
    py_copy->obj = new ns3::WifiRraaThresholds(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRraaThresholds_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRraaThresholds_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRraaThresholds__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRraaThresholds__tp_dealloc(PyNs3WifiRraaThresholds *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRraaThresholds_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRraaThresholds_wrapper_registry.end()) {
        PyNs3WifiRraaThresholds_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRraaThresholds *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRraaThresholds__tp_richcompare (PyNs3WifiRraaThresholds *PYBINDGEN_UNUSED(self), PyNs3WifiRraaThresholds *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRraaThresholds_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRraaThresholds_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRraaThresholds",            /* tp_name */
    sizeof(PyNs3WifiRraaThresholds),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRraaThresholds__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiRraaThresholds(arg0)\nWifiRraaThresholds()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRraaThresholds__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRraaThresholds_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRraaThresholds__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRraaThresholds__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRrpaaThresholds_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRrpaaThresholds__get_m_ewnd(PyNs3WifiRrpaaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_ewnd));
    return py_retval;
}
static int _wrap_PyNs3WifiRrpaaThresholds__set_m_ewnd(PyNs3WifiRrpaaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_ewnd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRrpaaThresholds__get_m_mtl(PyNs3WifiRrpaaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_mtl);
    return py_retval;
}
static int _wrap_PyNs3WifiRrpaaThresholds__set_m_mtl(PyNs3WifiRrpaaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_mtl)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRrpaaThresholds__get_m_ori(PyNs3WifiRrpaaThresholds *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_ori);
    return py_retval;
}
static int _wrap_PyNs3WifiRrpaaThresholds__set_m_ori(PyNs3WifiRrpaaThresholds *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_ori)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRrpaaThresholds__getsets[] = {
    {
        (char*) "m_ewnd", /* attribute name */
        (getter) _wrap_PyNs3WifiRrpaaThresholds__get_m_ewnd, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRrpaaThresholds__set_m_ewnd, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_mtl", /* attribute name */
        (getter) _wrap_PyNs3WifiRrpaaThresholds__get_m_mtl, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRrpaaThresholds__set_m_mtl, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ori", /* attribute name */
        (getter) _wrap_PyNs3WifiRrpaaThresholds__get_m_ori, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRrpaaThresholds__set_m_ori, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRrpaaThresholds__tp_init__0(PyNs3WifiRrpaaThresholds *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRrpaaThresholds();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiRrpaaThresholds__tp_init__1(PyNs3WifiRrpaaThresholds *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRrpaaThresholds *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRrpaaThresholds_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRrpaaThresholds(*((PyNs3WifiRrpaaThresholds *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiRrpaaThresholds__tp_init(PyNs3WifiRrpaaThresholds *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRrpaaThresholds__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRrpaaThresholds__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRrpaaThresholds__copy__(PyNs3WifiRrpaaThresholds *self)
{

    PyNs3WifiRrpaaThresholds *py_copy;
    py_copy = PyObject_New(PyNs3WifiRrpaaThresholds, &PyNs3WifiRrpaaThresholds_Type);
    py_copy->obj = new ns3::WifiRrpaaThresholds(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRrpaaThresholds_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRrpaaThresholds_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRrpaaThresholds__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRrpaaThresholds__tp_dealloc(PyNs3WifiRrpaaThresholds *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRrpaaThresholds_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRrpaaThresholds_wrapper_registry.end()) {
        PyNs3WifiRrpaaThresholds_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRrpaaThresholds *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRrpaaThresholds__tp_richcompare (PyNs3WifiRrpaaThresholds *PYBINDGEN_UNUSED(self), PyNs3WifiRrpaaThresholds *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRrpaaThresholds_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRrpaaThresholds_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRrpaaThresholds",            /* tp_name */
    sizeof(PyNs3WifiRrpaaThresholds),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRrpaaThresholds__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiRrpaaThresholds(arg0)\nWifiRrpaaThresholds()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRrpaaThresholds__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRrpaaThresholds_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRrpaaThresholds__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRrpaaThresholds__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiTxVector_wrapper_registry;


static int
_wrap_PyNs3WifiTxVector__tp_init__0(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiTxVector *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiTxVector(*((PyNs3WifiTxVector *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiTxVector__tp_init__1(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiTxVector();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiTxVector__tp_init__2(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMode *mode;
    int powerLevel;
    ns3::WifiPreamble preamble;
    int guardInterval;
    int nTx;
    int nss;
    int ness;
    int channelWidth;
    bool aggregation;
    PyObject *py_aggregation;
    bool stbc;
    PyObject *py_stbc;
    const char *keywords[] = {"mode", "powerLevel", "preamble", "guardInterval", "nTx", "nss", "ness", "channelWidth", "aggregation", "stbc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiiiiiiOO", (char **) keywords, &PyNs3WifiMode_Type, &mode, &powerLevel, &preamble, &guardInterval, &nTx, &nss, &ness, &channelWidth, &py_aggregation, &py_stbc)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (powerLevel > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (guardInterval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (nTx > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (ness > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    aggregation = (bool) PyObject_IsTrue(py_aggregation);
    stbc = (bool) PyObject_IsTrue(py_stbc);
    self->obj = new ns3::WifiTxVector(*((PyNs3WifiMode *) mode)->obj, powerLevel, preamble, guardInterval, nTx, nss, ness, channelWidth, aggregation, stbc);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiTxVector__tp_init(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiTxVector__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiTxVector__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiTxVector__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetChannelWidth(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelWidth;
    const char *keywords[] = {"channelWidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelWidth)) {
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelWidth(channelWidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetTxPowerLevel(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int powerlevel;
    const char *keywords[] = {"powerlevel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &powerlevel)) {
        return NULL;
    }
    if (powerlevel > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxPowerLevel(powerlevel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetMode(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_IsAggregation(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAggregation();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetGuardInterval(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetGuardInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetNTx(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNTx();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_IsValid(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsValid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetNss(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNss();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetStbc(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool stbc;
    PyObject *py_stbc;
    const char *keywords[] = {"stbc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_stbc)) {
        return NULL;
    }
    stbc = (bool) PyObject_IsTrue(py_stbc);
    self->obj->SetStbc(stbc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetNess(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ness;
    const char *keywords[] = {"ness", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ness)) {
        return NULL;
    }
    if (ness > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNess(ness);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetTxPowerLevel(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxPowerLevel();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetAggregation(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool aggregation;
    PyObject *py_aggregation;
    const char *keywords[] = {"aggregation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_aggregation)) {
        return NULL;
    }
    aggregation = (bool) PyObject_IsTrue(py_aggregation);
    self->obj->SetAggregation(aggregation);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_IsStbc(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStbc();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetPreambleType(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamble)) {
        return NULL;
    }
    self->obj->SetPreambleType(preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetGuardInterval(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int guardInterval;
    const char *keywords[] = {"guardInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &guardInterval)) {
        return NULL;
    }
    if (guardInterval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetGuardInterval(guardInterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetMode(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    self->obj->SetMode(*((PyNs3WifiMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetNTx(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nTx;
    const char *keywords[] = {"nTx", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nTx)) {
        return NULL;
    }
    if (nTx > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNTx(nTx);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetChannelWidth(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetChannelWidth();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetNess(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNess();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_SetNss(PyNs3WifiTxVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nss;
    const char *keywords[] = {"nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nss)) {
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNss(nss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxVector_GetPreambleType(PyNs3WifiTxVector *self)
{
    PyObject *py_retval;
    ns3::WifiPreamble retval;
    
    retval = self->obj->GetPreambleType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiTxVector__copy__(PyNs3WifiTxVector *self)
{

    PyNs3WifiTxVector *py_copy;
    py_copy = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_copy->obj = new ns3::WifiTxVector(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiTxVector_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiTxVector_methods[] = {
    {(char *) "SetChannelWidth", (PyCFunction) _wrap_PyNs3WifiTxVector_SetChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetChannelWidth(channelWidth)\n\ntype: channelWidth: uint16_t" },
    {(char *) "SetTxPowerLevel", (PyCFunction) _wrap_PyNs3WifiTxVector_SetTxPowerLevel, METH_KEYWORDS|METH_VARARGS, "SetTxPowerLevel(powerlevel)\n\ntype: powerlevel: uint8_t" },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3WifiTxVector_GetMode, METH_NOARGS, "GetMode()\n\n" },
    {(char *) "IsAggregation", (PyCFunction) _wrap_PyNs3WifiTxVector_IsAggregation, METH_NOARGS, "IsAggregation()\n\n" },
    {(char *) "GetGuardInterval", (PyCFunction) _wrap_PyNs3WifiTxVector_GetGuardInterval, METH_NOARGS, "GetGuardInterval()\n\n" },
    {(char *) "GetNTx", (PyCFunction) _wrap_PyNs3WifiTxVector_GetNTx, METH_NOARGS, "GetNTx()\n\n" },
    {(char *) "IsValid", (PyCFunction) _wrap_PyNs3WifiTxVector_IsValid, METH_NOARGS, "IsValid()\n\n" },
    {(char *) "GetNss", (PyCFunction) _wrap_PyNs3WifiTxVector_GetNss, METH_NOARGS, "GetNss()\n\n" },
    {(char *) "SetStbc", (PyCFunction) _wrap_PyNs3WifiTxVector_SetStbc, METH_KEYWORDS|METH_VARARGS, "SetStbc(stbc)\n\ntype: stbc: bool" },
    {(char *) "SetNess", (PyCFunction) _wrap_PyNs3WifiTxVector_SetNess, METH_KEYWORDS|METH_VARARGS, "SetNess(ness)\n\ntype: ness: uint8_t" },
    {(char *) "GetTxPowerLevel", (PyCFunction) _wrap_PyNs3WifiTxVector_GetTxPowerLevel, METH_NOARGS, "GetTxPowerLevel()\n\n" },
    {(char *) "SetAggregation", (PyCFunction) _wrap_PyNs3WifiTxVector_SetAggregation, METH_KEYWORDS|METH_VARARGS, "SetAggregation(aggregation)\n\ntype: aggregation: bool" },
    {(char *) "IsStbc", (PyCFunction) _wrap_PyNs3WifiTxVector_IsStbc, METH_NOARGS, "IsStbc()\n\n" },
    {(char *) "SetPreambleType", (PyCFunction) _wrap_PyNs3WifiTxVector_SetPreambleType, METH_KEYWORDS|METH_VARARGS, "SetPreambleType(preamble)\n\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "SetGuardInterval", (PyCFunction) _wrap_PyNs3WifiTxVector_SetGuardInterval, METH_KEYWORDS|METH_VARARGS, "SetGuardInterval(guardInterval)\n\ntype: guardInterval: uint16_t" },
    {(char *) "SetMode", (PyCFunction) _wrap_PyNs3WifiTxVector_SetMode, METH_KEYWORDS|METH_VARARGS, "SetMode(mode)\n\ntype: mode: ns3::WifiMode" },
    {(char *) "SetNTx", (PyCFunction) _wrap_PyNs3WifiTxVector_SetNTx, METH_KEYWORDS|METH_VARARGS, "SetNTx(nTx)\n\ntype: nTx: uint8_t" },
    {(char *) "GetChannelWidth", (PyCFunction) _wrap_PyNs3WifiTxVector_GetChannelWidth, METH_NOARGS, "GetChannelWidth()\n\n" },
    {(char *) "GetNess", (PyCFunction) _wrap_PyNs3WifiTxVector_GetNess, METH_NOARGS, "GetNess()\n\n" },
    {(char *) "SetNss", (PyCFunction) _wrap_PyNs3WifiTxVector_SetNss, METH_KEYWORDS|METH_VARARGS, "SetNss(nss)\n\ntype: nss: uint8_t" },
    {(char *) "GetPreambleType", (PyCFunction) _wrap_PyNs3WifiTxVector_GetPreambleType, METH_NOARGS, "GetPreambleType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiTxVector__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiTxVector__tp_dealloc(PyNs3WifiTxVector *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiTxVector_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiTxVector_wrapper_registry.end()) {
        PyNs3WifiTxVector_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiTxVector *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3WifiTxVector__tp_str(PyNs3WifiTxVector *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3WifiTxVector__tp_richcompare (PyNs3WifiTxVector *PYBINDGEN_UNUSED(self), PyNs3WifiTxVector *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiTxVector_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiTxVector_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiTxVector",            /* tp_name */
    sizeof(PyNs3WifiTxVector),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiTxVector__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3WifiTxVector__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiTxVector(mode, powerLevel, preamble, guardInterval, nTx, nss, ness, channelWidth, aggregation, stbc)\nWifiTxVector(arg0)\nWifiTxVector()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiTxVector__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiTxVector_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiTxVector__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3YansWifiChannelHelper_wrapper_registry;


static int
_wrap_PyNs3YansWifiChannelHelper__tp_init__0(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansWifiChannelHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiChannelHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::YansWifiChannelHelper(*((PyNs3YansWifiChannelHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3YansWifiChannelHelper__tp_init__1(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::YansWifiChannelHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3YansWifiChannelHelper__tp_init(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiChannelHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiChannelHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansWifiChannelHelper_Default(void)
{
    PyObject *py_retval;
    PyNs3YansWifiChannelHelper *py_YansWifiChannelHelper;
    
    ns3::YansWifiChannelHelper retval = ns3::YansWifiChannelHelper::Default();
    py_YansWifiChannelHelper = PyObject_New(PyNs3YansWifiChannelHelper, &PyNs3YansWifiChannelHelper_Type);
    py_YansWifiChannelHelper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_YansWifiChannelHelper->obj = new ns3::YansWifiChannelHelper(retval);
    PyNs3YansWifiChannelHelper_wrapper_registry[(void *) py_YansWifiChannelHelper->obj] = (PyObject *) py_YansWifiChannelHelper;
    py_retval = Py_BuildValue((char *) "N", py_YansWifiChannelHelper);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannelHelper_SetPropagationDelay(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"name", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &name, &name_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetPropagationDelay(std::string(name, name_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannelHelper_AddPropagationLoss(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"name", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &name, &name_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->AddPropagationLoss(std::string(name, name_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannelHelper_Create(PyNs3YansWifiChannelHelper *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::YansWifiChannel > retval;
    PyNs3YansWifiChannel *py_YansWifiChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Create();
    if (!(const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3YansWifiChannel__PythonHelper).name())
    {
        py_YansWifiChannel = reinterpret_cast< PyNs3YansWifiChannel* >(reinterpret_cast< PyNs3YansWifiChannel__PythonHelper* >(const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_YansWifiChannel->obj = const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_YansWifiChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_YansWifiChannel = NULL;
        } else {
            py_YansWifiChannel = (PyNs3YansWifiChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_YansWifiChannel);
        }
    
        if (py_YansWifiChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval)))), &PyNs3YansWifiChannel_Type);
            py_YansWifiChannel = PyObject_GC_New(PyNs3YansWifiChannel, wrapper_type);
            py_YansWifiChannel->inst_dict = NULL;
    
            py_YansWifiChannel->inst_dict = NULL;
            py_YansWifiChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval))->Ref();
            py_YansWifiChannel->obj = const_cast<ns3::YansWifiChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_YansWifiChannel->obj] = (PyObject *) py_YansWifiChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_YansWifiChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannelHelper_AssignStreams(PyNs3YansWifiChannelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    PyNs3YansWifiChannel *c;
    ns3::YansWifiChannel *c_ptr;
    int64_t stream;
    const char *keywords[] = {"c", "stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!L", (char **) keywords, &PyNs3YansWifiChannel_Type, &c, &stream)) {
        return NULL;
    }
    c_ptr = (c ? c->obj : NULL);
    retval = self->obj->AssignStreams(ns3::Ptr< ns3::YansWifiChannel  > (c_ptr), stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansWifiChannelHelper__copy__(PyNs3YansWifiChannelHelper *self)
{

    PyNs3YansWifiChannelHelper *py_copy;
    py_copy = PyObject_New(PyNs3YansWifiChannelHelper, &PyNs3YansWifiChannelHelper_Type);
    py_copy->obj = new ns3::YansWifiChannelHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3YansWifiChannelHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansWifiChannelHelper_methods[] = {
    {(char *) "Default", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper_Default, METH_NOARGS|METH_STATIC, "Default()\n\n" },
    {(char *) "SetPropagationDelay", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper_SetPropagationDelay, METH_KEYWORDS|METH_VARARGS, "SetPropagationDelay(name, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: name: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "AddPropagationLoss", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper_AddPropagationLoss, METH_KEYWORDS|METH_VARARGS, "AddPropagationLoss(name, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: name: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "Create", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper_Create, METH_NOARGS, "Create()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(c, stream)\n\ntype: c: ns3::Ptr< ns3::YansWifiChannel >\ntype: stream: int64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansWifiChannelHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3YansWifiChannelHelper__tp_dealloc(PyNs3YansWifiChannelHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3YansWifiChannelHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3YansWifiChannelHelper_wrapper_registry.end()) {
        PyNs3YansWifiChannelHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::YansWifiChannelHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiChannelHelper__tp_richcompare (PyNs3YansWifiChannelHelper *PYBINDGEN_UNUSED(self), PyNs3YansWifiChannelHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiChannelHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiChannelHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.YansWifiChannelHelper",            /* tp_name */
    sizeof(PyNs3YansWifiChannelHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiChannelHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "YansWifiChannelHelper(arg0)\nYansWifiChannelHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiChannelHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiChannelHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiChannelHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::Ptr< ns3::WifiPhy >
PyNs3YansWifiPhyHelper__PythonHelper::Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Create"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiPhyHelper* >(m_pyself)->obj = const_cast< ns3::YansWifiPhyHelper* >((const ns3::YansWifiPhyHelper*) this);
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Create", (char *) "NN", py_Node, py_NetDevice);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiPhyHelper__PythonHelper::EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *py_OutputStreamWrapper;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnableAsciiInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_OutputStreamWrapper = NULL;
    } else {
        py_OutputStreamWrapper = (PyNs3OutputStreamWrapper *) wrapper_lookup_iter->second;
        Py_INCREF(py_OutputStreamWrapper);
    }
    
    if (py_OutputStreamWrapper == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))), &PyNs3OutputStreamWrapper_Type);
        py_OutputStreamWrapper = PyObject_New(PyNs3OutputStreamWrapper, wrapper_type);
    
        py_OutputStreamWrapper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))->Ref();
        py_OutputStreamWrapper->obj = const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream));
        PyNs3Empty_wrapper_registry[(void *) py_OutputStreamWrapper->obj] = (PyObject *) py_OutputStreamWrapper;
    }
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnableAsciiInternal", (char *) "Ns#NN", py_OutputStreamWrapper, prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhyHelper__PythonHelper::EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnablePcapInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnablePcapInternal", (char *) "s#NNN", prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(promiscuous), PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansWifiPhyHelper__tp_init__0(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansWifiPhyHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiPhyHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiPhyHelper_Type)
    {
        self->obj = new PyNs3YansWifiPhyHelper__PythonHelper(*((PyNs3YansWifiPhyHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiPhyHelper(*((PyNs3YansWifiPhyHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3YansWifiPhyHelper__tp_init__1(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiPhyHelper_Type)
    {
        self->obj = new PyNs3YansWifiPhyHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiPhyHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3YansWifiPhyHelper__tp_init(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiPhyHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiPhyHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansWifiPhyHelper_Default(void)
{
    PyObject *py_retval;
    PyNs3YansWifiPhyHelper *py_YansWifiPhyHelper;
    
    ns3::YansWifiPhyHelper retval = ns3::YansWifiPhyHelper::Default();
    py_YansWifiPhyHelper = PyObject_GC_New(PyNs3YansWifiPhyHelper, &PyNs3YansWifiPhyHelper_Type);
    py_YansWifiPhyHelper->inst_dict = NULL;
    py_YansWifiPhyHelper->inst_dict = NULL;
    py_YansWifiPhyHelper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_YansWifiPhyHelper->obj = new ns3::YansWifiPhyHelper(retval);
    PyNs3PcapHelperForDevice_wrapper_registry[(void *) py_YansWifiPhyHelper->obj] = (PyObject *) py_YansWifiPhyHelper;
    py_retval = Py_BuildValue((char *) "N", py_YansWifiPhyHelper);
    return py_retval;
}



PyObject *
_wrap_PyNs3YansWifiPhyHelper_SetChannel__0(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel *channel;
    ns3::YansWifiChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiChannel_Type, &channel)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::YansWifiChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3YansWifiPhyHelper_SetChannel__1(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *channelName;
    Py_ssize_t channelName_len;
    const char *keywords[] = {"channelName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &channelName, &channelName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->SetChannel(std::string(channelName, channelName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3YansWifiPhyHelper_SetChannel(PyNs3YansWifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiPhyHelper_SetChannel__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiPhyHelper_SetChannel__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3YansWifiPhyHelper__copy__(PyNs3YansWifiPhyHelper *self)
{

    PyNs3YansWifiPhyHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansWifiPhyHelper, &PyNs3YansWifiPhyHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::YansWifiPhyHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3PcapHelperForDevice_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansWifiPhyHelper_methods[] = {
    {(char *) "Default", (PyCFunction) _wrap_PyNs3YansWifiPhyHelper_Default, METH_NOARGS|METH_STATIC, "Default()\n\n" },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3YansWifiPhyHelper_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansWifiPhyHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansWifiPhyHelper__tp_clear(PyNs3YansWifiPhyHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::YansWifiPhyHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3YansWifiPhyHelper__tp_traverse(PyNs3YansWifiPhyHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3YansWifiPhyHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansWifiPhyHelper__tp_dealloc(PyNs3YansWifiPhyHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3PcapHelperForDevice_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3PcapHelperForDevice_wrapper_registry.end()) {
        PyNs3PcapHelperForDevice_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansWifiPhyHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiPhyHelper__tp_richcompare (PyNs3YansWifiPhyHelper *PYBINDGEN_UNUSED(self), PyNs3YansWifiPhyHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiPhyHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiPhyHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.YansWifiPhyHelper",            /* tp_name */
    sizeof(PyNs3YansWifiPhyHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiPhyHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "YansWifiPhyHelper(arg0)\nYansWifiPhyHelper()",                        /* Documentation string */
    (traverseproc)PyNs3YansWifiPhyHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansWifiPhyHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiPhyHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiPhyHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansWifiPhyHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiPhyHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AmpduTag__tp_init__0(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmpduTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmpduTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmpduTag(*((PyNs3AmpduTag *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AmpduTag__tp_init__1(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmpduTag();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AmpduTag__tp_init(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmpduTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmpduTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmpduTag_GetRemainingNbOfMpdus(PyNs3AmpduTag *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRemainingNbOfMpdus();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_Deserialize(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Deserialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_GetRemainingAmpduDuration(PyNs3AmpduTag *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRemainingAmpduDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_Serialize(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_SetRemainingNbOfMpdus(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nbofmpdus;
    const char *keywords[] = {"nbofmpdus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nbofmpdus)) {
        return NULL;
    }
    if (nbofmpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRemainingNbOfMpdus(nbofmpdus);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_GetInstanceTypeId(PyNs3AmpduTag *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_GetSerializedSize(PyNs3AmpduTag *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmpduTag::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduTag_SetRemainingAmpduDuration(PyNs3AmpduTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SetRemainingAmpduDuration(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmpduTag__copy__(PyNs3AmpduTag *self)
{

    PyNs3AmpduTag *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmpduTag, &PyNs3AmpduTag_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::AmpduTag(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmpduTag_methods[] = {
    {(char *) "GetRemainingNbOfMpdus", (PyCFunction) _wrap_PyNs3AmpduTag_GetRemainingNbOfMpdus, METH_NOARGS, "GetRemainingNbOfMpdus()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3AmpduTag_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "GetRemainingAmpduDuration", (PyCFunction) _wrap_PyNs3AmpduTag_GetRemainingAmpduDuration, METH_NOARGS, "GetRemainingAmpduDuration()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3AmpduTag_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "SetRemainingNbOfMpdus", (PyCFunction) _wrap_PyNs3AmpduTag_SetRemainingNbOfMpdus, METH_KEYWORDS|METH_VARARGS, "SetRemainingNbOfMpdus(nbofmpdus)\n\ntype: nbofmpdus: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3AmpduTag_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3AmpduTag_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmpduTag_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetRemainingAmpduDuration", (PyCFunction) _wrap_PyNs3AmpduTag_SetRemainingAmpduDuration, METH_KEYWORDS|METH_VARARGS, "SetRemainingAmpduDuration(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmpduTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmpduTag__tp_clear(PyNs3AmpduTag *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::AmpduTag *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3AmpduTag__tp_traverse(PyNs3AmpduTag *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AmpduTag__tp_dealloc(PyNs3AmpduTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmpduTag__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmpduTag__tp_richcompare (PyNs3AmpduTag *PYBINDGEN_UNUSED(self), PyNs3AmpduTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmpduTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmpduTag_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AmpduTag",            /* tp_name */
    sizeof(PyNs3AmpduTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmpduTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AmpduTag(arg0)\nAmpduTag()",                        /* Documentation string */
    (traverseproc)PyNs3AmpduTag__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmpduTag__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmpduTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmpduTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmpduTag, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmpduTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtAddBaRequestHeader__tp_init__0(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAddBaRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAddBaRequestHeader(*((PyNs3MgtAddBaRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtAddBaRequestHeader__tp_init__1(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAddBaRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtAddBaRequestHeader__tp_init(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAddBaRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAddBaRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTid(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetStartingSequence(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_Deserialize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTimeout(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetStartingSequence(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAddBaRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_Serialize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetImmediateBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetTid(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetBufferSize(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_IsAmsduSupported(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetDelayedBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetInstanceTypeId(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetSerializedSize(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetTimeout(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetBufferSize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &size)) {
        return NULL;
    }
    if (size > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetAmsduSupport(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_IsImmediateBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAddBaRequestHeader__copy__(PyNs3MgtAddBaRequestHeader *self)
{

    PyNs3MgtAddBaRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAddBaRequestHeader, &PyNs3MgtAddBaRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtAddBaRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAddBaRequestHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTid, METH_NOARGS, "GetTid()\n\n" },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetStartingSequence, METH_NOARGS, "GetStartingSequence()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTimeout, METH_NOARGS, "GetTimeout()\n\n" },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, "SetStartingSequence(seq)\n\ntype: seq: uint16_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetImmediateBlockAck, METH_NOARGS, "SetImmediateBlockAck()\n\n" },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetTid, METH_KEYWORDS|METH_VARARGS, "SetTid(tid)\n\ntype: tid: uint8_t" },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetBufferSize, METH_NOARGS, "GetBufferSize()\n\n" },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_IsAmsduSupported, METH_NOARGS, "IsAmsduSupported()\n\n" },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetDelayedBlockAck, METH_NOARGS, "SetDelayedBlockAck()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetTimeout, METH_KEYWORDS|METH_VARARGS, "SetTimeout(timeout)\n\ntype: timeout: uint16_t" },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetBufferSize, METH_KEYWORDS|METH_VARARGS, "SetBufferSize(size)\n\ntype: size: uint16_t" },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, "SetAmsduSupport(supported)\n\ntype: supported: bool" },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_IsImmediateBlockAck, METH_NOARGS, "IsImmediateBlockAck()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAddBaRequestHeader__tp_clear(PyNs3MgtAddBaRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAddBaRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAddBaRequestHeader__tp_traverse(PyNs3MgtAddBaRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtAddBaRequestHeader__tp_dealloc(PyNs3MgtAddBaRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAddBaRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAddBaRequestHeader__tp_richcompare (PyNs3MgtAddBaRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAddBaRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAddBaRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAddBaRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtAddBaRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtAddBaRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAddBaRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtAddBaRequestHeader(arg0)\nMgtAddBaRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtAddBaRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAddBaRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAddBaRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAddBaRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAddBaRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAddBaRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtAddBaResponseHeader__tp_init__0(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAddBaResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAddBaResponseHeader(*((PyNs3MgtAddBaResponseHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtAddBaResponseHeader__tp_init__1(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAddBaResponseHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtAddBaResponseHeader__tp_init(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAddBaResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAddBaResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTid(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetStatusCode(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3StatusCode *py_StatusCode;
    
    ns3::StatusCode retval = self->obj->GetStatusCode();
    py_StatusCode = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_StatusCode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_StatusCode->obj = new ns3::StatusCode(retval);
    PyNs3StatusCode_wrapper_registry[(void *) py_StatusCode->obj] = (PyObject *) py_StatusCode;
    py_retval = Py_BuildValue((char *) "N", py_StatusCode);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_Deserialize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTimeout(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAddBaResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_Serialize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetImmediateBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetTid(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetBufferSize(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetStatusCode(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3StatusCode *code;
    const char *keywords[] = {"code", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &code)) {
        return NULL;
    }
    self->obj->SetStatusCode(*((PyNs3StatusCode *) code)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_IsAmsduSupported(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetDelayedBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetInstanceTypeId(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetSerializedSize(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetTimeout(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetBufferSize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &size)) {
        return NULL;
    }
    if (size > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetAmsduSupport(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_IsImmediateBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAddBaResponseHeader__copy__(PyNs3MgtAddBaResponseHeader *self)
{

    PyNs3MgtAddBaResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAddBaResponseHeader, &PyNs3MgtAddBaResponseHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtAddBaResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAddBaResponseHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTid, METH_NOARGS, "GetTid()\n\n" },
    {(char *) "GetStatusCode", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetStatusCode, METH_NOARGS, "GetStatusCode()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTimeout, METH_NOARGS, "GetTimeout()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetImmediateBlockAck, METH_NOARGS, "SetImmediateBlockAck()\n\n" },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetTid, METH_KEYWORDS|METH_VARARGS, "SetTid(tid)\n\ntype: tid: uint8_t" },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetBufferSize, METH_NOARGS, "GetBufferSize()\n\n" },
    {(char *) "SetStatusCode", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetStatusCode, METH_KEYWORDS|METH_VARARGS, "SetStatusCode(code)\n\ntype: code: ns3::StatusCode" },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_IsAmsduSupported, METH_NOARGS, "IsAmsduSupported()\n\n" },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetDelayedBlockAck, METH_NOARGS, "SetDelayedBlockAck()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetTimeout, METH_KEYWORDS|METH_VARARGS, "SetTimeout(timeout)\n\ntype: timeout: uint16_t" },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetBufferSize, METH_KEYWORDS|METH_VARARGS, "SetBufferSize(size)\n\ntype: size: uint16_t" },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, "SetAmsduSupport(supported)\n\ntype: supported: bool" },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_IsImmediateBlockAck, METH_NOARGS, "IsImmediateBlockAck()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAddBaResponseHeader__tp_clear(PyNs3MgtAddBaResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAddBaResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAddBaResponseHeader__tp_traverse(PyNs3MgtAddBaResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtAddBaResponseHeader__tp_dealloc(PyNs3MgtAddBaResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAddBaResponseHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAddBaResponseHeader__tp_richcompare (PyNs3MgtAddBaResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAddBaResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAddBaResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAddBaResponseHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtAddBaResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtAddBaResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAddBaResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtAddBaResponseHeader(arg0)\nMgtAddBaResponseHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtAddBaResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAddBaResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAddBaResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAddBaResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAddBaResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAddBaResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtAssocRequestHeader__tp_init__0(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAssocRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAssocRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAssocRequestHeader(*((PyNs3MgtAssocRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtAssocRequestHeader__tp_init__1(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAssocRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtAssocRequestHeader__tp_init(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAssocRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAssocRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetSupportedRates(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetCapabilities(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *py_CapabilityInformation;
    
    ns3::CapabilityInformation retval = self->obj->GetCapabilities();
    py_CapabilityInformation = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_CapabilityInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CapabilityInformation->obj = new ns3::CapabilityInformation(retval);
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_CapabilityInformation->obj] = (PyObject *) py_CapabilityInformation;
    py_retval = Py_BuildValue((char *) "N", py_CapabilityInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetHeCapabilities(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_Serialize(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetVhtCapabilities(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_Deserialize(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetHtCapabilities(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->SetHtCapabilities(*((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetListenInterval(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &interval)) {
        return NULL;
    }
    if (interval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetListenInterval(interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSsid(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetHtCapabilities(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetExtendedCapabilities(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *extendedcapabilities;
    const char *keywords[] = {"extendedcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &extendedcapabilities)) {
        return NULL;
    }
    self->obj->SetExtendedCapabilities(*((PyNs3ExtendedCapabilities *) extendedcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSupportedRates(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetHeCapabilities(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->SetHeCapabilities(*((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetCapabilities(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *capabilities;
    const char *keywords[] = {"capabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &capabilities)) {
        return NULL;
    }
    self->obj->SetCapabilities(*((PyNs3CapabilityInformation *) capabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetSsid(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetExtendedCapabilities(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetListenInterval(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetListenInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetInstanceTypeId(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSerializedSize(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAssocRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetVhtCapabilities(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->SetVhtCapabilities(*((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAssocRequestHeader__copy__(PyNs3MgtAssocRequestHeader *self)
{

    PyNs3MgtAssocRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAssocRequestHeader, &PyNs3MgtAssocRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtAssocRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAssocRequestHeader_methods[] = {
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, "SetSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "GetCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetCapabilities, METH_NOARGS, "GetCapabilities()\n\n" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilities(htcapabilities)\n\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "SetListenInterval", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetListenInterval, METH_KEYWORDS|METH_VARARGS, "SetListenInterval(interval)\n\ntype: interval: uint16_t" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "SetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetExtendedCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilities(extendedcapabilities)\n\ntype: extendedcapabilities: ns3::ExtendedCapabilities" },
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "SetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetHeCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHeCapabilities(hecapabilities)\n\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "SetCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetCapabilities, METH_KEYWORDS|METH_VARARGS, "SetCapabilities(capabilities)\n\ntype: capabilities: ns3::CapabilityInformation" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "GetListenInterval", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetListenInterval, METH_NOARGS, "GetListenInterval()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilities(vhtcapabilities)\n\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAssocRequestHeader__tp_clear(PyNs3MgtAssocRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAssocRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAssocRequestHeader__tp_traverse(PyNs3MgtAssocRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtAssocRequestHeader__tp_dealloc(PyNs3MgtAssocRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAssocRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAssocRequestHeader__tp_richcompare (PyNs3MgtAssocRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAssocRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAssocRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAssocRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtAssocRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtAssocRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAssocRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtAssocRequestHeader(arg0)\nMgtAssocRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtAssocRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAssocRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAssocRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAssocRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAssocRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAssocRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtAssocResponseHeader__tp_init__0(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAssocResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAssocResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAssocResponseHeader(*((PyNs3MgtAssocResponseHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtAssocResponseHeader__tp_init__1(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtAssocResponseHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtAssocResponseHeader__tp_init(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAssocResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAssocResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetSupportedRates(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAssocResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetHtCapabilities(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetAssociationId(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aid;
    const char *keywords[] = {"aid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aid)) {
        return NULL;
    }
    if (aid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAssociationId(aid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetEdcaParameterSet(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3EdcaParameterSet *py_EdcaParameterSet;
    
    ns3::EdcaParameterSet retval = self->obj->GetEdcaParameterSet();
    py_EdcaParameterSet = PyObject_New(PyNs3EdcaParameterSet, &PyNs3EdcaParameterSet_Type);
    
    py_EdcaParameterSet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EdcaParameterSet->obj = new ns3::EdcaParameterSet(retval);
    PyNs3Empty_wrapper_registry[(void *) py_EdcaParameterSet->obj] = (PyObject *) py_EdcaParameterSet;
    py_retval = Py_BuildValue((char *) "N", py_EdcaParameterSet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetErpInformation(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3ErpInformation *py_ErpInformation;
    
    ns3::ErpInformation retval = self->obj->GetErpInformation();
    py_ErpInformation = PyObject_New(PyNs3ErpInformation, &PyNs3ErpInformation_Type);
    
    py_ErpInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ErpInformation->obj = new ns3::ErpInformation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ErpInformation->obj] = (PyObject *) py_ErpInformation;
    py_retval = Py_BuildValue((char *) "N", py_ErpInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetVhtOperation(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtOperation *vhtoperation;
    const char *keywords[] = {"vhtoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtOperation_Type, &vhtoperation)) {
        return NULL;
    }
    self->obj->SetVhtOperation(*((PyNs3VhtOperation *) vhtoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetSupportedRates(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetHeCapabilities(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetVhtCapabilities(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetHeOperation(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HeOperation *py_HeOperation;
    
    ns3::HeOperation retval = self->obj->GetHeOperation();
    py_HeOperation = PyObject_New(PyNs3HeOperation, &PyNs3HeOperation_Type);
    
    py_HeOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeOperation->obj = new ns3::HeOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeOperation->obj] = (PyObject *) py_HeOperation;
    py_retval = Py_BuildValue((char *) "N", py_HeOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetCapabilities(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *capabilities;
    const char *keywords[] = {"capabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &capabilities)) {
        return NULL;
    }
    self->obj->SetCapabilities(*((PyNs3CapabilityInformation *) capabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetHtOperation(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtOperation *htoperation;
    const char *keywords[] = {"htoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtOperation_Type, &htoperation)) {
        return NULL;
    }
    self->obj->SetHtOperation(*((PyNs3HtOperation *) htoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetHeOperation(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeOperation *heoperation;
    const char *keywords[] = {"heoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeOperation_Type, &heoperation)) {
        return NULL;
    }
    self->obj->SetHeOperation(*((PyNs3HeOperation *) heoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetHtOperation(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HtOperation *py_HtOperation;
    
    ns3::HtOperation retval = self->obj->GetHtOperation();
    py_HtOperation = PyObject_New(PyNs3HtOperation, &PyNs3HtOperation_Type);
    
    py_HtOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtOperation->obj = new ns3::HtOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtOperation->obj] = (PyObject *) py_HtOperation;
    py_retval = Py_BuildValue((char *) "N", py_HtOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetVhtCapabilities(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->SetVhtCapabilities(*((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_Deserialize(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetHtCapabilities(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->SetHtCapabilities(*((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetHeCapabilities(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->SetHeCapabilities(*((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetExtendedCapabilities(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetInstanceTypeId(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetSerializedSize(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetCapabilities(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *py_CapabilityInformation;
    
    ns3::CapabilityInformation retval = self->obj->GetCapabilities();
    py_CapabilityInformation = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_CapabilityInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CapabilityInformation->obj = new ns3::CapabilityInformation(retval);
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_CapabilityInformation->obj] = (PyObject *) py_CapabilityInformation;
    py_retval = Py_BuildValue((char *) "N", py_CapabilityInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetStatusCode(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3StatusCode *py_StatusCode;
    
    ns3::StatusCode retval = self->obj->GetStatusCode();
    py_StatusCode = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_StatusCode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_StatusCode->obj = new ns3::StatusCode(retval);
    PyNs3StatusCode_wrapper_registry[(void *) py_StatusCode->obj] = (PyObject *) py_StatusCode;
    py_retval = Py_BuildValue((char *) "N", py_StatusCode);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetErpInformation(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ErpInformation *erpInformation;
    const char *keywords[] = {"erpInformation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErpInformation_Type, &erpInformation)) {
        return NULL;
    }
    self->obj->SetErpInformation(*((PyNs3ErpInformation *) erpInformation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_Serialize(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetExtendedCapabilities(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *extendedcapabilities;
    const char *keywords[] = {"extendedcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &extendedcapabilities)) {
        return NULL;
    }
    self->obj->SetExtendedCapabilities(*((PyNs3ExtendedCapabilities *) extendedcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetVhtOperation(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtOperation *py_VhtOperation;
    
    ns3::VhtOperation retval = self->obj->GetVhtOperation();
    py_VhtOperation = PyObject_New(PyNs3VhtOperation, &PyNs3VhtOperation_Type);
    
    py_VhtOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtOperation->obj = new ns3::VhtOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtOperation->obj] = (PyObject *) py_VhtOperation;
    py_retval = Py_BuildValue((char *) "N", py_VhtOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetEdcaParameterSet(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3EdcaParameterSet *edcaParameterSet;
    const char *keywords[] = {"edcaParameterSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EdcaParameterSet_Type, &edcaParameterSet)) {
        return NULL;
    }
    self->obj->SetEdcaParameterSet(*((PyNs3EdcaParameterSet *) edcaParameterSet)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetStatusCode(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3StatusCode *code;
    const char *keywords[] = {"code", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &code)) {
        return NULL;
    }
    self->obj->SetStatusCode(*((PyNs3StatusCode *) code)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAssocResponseHeader__copy__(PyNs3MgtAssocResponseHeader *self)
{

    PyNs3MgtAssocResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAssocResponseHeader, &PyNs3MgtAssocResponseHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtAssocResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAssocResponseHeader_methods[] = {
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "SetAssociationId", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetAssociationId, METH_KEYWORDS|METH_VARARGS, "SetAssociationId(aid)\n\ntype: aid: uint16_t" },
    {(char *) "GetEdcaParameterSet", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetEdcaParameterSet, METH_NOARGS, "GetEdcaParameterSet()\n\n" },
    {(char *) "GetErpInformation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetErpInformation, METH_NOARGS, "GetErpInformation()\n\n" },
    {(char *) "SetVhtOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetVhtOperation, METH_KEYWORDS|METH_VARARGS, "SetVhtOperation(vhtoperation)\n\ntype: vhtoperation: ns3::VhtOperation" },
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, "SetSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "GetHeOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetHeOperation, METH_NOARGS, "GetHeOperation()\n\n" },
    {(char *) "SetCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetCapabilities, METH_KEYWORDS|METH_VARARGS, "SetCapabilities(capabilities)\n\ntype: capabilities: ns3::CapabilityInformation" },
    {(char *) "SetHtOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetHtOperation, METH_KEYWORDS|METH_VARARGS, "SetHtOperation(htoperation)\n\ntype: htoperation: ns3::HtOperation" },
    {(char *) "SetHeOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetHeOperation, METH_KEYWORDS|METH_VARARGS, "SetHeOperation(heoperation)\n\ntype: heoperation: ns3::HeOperation" },
    {(char *) "GetHtOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetHtOperation, METH_NOARGS, "GetHtOperation()\n\n" },
    {(char *) "SetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilities(vhtcapabilities)\n\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilities(htcapabilities)\n\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "SetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetHeCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHeCapabilities(hecapabilities)\n\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetCapabilities, METH_NOARGS, "GetCapabilities()\n\n" },
    {(char *) "GetStatusCode", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetStatusCode, METH_NOARGS, "GetStatusCode()\n\n" },
    {(char *) "SetErpInformation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetErpInformation, METH_KEYWORDS|METH_VARARGS, "SetErpInformation(erpInformation)\n\ntype: erpInformation: ns3::ErpInformation" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetExtendedCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilities(extendedcapabilities)\n\ntype: extendedcapabilities: ns3::ExtendedCapabilities" },
    {(char *) "GetVhtOperation", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetVhtOperation, METH_NOARGS, "GetVhtOperation()\n\n" },
    {(char *) "SetEdcaParameterSet", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetEdcaParameterSet, METH_KEYWORDS|METH_VARARGS, "SetEdcaParameterSet(edcaParameterSet)\n\ntype: edcaParameterSet: ns3::EdcaParameterSet" },
    {(char *) "SetStatusCode", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetStatusCode, METH_KEYWORDS|METH_VARARGS, "SetStatusCode(code)\n\ntype: code: ns3::StatusCode" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAssocResponseHeader__tp_clear(PyNs3MgtAssocResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAssocResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAssocResponseHeader__tp_traverse(PyNs3MgtAssocResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtAssocResponseHeader__tp_dealloc(PyNs3MgtAssocResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAssocResponseHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAssocResponseHeader__tp_richcompare (PyNs3MgtAssocResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAssocResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAssocResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAssocResponseHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtAssocResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtAssocResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAssocResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtAssocResponseHeader(arg0)\nMgtAssocResponseHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtAssocResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAssocResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAssocResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAssocResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAssocResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAssocResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtDelBaHeader__tp_init__0(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtDelBaHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtDelBaHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtDelBaHeader(*((PyNs3MgtDelBaHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtDelBaHeader__tp_init__1(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtDelBaHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtDelBaHeader__tp_init(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtDelBaHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtDelBaHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetTid(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_Deserialize(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtDelBaHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_Serialize(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetByRecipient(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetByRecipient();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_IsByOriginator(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsByOriginator();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetInstanceTypeId(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetSerializedSize(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetByOriginator(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetByOriginator();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetTid(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtDelBaHeader__copy__(PyNs3MgtDelBaHeader *self)
{

    PyNs3MgtDelBaHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtDelBaHeader, &PyNs3MgtDelBaHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtDelBaHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtDelBaHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetTid, METH_NOARGS, "GetTid()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetByRecipient", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetByRecipient, METH_NOARGS, "SetByRecipient()\n\n" },
    {(char *) "IsByOriginator", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_IsByOriginator, METH_NOARGS, "IsByOriginator()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetByOriginator", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetByOriginator, METH_NOARGS, "SetByOriginator()\n\n" },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetTid, METH_KEYWORDS|METH_VARARGS, "SetTid(tid)\n\ntype: tid: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtDelBaHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtDelBaHeader__tp_clear(PyNs3MgtDelBaHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtDelBaHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtDelBaHeader__tp_traverse(PyNs3MgtDelBaHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtDelBaHeader__tp_dealloc(PyNs3MgtDelBaHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtDelBaHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtDelBaHeader__tp_richcompare (PyNs3MgtDelBaHeader *PYBINDGEN_UNUSED(self), PyNs3MgtDelBaHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtDelBaHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtDelBaHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtDelBaHeader",            /* tp_name */
    sizeof(PyNs3MgtDelBaHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtDelBaHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtDelBaHeader(arg0)\nMgtDelBaHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtDelBaHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtDelBaHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtDelBaHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtDelBaHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtDelBaHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtDelBaHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtProbeRequestHeader__tp_init__0(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtProbeRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtProbeRequestHeader__tp_init__1(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtProbeRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtProbeRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtProbeRequestHeader(*((PyNs3MgtProbeRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtProbeRequestHeader__tp_init(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtProbeRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtProbeRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetSupportedRates(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetVhtCapabilities(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->SetVhtCapabilities(*((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetHeCapabilities(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_Serialize(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetVhtCapabilities(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_Deserialize(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetHtCapabilities(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->SetHtCapabilities(*((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSsid(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetHtCapabilities(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetExtendedCapabilities(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *extendedcapabilities;
    const char *keywords[] = {"extendedcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &extendedcapabilities)) {
        return NULL;
    }
    self->obj->SetExtendedCapabilities(*((PyNs3ExtendedCapabilities *) extendedcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSupportedRates(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetHeCapabilities(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->SetHeCapabilities(*((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetSsid(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetExtendedCapabilities(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetInstanceTypeId(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSerializedSize(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtProbeRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtProbeRequestHeader__copy__(PyNs3MgtProbeRequestHeader *self)
{

    PyNs3MgtProbeRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtProbeRequestHeader, &PyNs3MgtProbeRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtProbeRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtProbeRequestHeader_methods[] = {
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, "SetSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "SetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilities(vhtcapabilities)\n\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilities(htcapabilities)\n\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "SetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetExtendedCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilities(extendedcapabilities)\n\ntype: extendedcapabilities: ns3::ExtendedCapabilities" },
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "SetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetHeCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHeCapabilities(hecapabilities)\n\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtProbeRequestHeader__tp_clear(PyNs3MgtProbeRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtProbeRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtProbeRequestHeader__tp_traverse(PyNs3MgtProbeRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtProbeRequestHeader__tp_dealloc(PyNs3MgtProbeRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtProbeRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtProbeRequestHeader__tp_richcompare (PyNs3MgtProbeRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtProbeRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtProbeRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtProbeRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtProbeRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtProbeRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtProbeRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtProbeRequestHeader(arg0)\nMgtProbeRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtProbeRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtProbeRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtProbeRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtProbeRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtProbeRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtProbeRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtProbeResponseHeader__tp_init__0(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtProbeResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtProbeResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtProbeResponseHeader(*((PyNs3MgtProbeResponseHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtProbeResponseHeader__tp_init__1(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtProbeResponseHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtProbeResponseHeader__tp_init(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtProbeResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtProbeResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSupportedRates(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetCfParameterSet(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CfParameterSet *cfparameterset;
    const char *keywords[] = {"cfparameterset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CfParameterSet_Type, &cfparameterset)) {
        return NULL;
    }
    self->obj->SetCfParameterSet(*((PyNs3CfParameterSet *) cfparameterset)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtProbeResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetHtCapabilities(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSerializedSize(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetDsssParameterSet(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsssParameterSet *dsssParameterSet;
    const char *keywords[] = {"dsssParameterSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsssParameterSet_Type, &dsssParameterSet)) {
        return NULL;
    }
    self->obj->SetDsssParameterSet(*((PyNs3DsssParameterSet *) dsssParameterSet)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetEdcaParameterSet(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3EdcaParameterSet *py_EdcaParameterSet;
    
    ns3::EdcaParameterSet retval = self->obj->GetEdcaParameterSet();
    py_EdcaParameterSet = PyObject_New(PyNs3EdcaParameterSet, &PyNs3EdcaParameterSet_Type);
    
    py_EdcaParameterSet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EdcaParameterSet->obj = new ns3::EdcaParameterSet(retval);
    PyNs3Empty_wrapper_registry[(void *) py_EdcaParameterSet->obj] = (PyObject *) py_EdcaParameterSet;
    py_retval = Py_BuildValue((char *) "N", py_EdcaParameterSet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetBeaconIntervalUs(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t us;
    const char *keywords[] = {"us", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &us)) {
        return NULL;
    }
    self->obj->SetBeaconIntervalUs(us);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetErpInformation(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3ErpInformation *py_ErpInformation;
    
    ns3::ErpInformation retval = self->obj->GetErpInformation();
    py_ErpInformation = PyObject_New(PyNs3ErpInformation, &PyNs3ErpInformation_Type);
    
    py_ErpInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ErpInformation->obj = new ns3::ErpInformation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ErpInformation->obj] = (PyObject *) py_ErpInformation;
    py_retval = Py_BuildValue((char *) "N", py_ErpInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetVhtOperation(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtOperation *vhtoperation;
    const char *keywords[] = {"vhtoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtOperation_Type, &vhtoperation)) {
        return NULL;
    }
    self->obj->SetVhtOperation(*((PyNs3VhtOperation *) vhtoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetSupportedRates(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetHeCapabilities(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetVhtCapabilities(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetHeOperation(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HeOperation *py_HeOperation;
    
    ns3::HeOperation retval = self->obj->GetHeOperation();
    py_HeOperation = PyObject_New(PyNs3HeOperation, &PyNs3HeOperation_Type);
    
    py_HeOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeOperation->obj = new ns3::HeOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeOperation->obj] = (PyObject *) py_HeOperation;
    py_retval = Py_BuildValue((char *) "N", py_HeOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetCapabilities(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *capabilities;
    const char *keywords[] = {"capabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &capabilities)) {
        return NULL;
    }
    self->obj->SetCapabilities(*((PyNs3CapabilityInformation *) capabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetHtOperation(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtOperation *htoperation;
    const char *keywords[] = {"htoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtOperation_Type, &htoperation)) {
        return NULL;
    }
    self->obj->SetHtOperation(*((PyNs3HtOperation *) htoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetHeOperation(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeOperation *heoperation;
    const char *keywords[] = {"heoperation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeOperation_Type, &heoperation)) {
        return NULL;
    }
    self->obj->SetHeOperation(*((PyNs3HeOperation *) heoperation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetHtOperation(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3HtOperation *py_HtOperation;
    
    ns3::HtOperation retval = self->obj->GetHtOperation();
    py_HtOperation = PyObject_New(PyNs3HtOperation, &PyNs3HtOperation_Type);
    
    py_HtOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtOperation->obj = new ns3::HtOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtOperation->obj] = (PyObject *) py_HtOperation;
    py_retval = Py_BuildValue((char *) "N", py_HtOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetVhtCapabilities(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->SetVhtCapabilities(*((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetCfParameterSet(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3CfParameterSet *py_CfParameterSet;
    
    ns3::CfParameterSet retval = self->obj->GetCfParameterSet();
    py_CfParameterSet = PyObject_New(PyNs3CfParameterSet, &PyNs3CfParameterSet_Type);
    
    py_CfParameterSet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CfParameterSet->obj = new ns3::CfParameterSet(retval);
    PyNs3Empty_wrapper_registry[(void *) py_CfParameterSet->obj] = (PyObject *) py_CfParameterSet;
    py_retval = Py_BuildValue((char *) "N", py_CfParameterSet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_Deserialize(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetHtCapabilities(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->SetHtCapabilities(*((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetHeCapabilities(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->SetHeCapabilities(*((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetExtendedCapabilities(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetBeaconIntervalUs(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetBeaconIntervalUs();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetInstanceTypeId(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetTimestamp(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetTimestamp();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetCapabilities(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *py_CapabilityInformation;
    
    ns3::CapabilityInformation retval = self->obj->GetCapabilities();
    py_CapabilityInformation = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_CapabilityInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CapabilityInformation->obj = new ns3::CapabilityInformation(retval);
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_CapabilityInformation->obj] = (PyObject *) py_CapabilityInformation;
    py_retval = Py_BuildValue((char *) "N", py_CapabilityInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetSsid(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetErpInformation(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ErpInformation *erpInformation;
    const char *keywords[] = {"erpInformation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErpInformation_Type, &erpInformation)) {
        return NULL;
    }
    self->obj->SetErpInformation(*((PyNs3ErpInformation *) erpInformation)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSsid(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_Serialize(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetExtendedCapabilities(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *extendedcapabilities;
    const char *keywords[] = {"extendedcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &extendedcapabilities)) {
        return NULL;
    }
    self->obj->SetExtendedCapabilities(*((PyNs3ExtendedCapabilities *) extendedcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetDsssParameterSet(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3DsssParameterSet *py_DsssParameterSet;
    
    ns3::DsssParameterSet retval = self->obj->GetDsssParameterSet();
    py_DsssParameterSet = PyObject_New(PyNs3DsssParameterSet, &PyNs3DsssParameterSet_Type);
    
    py_DsssParameterSet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsssParameterSet->obj = new ns3::DsssParameterSet(retval);
    PyNs3Empty_wrapper_registry[(void *) py_DsssParameterSet->obj] = (PyObject *) py_DsssParameterSet;
    py_retval = Py_BuildValue((char *) "N", py_DsssParameterSet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetVhtOperation(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtOperation *py_VhtOperation;
    
    ns3::VhtOperation retval = self->obj->GetVhtOperation();
    py_VhtOperation = PyObject_New(PyNs3VhtOperation, &PyNs3VhtOperation_Type);
    
    py_VhtOperation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtOperation->obj = new ns3::VhtOperation(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtOperation->obj] = (PyObject *) py_VhtOperation;
    py_retval = Py_BuildValue((char *) "N", py_VhtOperation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetEdcaParameterSet(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3EdcaParameterSet *edcaParameterSet;
    const char *keywords[] = {"edcaParameterSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EdcaParameterSet_Type, &edcaParameterSet)) {
        return NULL;
    }
    self->obj->SetEdcaParameterSet(*((PyNs3EdcaParameterSet *) edcaParameterSet)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtProbeResponseHeader__copy__(PyNs3MgtProbeResponseHeader *self)
{

    PyNs3MgtProbeResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtProbeResponseHeader, &PyNs3MgtProbeResponseHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtProbeResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtProbeResponseHeader_methods[] = {
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "SetCfParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetCfParameterSet, METH_KEYWORDS|METH_VARARGS, "SetCfParameterSet(cfparameterset)\n\ntype: cfparameterset: ns3::CfParameterSet" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetDsssParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetDsssParameterSet, METH_KEYWORDS|METH_VARARGS, "SetDsssParameterSet(dsssParameterSet)\n\ntype: dsssParameterSet: ns3::DsssParameterSet" },
    {(char *) "GetEdcaParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetEdcaParameterSet, METH_NOARGS, "GetEdcaParameterSet()\n\n" },
    {(char *) "SetBeaconIntervalUs", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetBeaconIntervalUs, METH_KEYWORDS|METH_VARARGS, "SetBeaconIntervalUs(us)\n\ntype: us: uint64_t" },
    {(char *) "GetErpInformation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetErpInformation, METH_NOARGS, "GetErpInformation()\n\n" },
    {(char *) "SetVhtOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetVhtOperation, METH_KEYWORDS|METH_VARARGS, "SetVhtOperation(vhtoperation)\n\ntype: vhtoperation: ns3::VhtOperation" },
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, "SetSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "GetHeOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetHeOperation, METH_NOARGS, "GetHeOperation()\n\n" },
    {(char *) "SetCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetCapabilities, METH_KEYWORDS|METH_VARARGS, "SetCapabilities(capabilities)\n\ntype: capabilities: ns3::CapabilityInformation" },
    {(char *) "SetHtOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetHtOperation, METH_KEYWORDS|METH_VARARGS, "SetHtOperation(htoperation)\n\ntype: htoperation: ns3::HtOperation" },
    {(char *) "SetHeOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetHeOperation, METH_KEYWORDS|METH_VARARGS, "SetHeOperation(heoperation)\n\ntype: heoperation: ns3::HeOperation" },
    {(char *) "GetHtOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetHtOperation, METH_NOARGS, "GetHtOperation()\n\n" },
    {(char *) "SetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilities(vhtcapabilities)\n\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "GetCfParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetCfParameterSet, METH_NOARGS, "GetCfParameterSet()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilities(htcapabilities)\n\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "SetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetHeCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHeCapabilities(hecapabilities)\n\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "GetBeaconIntervalUs", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetBeaconIntervalUs, METH_NOARGS, "GetBeaconIntervalUs()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetTimestamp", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetTimestamp, METH_NOARGS, "GetTimestamp()\n\n" },
    {(char *) "GetCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetCapabilities, METH_NOARGS, "GetCapabilities()\n\n" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "SetErpInformation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetErpInformation, METH_KEYWORDS|METH_VARARGS, "SetErpInformation(erpInformation)\n\ntype: erpInformation: ns3::ErpInformation" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetExtendedCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilities(extendedcapabilities)\n\ntype: extendedcapabilities: ns3::ExtendedCapabilities" },
    {(char *) "GetDsssParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetDsssParameterSet, METH_NOARGS, "GetDsssParameterSet()\n\n" },
    {(char *) "GetVhtOperation", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetVhtOperation, METH_NOARGS, "GetVhtOperation()\n\n" },
    {(char *) "SetEdcaParameterSet", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetEdcaParameterSet, METH_KEYWORDS|METH_VARARGS, "SetEdcaParameterSet(edcaParameterSet)\n\ntype: edcaParameterSet: ns3::EdcaParameterSet" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtProbeResponseHeader__tp_clear(PyNs3MgtProbeResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtProbeResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtProbeResponseHeader__tp_traverse(PyNs3MgtProbeResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtProbeResponseHeader__tp_dealloc(PyNs3MgtProbeResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtProbeResponseHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtProbeResponseHeader__tp_richcompare (PyNs3MgtProbeResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtProbeResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtProbeResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtProbeResponseHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtProbeResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtProbeResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtProbeResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtProbeResponseHeader(arg0)\nMgtProbeResponseHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtProbeResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtProbeResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtProbeResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtProbeResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtProbeResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtProbeResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtReassocRequestHeader__tp_init__0(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtReassocRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtReassocRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtReassocRequestHeader(*((PyNs3MgtReassocRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtReassocRequestHeader__tp_init__1(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtReassocRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtReassocRequestHeader__tp_init(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtReassocRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtReassocRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetSupportedRates(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtReassocRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetHtCapabilities(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_Deserialize(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetHeCapabilities(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetVhtCapabilities(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetSsid(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetCapabilities(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *capabilities;
    const char *keywords[] = {"capabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &capabilities)) {
        return NULL;
    }
    self->obj->SetCapabilities(*((PyNs3CapabilityInformation *) capabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetListenInterval(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &interval)) {
        return NULL;
    }
    if (interval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetListenInterval(interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetVhtCapabilities(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->SetVhtCapabilities(*((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetSupportedRates(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetHtCapabilities(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->SetHtCapabilities(*((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetHeCapabilities(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->SetHeCapabilities(*((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetExtendedCapabilities(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetListenInterval(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetListenInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetInstanceTypeId(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetSerializedSize(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetCurrentApAddress(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *currentApAddr;
    const char *keywords[] = {"currentApAddr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &currentApAddr)) {
        return NULL;
    }
    self->obj->SetCurrentApAddress(*((PyNs3Mac48Address *) currentApAddr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetCapabilities(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3CapabilityInformation *py_CapabilityInformation;
    
    ns3::CapabilityInformation retval = self->obj->GetCapabilities();
    py_CapabilityInformation = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_CapabilityInformation->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CapabilityInformation->obj = new ns3::CapabilityInformation(retval);
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_CapabilityInformation->obj] = (PyObject *) py_CapabilityInformation;
    py_retval = Py_BuildValue((char *) "N", py_CapabilityInformation);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_GetSsid(PyNs3MgtReassocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_Serialize(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtReassocRequestHeader_SetExtendedCapabilities(PyNs3MgtReassocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *extendedcapabilities;
    const char *keywords[] = {"extendedcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &extendedcapabilities)) {
        return NULL;
    }
    self->obj->SetExtendedCapabilities(*((PyNs3ExtendedCapabilities *) extendedcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtReassocRequestHeader__copy__(PyNs3MgtReassocRequestHeader *self)
{

    PyNs3MgtReassocRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtReassocRequestHeader, &PyNs3MgtReassocRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtReassocRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtReassocRequestHeader_methods[] = {
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "SetCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetCapabilities, METH_KEYWORDS|METH_VARARGS, "SetCapabilities(capabilities)\n\ntype: capabilities: ns3::CapabilityInformation" },
    {(char *) "SetListenInterval", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetListenInterval, METH_KEYWORDS|METH_VARARGS, "SetListenInterval(interval)\n\ntype: interval: uint16_t" },
    {(char *) "SetVhtCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilities(vhtcapabilities)\n\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, "SetSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "SetHtCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilities(htcapabilities)\n\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "SetHeCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetHeCapabilities, METH_KEYWORDS|METH_VARARGS, "SetHeCapabilities(hecapabilities)\n\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "GetListenInterval", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetListenInterval, METH_NOARGS, "GetListenInterval()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetCurrentApAddress", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetCurrentApAddress, METH_KEYWORDS|METH_VARARGS, "SetCurrentApAddress(currentApAddr)\n\ntype: currentApAddr: ns3::Mac48Address" },
    {(char *) "GetCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetCapabilities, METH_NOARGS, "GetCapabilities()\n\n" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetExtendedCapabilities", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader_SetExtendedCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilities(extendedcapabilities)\n\ntype: extendedcapabilities: ns3::ExtendedCapabilities" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtReassocRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtReassocRequestHeader__tp_clear(PyNs3MgtReassocRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtReassocRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtReassocRequestHeader__tp_traverse(PyNs3MgtReassocRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtReassocRequestHeader__tp_dealloc(PyNs3MgtReassocRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtReassocRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtReassocRequestHeader__tp_richcompare (PyNs3MgtReassocRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtReassocRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtReassocRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtReassocRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtReassocRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtReassocRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtReassocRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtReassocRequestHeader(arg0)\nMgtReassocRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtReassocRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtReassocRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtReassocRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtReassocRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtReassocRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtReassocRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_nextStatsUpdate(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_nextStatsUpdate);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_nextStatsUpdate(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_nextStatsUpdate = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_col(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_col);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_col(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_col = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_index(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_index);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_index(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_index = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxTpRate(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxTpRate);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxTpRate(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxTpRate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxTpRate2(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxTpRate2);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxTpRate2(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxTpRate2 = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxProbRate(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_maxProbRate);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxProbRate(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_maxProbRate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_nModes(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_nModes);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_nModes(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_nModes = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_totalPacketsCount(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_totalPacketsCount);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_totalPacketsCount(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->m_totalPacketsCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_samplePacketsCount(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_samplePacketsCount);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_samplePacketsCount(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->m_samplePacketsCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_numSamplesDeferred(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_numSamplesDeferred);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_numSamplesDeferred(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->m_numSamplesDeferred)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_isSampling(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_isSampling));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_isSampling(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_isSampling = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_sampleRate(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_sampleRate);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_sampleRate(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_sampleRate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_sampleDeferred(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_sampleDeferred));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_sampleDeferred(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_sampleDeferred = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_shortRetry(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_shortRetry));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_shortRetry(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_shortRetry)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_longRetry(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_longRetry));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_longRetry(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_longRetry)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_retry(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_retry));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_retry(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_retry)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_txrate(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_txrate);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_txrate(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_txrate = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_initialized(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_initialized));
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_initialized(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_initialized = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3MinstrelWifiRemoteStation__get_m_minstrelTable(PyNs3MinstrelWifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::MinstrelRate retval;
    Pyns3__MinstrelRate *py_ns3__MinstrelRate;
    
    py_ns3__MinstrelRate = PyObject_New(Pyns3__MinstrelRate, &Pyns3__MinstrelRate_Type);
    py_ns3__MinstrelRate->obj = new ns3::MinstrelRate(self->obj->m_minstrelTable);
    py_retval = Py_BuildValue((char *) "N", py_ns3__MinstrelRate);
    return py_retval;
}
static int _wrap_PyNs3MinstrelWifiRemoteStation__set_m_minstrelTable(PyNs3MinstrelWifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    ns3::MinstrelRate retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__MinstrelRate, &self->obj->m_minstrelTable)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3MinstrelWifiRemoteStation__getsets[] = {
    {
        (char*) "m_nModes", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_nModes, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_nModes, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_col", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_col, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_col, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_isSampling", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_isSampling, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_isSampling, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_initialized", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_initialized, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_initialized, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxProbRate", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxProbRate, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxProbRate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_index", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_index, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_index, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_samplePacketsCount", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_samplePacketsCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_samplePacketsCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxTpRate2", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxTpRate2, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxTpRate2, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_longRetry", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_longRetry, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_longRetry, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_nextStatsUpdate", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_nextStatsUpdate, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_nextStatsUpdate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_sampleDeferred", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_sampleDeferred, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_sampleDeferred, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_shortRetry", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_shortRetry, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_shortRetry, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_minstrelTable", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_minstrelTable, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_minstrelTable, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_retry", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_retry, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_retry, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_numSamplesDeferred", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_numSamplesDeferred, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_numSamplesDeferred, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_sampleRate", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_sampleRate, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_sampleRate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_txrate", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_txrate, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_txrate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_maxTpRate", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_maxTpRate, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_maxTpRate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_totalPacketsCount", /* attribute name */
        (getter) _wrap_PyNs3MinstrelWifiRemoteStation__get_m_totalPacketsCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3MinstrelWifiRemoteStation__set_m_totalPacketsCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

static int
_wrap_PyNs3MinstrelWifiRemoteStation__tp_init(PyNs3MinstrelWifiRemoteStation *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::MinstrelWifiRemoteStation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static PyMethodDef PyNs3MinstrelWifiRemoteStation_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MinstrelWifiRemoteStation__tp_dealloc(PyNs3MinstrelWifiRemoteStation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStation_wrapper_registry.end()) {
        PyNs3WifiRemoteStation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MinstrelWifiRemoteStation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MinstrelWifiRemoteStation__tp_richcompare (PyNs3MinstrelWifiRemoteStation *PYBINDGEN_UNUSED(self), PyNs3MinstrelWifiRemoteStation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MinstrelWifiRemoteStation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MinstrelWifiRemoteStation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MinstrelWifiRemoteStation",            /* tp_name */
    sizeof(PyNs3MinstrelWifiRemoteStation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MinstrelWifiRemoteStation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MinstrelWifiRemoteStation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MinstrelWifiRemoteStation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MinstrelWifiRemoteStation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3MinstrelWifiRemoteStation__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MinstrelWifiRemoteStation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init__0(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init__1(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> >(*((PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____copy__(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__, &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__(o)\nSimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init__0(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init__1(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> >(*((PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____copy__(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__, &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__(o)\nSimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init__0(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init__1(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> >(*((PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____copy__(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__, &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__(o)\nSimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init__0(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init__1(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> >(*((PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____copy__(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__, &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__(o)\nSimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__0(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__1(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >(*((PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____copy__(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__, &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__(o)\nSimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init__0(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init__1(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> >(*((PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____copy__(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__, &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__(o)\nSimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SnrTag__tp_init__0(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SnrTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SnrTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SnrTag(*((PyNs3SnrTag *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SnrTag__tp_init__1(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SnrTag();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SnrTag__tp_init(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SnrTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SnrTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SnrTag_Set(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double snr;
    const char *keywords[] = {"snr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &snr)) {
        return NULL;
    }
    self->obj->Set(snr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_Deserialize(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Deserialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_Get(PyNs3SnrTag *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->Get();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SnrTag::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_Serialize(PyNs3SnrTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_GetInstanceTypeId(PyNs3SnrTag *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SnrTag_GetSerializedSize(PyNs3SnrTag *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3SnrTag__copy__(PyNs3SnrTag *self)
{

    PyNs3SnrTag *py_copy;
    py_copy = PyObject_GC_New(PyNs3SnrTag, &PyNs3SnrTag_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::SnrTag(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SnrTag_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3SnrTag_Set, METH_KEYWORDS|METH_VARARGS, "Set(snr)\n\ntype: snr: double" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3SnrTag_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3SnrTag_Get, METH_NOARGS, "Get()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SnrTag_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3SnrTag_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3SnrTag_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3SnrTag_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SnrTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SnrTag__tp_clear(PyNs3SnrTag *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::SnrTag *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3SnrTag__tp_traverse(PyNs3SnrTag *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3SnrTag__tp_dealloc(PyNs3SnrTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SnrTag__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SnrTag__tp_richcompare (PyNs3SnrTag *PYBINDGEN_UNUSED(self), PyNs3SnrTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SnrTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SnrTag_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SnrTag",            /* tp_name */
    sizeof(PyNs3SnrTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SnrTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SnrTag(arg0)\nSnrTag()",                        /* Documentation string */
    (traverseproc)PyNs3SnrTag__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SnrTag__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SnrTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SnrTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SnrTag, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SnrTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::Ptr< ns3::WifiPhy >
PyNs3SpectrumWifiPhyHelper__PythonHelper::Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Create"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhyHelper* >(m_pyself)->obj = const_cast< ns3::SpectrumWifiPhyHelper* >((const ns3::SpectrumWifiPhyHelper*) this);
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Create", (char *) "NN", py_Node, py_NetDevice);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SpectrumWifiPhyHelper__PythonHelper::EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *py_OutputStreamWrapper;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnableAsciiInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_OutputStreamWrapper = NULL;
    } else {
        py_OutputStreamWrapper = (PyNs3OutputStreamWrapper *) wrapper_lookup_iter->second;
        Py_INCREF(py_OutputStreamWrapper);
    }
    
    if (py_OutputStreamWrapper == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))), &PyNs3OutputStreamWrapper_Type);
        py_OutputStreamWrapper = PyObject_New(PyNs3OutputStreamWrapper, wrapper_type);
    
        py_OutputStreamWrapper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))->Ref();
        py_OutputStreamWrapper->obj = const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream));
        PyNs3Empty_wrapper_registry[(void *) py_OutputStreamWrapper->obj] = (PyObject *) py_OutputStreamWrapper;
    }
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnableAsciiInternal", (char *) "Ns#NN", py_OutputStreamWrapper, prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhyHelper__PythonHelper::EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyHelper *self_obj_before;
    PyObject *py_retval;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnablePcapInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = (ns3::WifiPhyHelper*) this;
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnablePcapInternal", (char *) "s#NNN", prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(promiscuous), PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SpectrumWifiPhyHelper__tp_init__0(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SpectrumWifiPhyHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SpectrumWifiPhyHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SpectrumWifiPhyHelper_Type)
    {
        self->obj = new PyNs3SpectrumWifiPhyHelper__PythonHelper(*((PyNs3SpectrumWifiPhyHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SpectrumWifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SpectrumWifiPhyHelper(*((PyNs3SpectrumWifiPhyHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3SpectrumWifiPhyHelper__tp_init__1(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SpectrumWifiPhyHelper_Type)
    {
        self->obj = new PyNs3SpectrumWifiPhyHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SpectrumWifiPhyHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SpectrumWifiPhyHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3SpectrumWifiPhyHelper__tp_init(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SpectrumWifiPhyHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SpectrumWifiPhyHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhyHelper_Default(void)
{
    PyObject *py_retval;
    PyNs3SpectrumWifiPhyHelper *py_SpectrumWifiPhyHelper;
    
    ns3::SpectrumWifiPhyHelper retval = ns3::SpectrumWifiPhyHelper::Default();
    py_SpectrumWifiPhyHelper = PyObject_GC_New(PyNs3SpectrumWifiPhyHelper, &PyNs3SpectrumWifiPhyHelper_Type);
    py_SpectrumWifiPhyHelper->inst_dict = NULL;
    py_SpectrumWifiPhyHelper->inst_dict = NULL;
    py_SpectrumWifiPhyHelper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SpectrumWifiPhyHelper->obj = new ns3::SpectrumWifiPhyHelper(retval);
    PyNs3PcapHelperForDevice_wrapper_registry[(void *) py_SpectrumWifiPhyHelper->obj] = (PyObject *) py_SpectrumWifiPhyHelper;
    py_retval = Py_BuildValue((char *) "N", py_SpectrumWifiPhyHelper);
    return py_retval;
}



PyObject *
_wrap_PyNs3SpectrumWifiPhyHelper_SetChannel__0(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3SpectrumChannel *channel;
    ns3::SpectrumChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SpectrumChannel_Type, &channel)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::SpectrumChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3SpectrumWifiPhyHelper_SetChannel__1(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *channelName;
    Py_ssize_t channelName_len;
    const char *keywords[] = {"channelName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &channelName, &channelName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->SetChannel(std::string(channelName, channelName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3SpectrumWifiPhyHelper_SetChannel(PyNs3SpectrumWifiPhyHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SpectrumWifiPhyHelper_SetChannel__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SpectrumWifiPhyHelper_SetChannel__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3SpectrumWifiPhyHelper__copy__(PyNs3SpectrumWifiPhyHelper *self)
{

    PyNs3SpectrumWifiPhyHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3SpectrumWifiPhyHelper, &PyNs3SpectrumWifiPhyHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::SpectrumWifiPhyHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3PcapHelperForDevice_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SpectrumWifiPhyHelper_methods[] = {
    {(char *) "Default", (PyCFunction) _wrap_PyNs3SpectrumWifiPhyHelper_Default, METH_NOARGS|METH_STATIC, "Default()\n\n" },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3SpectrumWifiPhyHelper_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SpectrumWifiPhyHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SpectrumWifiPhyHelper__tp_clear(PyNs3SpectrumWifiPhyHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::SpectrumWifiPhyHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3SpectrumWifiPhyHelper__tp_traverse(PyNs3SpectrumWifiPhyHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SpectrumWifiPhyHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SpectrumWifiPhyHelper__tp_dealloc(PyNs3SpectrumWifiPhyHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3PcapHelperForDevice_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3PcapHelperForDevice_wrapper_registry.end()) {
        PyNs3PcapHelperForDevice_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SpectrumWifiPhyHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SpectrumWifiPhyHelper__tp_richcompare (PyNs3SpectrumWifiPhyHelper *PYBINDGEN_UNUSED(self), PyNs3SpectrumWifiPhyHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SpectrumWifiPhyHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SpectrumWifiPhyHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SpectrumWifiPhyHelper",            /* tp_name */
    sizeof(PyNs3SpectrumWifiPhyHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SpectrumWifiPhyHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SpectrumWifiPhyHelper(arg0)\nSpectrumWifiPhyHelper()",                        /* Documentation string */
    (traverseproc)PyNs3SpectrumWifiPhyHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SpectrumWifiPhyHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SpectrumWifiPhyHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SpectrumWifiPhyHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SpectrumWifiPhyHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SpectrumWifiPhyHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Txop__PythonHelper::_wrap_TxDroppedPacket(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxDroppedPacket of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxDroppedPacket__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyInternalCollision(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyInternalCollision of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyInternalCollision__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NextFragment(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NextFragment of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NextFragment__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_ResetCw(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method ResetCw of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->ResetCw__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_StartAccessIfNeeded(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method StartAccessIfNeeded of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->StartAccessIfNeeded__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetBackoffStart(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    PyNs3Time *py_Time;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetBackoffStart of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    ns3::Time retval = helper->GetBackoffStart__parent_caller();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetFragmentSize(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetFragmentSize of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetFragmentSize__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_UpdateBackoffSlotsNow(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nSlots;
    PyNs3Time *backoffUpdateBound;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    const char *keywords[] = {"nSlots", "backoffUpdateBound", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &nSlots, &PyNs3Time_Type, &backoffUpdateBound)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method UpdateBackoffSlotsNow of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->UpdateBackoffSlotsNow__parent_caller(nSlots, *((PyNs3Time *) backoffUpdateBound)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_DoDispose(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetCw(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetCw of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetCw__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_DoInitialize(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_RestartAccessIfNeeded(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method RestartAccessIfNeeded of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->RestartAccessIfNeeded__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetBackoffSlots(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetBackoffSlots of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetBackoffSlots__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_IsLastFragment(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method IsLastFragment of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->IsLastFragment__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetNextFragmentSize(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetNextFragmentSize of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetNextFragmentSize__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_UpdateFailedCw(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method UpdateFailedCw of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->UpdateFailedCw__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyAccessRequested(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyAccessRequested of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyAccessRequested__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NeedDataRetransmission(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NeedDataRetransmission of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->NeedDataRetransmission__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NeedFragmentation(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NeedFragmentation of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->NeedFragmentation__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NeedRtsRetransmission(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NeedRtsRetransmission of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->NeedRtsRetransmission__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_GetFragmentOffset(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetFragmentOffset of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetFragmentOffset__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyCollision(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyCollision of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyCollision__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Txop__PythonHelper::_wrap_NotifyAccessGranted(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper = dynamic_cast< PyNs3Txop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyAccessGranted of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyAccessGranted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3Txop__PythonHelper::Cancel()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Cancel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::Cancel();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Cancel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::EndTxNoAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EndTxNoAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::EndTxNoAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EndTxNoAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::GotAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::GotAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address recipient, double rxSnr, ns3::WifiMode txMode, double dataSnr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *py_CtrlBAckResponseHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotBlockAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::GotBlockAck(blockAck, recipient, rxSnr, txMode, dataSnr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) blockAck);
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_CtrlBAckResponseHeader = NULL;
    } else {
        py_CtrlBAckResponseHeader = (PyNs3CtrlBAckResponseHeader *) wrapper_lookup_iter->second;
        Py_INCREF(py_CtrlBAckResponseHeader);
    }
    
    if (py_CtrlBAckResponseHeader == NULL)
    {
        py_CtrlBAckResponseHeader = PyObject_GC_New(PyNs3CtrlBAckResponseHeader, &PyNs3CtrlBAckResponseHeader_Type);
        py_CtrlBAckResponseHeader->inst_dict = NULL;
        py_CtrlBAckResponseHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_CtrlBAckResponseHeader->obj = new ns3::CtrlBAckResponseHeader(*blockAck);
        PyNs3ObjectBase_wrapper_registry[(void *) py_CtrlBAckResponseHeader->obj] = (PyObject *) py_CtrlBAckResponseHeader;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(recipient);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(txMode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotBlockAck", (char *) "NNdNd", py_CtrlBAckResponseHeader, py_Mac48Address, rxSnr, py_WifiMode, dataSnr);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3Txop__PythonHelper::HasTxop() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HasTxop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::HasTxop();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HasTxop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::HasTxop();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::HasTxop();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3Txop__PythonHelper::IsAccessRequested() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsAccessRequested"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsAccessRequested", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3Txop__PythonHelper::IsQosTxop() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsQosTxop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsQosTxop();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsQosTxop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsQosTxop();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsQosTxop();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Txop__PythonHelper::MissedAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::MissedAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::MissedBlockAck(uint8_t nMpdus)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedBlockAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::MissedBlockAck(nMpdus);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedBlockAck", (char *) "i", (int) nMpdus);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::MissedCts()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedCts"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::MissedCts();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedCts", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyChannelSwitching()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyChannelSwitching"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyChannelSwitching();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyChannelSwitching", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyOff()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyOff();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOff", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyOn()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOn"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyOn();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifySleep()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySleep"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifySleep();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySleep", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyWakeUp()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyWakeUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyWakeUp();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyWakeUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::Queue(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Queue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::Queue(packet, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Queue", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::StartNextFragment()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartNextFragment"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::StartNextFragment();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartNextFragment", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::StartNextPacket()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartNextPacket"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::StartNextPacket();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartNextPacket", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3Txop__PythonHelper::GetFragmentOffset() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFragmentOffset"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentOffset();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFragmentOffset", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentOffset();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentOffset();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3Txop__PythonHelper::GetFragmentSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFragmentSize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentSize();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFragmentSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetFragmentSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3Txop__PythonHelper::GetNextFragmentSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNextFragmentSize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetNextFragmentSize();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNextFragmentSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetNextFragmentSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::GetNextFragmentSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3Txop__PythonHelper::IsLastFragment() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLastFragment"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsLastFragment();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLastFragment", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsLastFragment();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsLastFragment();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3Txop__PythonHelper::NeedFragmentation() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedFragmentation"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::NeedFragmentation();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedFragmentation", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::NeedFragmentation();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::NeedFragmentation();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Txop__PythonHelper::NotifyAccessGranted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyAccessGranted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyAccessGranted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyAccessGranted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyAccessRequested()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyAccessRequested"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyAccessRequested();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyAccessRequested", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCollision"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyCollision();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyInternalCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyInternalCollision"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyInternalCollision();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyInternalCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::RestartAccessIfNeeded()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RestartAccessIfNeeded"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::RestartAccessIfNeeded();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RestartAccessIfNeeded", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::StartAccessIfNeeded()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartAccessIfNeeded"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::StartAccessIfNeeded();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartAccessIfNeeded", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Txop__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Txop__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Txop__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3Txop__tp_init__0(PyNs3Txop *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Txop *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Txop_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Txop_Type)
    {
        self->obj = new PyNs3Txop__PythonHelper(*((PyNs3Txop *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Txop__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::Txop(*((PyNs3Txop *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3Txop__tp_init__1(PyNs3Txop *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Txop_Type)
    {
        self->obj = new PyNs3Txop__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Txop__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::Txop();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3Txop__tp_init(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Txop__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Txop__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Txop_NotifyChannelSwitching(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyChannelSwitching()) : (self->obj->ns3::Txop::NotifyChannelSwitching());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetAifsn(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAifsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_CanStartNextPolling(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->CanStartNextPolling();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Txop::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetTxDroppedCallback(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl5> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl5> (callback);
    self->obj->SetTxDroppedCallback(ns3::Callback<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_MissedBlockAck(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nMpdus;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    const char *keywords[] = {"nMpdus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nMpdus)) {
        return NULL;
    }
    if (nMpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->MissedBlockAck(nMpdus)) : (self->obj->ns3::Txop::MissedBlockAck(nMpdus));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_IsAccessRequested(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsAccessRequested()) : (self->obj->ns3::Txop::IsAccessRequested());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_StartNextPacket(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->StartNextPacket()) : (self->obj->ns3::Txop::StartNextPacket());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GotCfEnd(PyNs3Txop *self)
{
    PyObject *py_retval;
    
    self->obj->GotCfEnd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetLow(PyNs3Txop *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MacLow > retval;
    PyNs3MacLow *py_MacLow;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetLow();
    if (!(const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3MacLow__PythonHelper).name())
    {
        py_MacLow = reinterpret_cast< PyNs3MacLow* >(reinterpret_cast< PyNs3MacLow__PythonHelper* >(const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MacLow->obj = const_cast<ns3::MacLow *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MacLow);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MacLow = NULL;
        } else {
            py_MacLow = (PyNs3MacLow *) wrapper_lookup_iter->second;
            Py_INCREF(py_MacLow);
        }
    
        if (py_MacLow == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))), &PyNs3MacLow_Type);
            py_MacLow = PyObject_GC_New(PyNs3MacLow, wrapper_type);
            py_MacLow->inst_dict = NULL;
    
            py_MacLow->inst_dict = NULL;
            py_MacLow->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MacLow *> (ns3::PeekPointer (retval))->Ref();
            py_MacLow->obj = const_cast<ns3::MacLow *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MacLow->obj] = (PyObject *) py_MacLow;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MacLow);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetMinCw(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int minCw;
    const char *keywords[] = {"minCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &minCw)) {
        return NULL;
    }
    self->obj->SetMinCw(minCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_EndTxNoAck(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->EndTxNoAck()) : (self->obj->ns3::Txop::EndTxNoAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GotBlockAck(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *recipient;
    double rxSnr;
    PyNs3WifiMode *txMode;
    double dataSnr;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAck", "recipient", "rxSnr", "txMode", "dataSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &recipient, &rxSnr, &PyNs3WifiMode_Type, &txMode, &dataSnr)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    (helper_class == NULL)? (self->obj->GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj, rxSnr, *((PyNs3WifiMode *) txMode)->obj, dataSnr)) : (self->obj->ns3::Txop::GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj, rxSnr, *((PyNs3WifiMode *) txMode)->obj, dataSnr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetTxopLimit(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *txopLimit;
    const char *keywords[] = {"txopLimit", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &txopLimit)) {
        return NULL;
    }
    self->obj->SetTxopLimit(*((PyNs3Time *) txopLimit)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_NotifyOff(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyOff()) : (self->obj->ns3::Txop::NotifyOff());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_MissedCts(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->MissedCts()) : (self->obj->ns3::Txop::MissedCts());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetTxFailedCallback(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl8> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl8> (callback);
    self->obj->SetTxFailedCallback(ns3::Callback<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetMinCw(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMinCw();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GotAck(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->GotAck()) : (self->obj->ns3::Txop::GotAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetAifsn(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aifsn)) {
        return NULL;
    }
    if (aifsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetTxOkCallback(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl8> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl8> (callback);
    self->obj->SetTxOkCallback(ns3::Callback<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_StartNextFragment(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->StartNextFragment()) : (self->obj->ns3::Txop::StartNextFragment());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_NotifyWakeUp(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyWakeUp()) : (self->obj->ns3::Txop::NotifyWakeUp());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_MissedAck(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->MissedAck()) : (self->obj->ns3::Txop::MissedAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetMaxCw(PyNs3Txop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxCw();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetTxopLimit(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTxopLimit();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_NotifySleep(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifySleep()) : (self->obj->ns3::Txop::NotifySleep());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_GetWifiMacQueue(PyNs3Txop *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueue > retval;
    PyNs3WifiMacQueue *py_WifiMacQueue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetWifiMacQueue();
    if (!(const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiMacQueue__PythonHelper).name())
    {
        py_WifiMacQueue = reinterpret_cast< PyNs3WifiMacQueue* >(reinterpret_cast< PyNs3WifiMacQueue__PythonHelper* >(const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiMacQueue->obj = const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiMacQueue);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiMacQueue = NULL;
        } else {
            py_WifiMacQueue = (PyNs3WifiMacQueue *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiMacQueue);
        }
    
        if (py_WifiMacQueue == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueue_Type);
            py_WifiMacQueue = PyObject_GC_New(PyNs3WifiMacQueue, wrapper_type);
            py_WifiMacQueue->inst_dict = NULL;
    
            py_WifiMacQueue->inst_dict = NULL;
            py_WifiMacQueue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval))->Ref();
            py_WifiMacQueue->obj = const_cast<ns3::WifiMacQueue *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacQueue->obj] = (PyObject *) py_WifiMacQueue;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueue);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_Queue(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Queue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj)) : (self->obj->ns3::Txop::Queue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_NotifyOn(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyOn()) : (self->obj->ns3::Txop::NotifyOn());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SetMaxCw(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxCw;
    const char *keywords[] = {"maxCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxCw)) {
        return NULL;
    }
    self->obj->SetMaxCw(maxCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_StartBackoffNow(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nSlots;
    const char *keywords[] = {"nSlots", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nSlots)) {
        return NULL;
    }
    self->obj->StartBackoffNow(nSlots);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_MissedCfPollResponse(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool expectedCfAck;
    PyObject *py_expectedCfAck;
    const char *keywords[] = {"expectedCfAck", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_expectedCfAck)) {
        return NULL;
    }
    expectedCfAck = (bool) PyObject_IsTrue(py_expectedCfAck);
    self->obj->MissedCfPollResponse(expectedCfAck);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_SendCfFrame(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiMacType frameType;
    PyNs3Mac48Address *addr;
    const char *keywords[] = {"frameType", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &frameType, &PyNs3Mac48Address_Type, &addr)) {
        return NULL;
    }
    self->obj->SendCfFrame(frameType, *((PyNs3Mac48Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_HasTxop(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->HasTxop()) : (self->obj->ns3::Txop::HasTxop());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_AssignStreams(PyNs3Txop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_Cancel(PyNs3Txop *self)
{
    PyObject *py_retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Cancel()) : (self->obj->ns3::Txop::Cancel());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Txop_IsQosTxop(PyNs3Txop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Txop__PythonHelper *helper_class = dynamic_cast<PyNs3Txop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsQosTxop()) : (self->obj->ns3::Txop::IsQosTxop());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Txop__copy__(PyNs3Txop *self)
{

    PyNs3Txop *py_copy;
    py_copy = PyObject_GC_New(PyNs3Txop, &PyNs3Txop_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::Txop(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Txop_methods[] = {
    {(char *) "NotifyChannelSwitching", (PyCFunction) _wrap_PyNs3Txop_NotifyChannelSwitching, METH_NOARGS, "NotifyChannelSwitching()\n\n" },
    {(char *) "GetAifsn", (PyCFunction) _wrap_PyNs3Txop_GetAifsn, METH_NOARGS, "GetAifsn()\n\n" },
    {(char *) "CanStartNextPolling", (PyCFunction) _wrap_PyNs3Txop_CanStartNextPolling, METH_NOARGS, "CanStartNextPolling()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Txop_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetTxDroppedCallback", (PyCFunction) _wrap_PyNs3Txop_SetTxDroppedCallback, METH_KEYWORDS|METH_VARARGS, "SetTxDroppedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "MissedBlockAck", (PyCFunction) _wrap_PyNs3Txop_MissedBlockAck, METH_KEYWORDS|METH_VARARGS, "MissedBlockAck(nMpdus)\n\ntype: nMpdus: uint8_t" },
    {(char *) "IsAccessRequested", (PyCFunction) _wrap_PyNs3Txop_IsAccessRequested, METH_NOARGS, "IsAccessRequested()\n\n" },
    {(char *) "StartNextPacket", (PyCFunction) _wrap_PyNs3Txop_StartNextPacket, METH_NOARGS, "StartNextPacket()\n\n" },
    {(char *) "GotCfEnd", (PyCFunction) _wrap_PyNs3Txop_GotCfEnd, METH_NOARGS, "GotCfEnd()\n\n" },
    {(char *) "GetLow", (PyCFunction) _wrap_PyNs3Txop_GetLow, METH_NOARGS, "GetLow()\n\n" },
    {(char *) "SetMinCw", (PyCFunction) _wrap_PyNs3Txop_SetMinCw, METH_KEYWORDS|METH_VARARGS, "SetMinCw(minCw)\n\ntype: minCw: uint32_t" },
    {(char *) "EndTxNoAck", (PyCFunction) _wrap_PyNs3Txop_EndTxNoAck, METH_NOARGS, "EndTxNoAck()\n\n" },
    {(char *) "GotBlockAck", (PyCFunction) _wrap_PyNs3Txop_GotBlockAck, METH_KEYWORDS|METH_VARARGS, "GotBlockAck(blockAck, recipient, rxSnr, txMode, dataSnr)\n\ntype: blockAck: ns3::CtrlBAckResponseHeader const *\ntype: recipient: ns3::Mac48Address\ntype: rxSnr: double\ntype: txMode: ns3::WifiMode\ntype: dataSnr: double" },
    {(char *) "SetTxopLimit", (PyCFunction) _wrap_PyNs3Txop_SetTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetTxopLimit(txopLimit)\n\ntype: txopLimit: ns3::Time" },
    {(char *) "NotifyOff", (PyCFunction) _wrap_PyNs3Txop_NotifyOff, METH_NOARGS, "NotifyOff()\n\n" },
    {(char *) "MissedCts", (PyCFunction) _wrap_PyNs3Txop_MissedCts, METH_NOARGS, "MissedCts()\n\n" },
    {(char *) "SetTxFailedCallback", (PyCFunction) _wrap_PyNs3Txop_SetTxFailedCallback, METH_KEYWORDS|METH_VARARGS, "SetTxFailedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::WifiMacHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetMinCw", (PyCFunction) _wrap_PyNs3Txop_GetMinCw, METH_NOARGS, "GetMinCw()\n\n" },
    {(char *) "GotAck", (PyCFunction) _wrap_PyNs3Txop_GotAck, METH_NOARGS, "GotAck()\n\n" },
    {(char *) "SetAifsn", (PyCFunction) _wrap_PyNs3Txop_SetAifsn, METH_KEYWORDS|METH_VARARGS, "SetAifsn(aifsn)\n\ntype: aifsn: uint8_t" },
    {(char *) "SetTxOkCallback", (PyCFunction) _wrap_PyNs3Txop_SetTxOkCallback, METH_KEYWORDS|METH_VARARGS, "SetTxOkCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::WifiMacHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "StartNextFragment", (PyCFunction) _wrap_PyNs3Txop_StartNextFragment, METH_NOARGS, "StartNextFragment()\n\n" },
    {(char *) "NotifyWakeUp", (PyCFunction) _wrap_PyNs3Txop_NotifyWakeUp, METH_NOARGS, "NotifyWakeUp()\n\n" },
    {(char *) "MissedAck", (PyCFunction) _wrap_PyNs3Txop_MissedAck, METH_NOARGS, "MissedAck()\n\n" },
    {(char *) "GetMaxCw", (PyCFunction) _wrap_PyNs3Txop_GetMaxCw, METH_NOARGS, "GetMaxCw()\n\n" },
    {(char *) "GetTxopLimit", (PyCFunction) _wrap_PyNs3Txop_GetTxopLimit, METH_NOARGS, "GetTxopLimit()\n\n" },
    {(char *) "NotifySleep", (PyCFunction) _wrap_PyNs3Txop_NotifySleep, METH_NOARGS, "NotifySleep()\n\n" },
    {(char *) "GetWifiMacQueue", (PyCFunction) _wrap_PyNs3Txop_GetWifiMacQueue, METH_NOARGS, "GetWifiMacQueue()\n\n" },
    {(char *) "Queue", (PyCFunction) _wrap_PyNs3Txop_Queue, METH_KEYWORDS|METH_VARARGS, "Queue(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "NotifyOn", (PyCFunction) _wrap_PyNs3Txop_NotifyOn, METH_NOARGS, "NotifyOn()\n\n" },
    {(char *) "SetMaxCw", (PyCFunction) _wrap_PyNs3Txop_SetMaxCw, METH_KEYWORDS|METH_VARARGS, "SetMaxCw(maxCw)\n\ntype: maxCw: uint32_t" },
    {(char *) "StartBackoffNow", (PyCFunction) _wrap_PyNs3Txop_StartBackoffNow, METH_KEYWORDS|METH_VARARGS, "StartBackoffNow(nSlots)\n\ntype: nSlots: uint32_t" },
    {(char *) "MissedCfPollResponse", (PyCFunction) _wrap_PyNs3Txop_MissedCfPollResponse, METH_KEYWORDS|METH_VARARGS, "MissedCfPollResponse(expectedCfAck)\n\ntype: expectedCfAck: bool" },
    {(char *) "SendCfFrame", (PyCFunction) _wrap_PyNs3Txop_SendCfFrame, METH_KEYWORDS|METH_VARARGS, "SendCfFrame(frameType, addr)\n\ntype: frameType: ns3::WifiMacType\ntype: addr: ns3::Mac48Address" },
    {(char *) "HasTxop", (PyCFunction) _wrap_PyNs3Txop_HasTxop, METH_NOARGS, "HasTxop()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3Txop_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "Cancel", (PyCFunction) _wrap_PyNs3Txop_Cancel, METH_NOARGS, "Cancel()\n\n" },
    {(char *) "IsQosTxop", (PyCFunction) _wrap_PyNs3Txop_IsQosTxop, METH_NOARGS, "IsQosTxop()\n\n" },
    {(char *) "TxDroppedPacket", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_TxDroppedPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyInternalCollision", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyInternalCollision, METH_NOARGS, NULL },
    {(char *) "NextFragment", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NextFragment, METH_NOARGS, NULL },
    {(char *) "ResetCw", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_ResetCw, METH_NOARGS, NULL },
    {(char *) "StartAccessIfNeeded", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_StartAccessIfNeeded, METH_NOARGS, NULL },
    {(char *) "GetBackoffStart", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetBackoffStart, METH_NOARGS, NULL },
    {(char *) "GetFragmentSize", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetFragmentSize, METH_NOARGS, NULL },
    {(char *) "UpdateBackoffSlotsNow", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_UpdateBackoffSlotsNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "GetCw", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetCw, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "RestartAccessIfNeeded", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_RestartAccessIfNeeded, METH_NOARGS, NULL },
    {(char *) "GetBackoffSlots", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetBackoffSlots, METH_NOARGS, NULL },
    {(char *) "IsLastFragment", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_IsLastFragment, METH_NOARGS, NULL },
    {(char *) "GetNextFragmentSize", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetNextFragmentSize, METH_NOARGS, NULL },
    {(char *) "UpdateFailedCw", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_UpdateFailedCw, METH_NOARGS, NULL },
    {(char *) "NotifyAccessRequested", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyAccessRequested, METH_NOARGS, NULL },
    {(char *) "NeedDataRetransmission", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NeedDataRetransmission, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedFragmentation", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NeedFragmentation, METH_NOARGS, NULL },
    {(char *) "NeedRtsRetransmission", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NeedRtsRetransmission, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFragmentOffset", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_GetFragmentOffset, METH_NOARGS, NULL },
    {(char *) "NotifyCollision", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyCollision, METH_NOARGS, NULL },
    {(char *) "NotifyAccessGranted", (PyCFunction) PyNs3Txop__PythonHelper::_wrap_NotifyAccessGranted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Txop__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Txop__tp_clear(PyNs3Txop *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::Txop *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Txop__tp_traverse(PyNs3Txop *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Txop__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Txop__tp_dealloc(PyNs3Txop *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Txop__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Txop__tp_richcompare (PyNs3Txop *PYBINDGEN_UNUSED(self), PyNs3Txop *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Txop_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Txop_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Txop",            /* tp_name */
    sizeof(PyNs3Txop),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Txop__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Txop(arg0)\nTxop()",                        /* Documentation string */
    (traverseproc)PyNs3Txop__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Txop__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Txop__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Txop_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Txop, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Txop__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiActionHeader__tp_init__0(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiActionHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiActionHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader(*((PyNs3WifiActionHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiActionHeader__tp_init__1(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiActionHeader__tp_init(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiActionHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiActionHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetAction(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiActionHeaderActionValue *py_ActionValue;
    
    ns3::WifiActionHeader::ActionValue retval = self->obj->GetAction();
    py_ActionValue = PyObject_New(PyNs3WifiActionHeaderActionValue, &PyNs3WifiActionHeaderActionValue_Type);
    py_ActionValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ActionValue->obj = new ns3::WifiActionHeader::ActionValue(retval);
    PyNs3WifiActionHeaderActionValue_wrapper_registry[(void *) py_ActionValue->obj] = (PyObject *) py_ActionValue;
    py_retval = Py_BuildValue((char *) "N", py_ActionValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_Deserialize(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetCategory(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    ns3::WifiActionHeader::CategoryValue retval;
    
    retval = self->obj->GetCategory();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiActionHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_Serialize(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetInstanceTypeId(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetSerializedSize(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_SetAction(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiActionHeader::CategoryValue type;
    PyNs3WifiActionHeaderActionValue *action;
    const char *keywords[] = {"type", "action", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &type, &PyNs3WifiActionHeaderActionValue_Type, &action)) {
        return NULL;
    }
    self->obj->SetAction(type, *((PyNs3WifiActionHeaderActionValue *) action)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiActionHeader__copy__(PyNs3WifiActionHeader *self)
{

    PyNs3WifiActionHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiActionHeader, &PyNs3WifiActionHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiActionHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiActionHeader_methods[] = {
    {(char *) "GetAction", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetAction, METH_NOARGS, "GetAction()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiActionHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetCategory", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetCategory, METH_NOARGS, "GetCategory()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiActionHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetAction", (PyCFunction) _wrap_PyNs3WifiActionHeader_SetAction, METH_KEYWORDS|METH_VARARGS, "SetAction(type, action)\n\ntype: type: ns3::WifiActionHeader::CategoryValue\ntype: action: ns3::WifiActionHeader::ActionValue" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiActionHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiActionHeader__tp_clear(PyNs3WifiActionHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiActionHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiActionHeader__tp_traverse(PyNs3WifiActionHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiActionHeader__tp_dealloc(PyNs3WifiActionHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiActionHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiActionHeader__tp_richcompare (PyNs3WifiActionHeader *PYBINDGEN_UNUSED(self), PyNs3WifiActionHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiActionHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiActionHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiActionHeader",            /* tp_name */
    sizeof(PyNs3WifiActionHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiActionHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiActionHeader(arg0)\nWifiActionHeader()",                        /* Documentation string */
    (traverseproc)PyNs3WifiActionHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiActionHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiActionHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiActionHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiActionHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiActionHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiActionHeaderActionValue_wrapper_registry;
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_blockAck(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->blockAck);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_blockAck(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->blockAck)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_meshAction(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->meshAction);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_meshAction(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->meshAction)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_multihopAction(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->multihopAction);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_multihopAction(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->multihopAction)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_selfProtectedAction(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->selfProtectedAction);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_selfProtectedAction(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->selfProtectedAction)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiActionHeaderActionValue__getsets[] = {
    {
        (char*) "multihopAction", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_multihopAction, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_multihopAction, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "blockAck", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_blockAck, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_blockAck, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "selfProtectedAction", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_selfProtectedAction, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_selfProtectedAction, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "meshAction", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_meshAction, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_meshAction, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiActionHeaderActionValue__tp_init__0(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader::ActionValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiActionHeaderActionValue__tp_init__1(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiActionHeaderActionValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiActionHeaderActionValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader::ActionValue(*((PyNs3WifiActionHeaderActionValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiActionHeaderActionValue__tp_init(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiActionHeaderActionValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiActionHeaderActionValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiActionHeaderActionValue__copy__(PyNs3WifiActionHeaderActionValue *self)
{

    PyNs3WifiActionHeaderActionValue *py_copy;
    py_copy = PyObject_New(PyNs3WifiActionHeaderActionValue, &PyNs3WifiActionHeaderActionValue_Type);
    py_copy->obj = new ns3::WifiActionHeader::ActionValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiActionHeaderActionValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiActionHeaderActionValue_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiActionHeaderActionValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiActionHeaderActionValue__tp_dealloc(PyNs3WifiActionHeaderActionValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiActionHeaderActionValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiActionHeaderActionValue_wrapper_registry.end()) {
        PyNs3WifiActionHeaderActionValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiActionHeader::ActionValue *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiActionHeaderActionValue__tp_richcompare (PyNs3WifiActionHeaderActionValue *PYBINDGEN_UNUSED(self), PyNs3WifiActionHeaderActionValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiActionHeaderActionValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiActionHeaderActionValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiActionHeader.ActionValue",            /* tp_name */
    sizeof(PyNs3WifiActionHeaderActionValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiActionHeaderActionValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ActionValue(arg0)\nActionValue()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiActionHeaderActionValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiActionHeaderActionValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiActionHeaderActionValue__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiActionHeaderActionValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiInformationElement__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiInformationElement' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiInformationElement_Deserialize(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_Serialize(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_DeserializeInformationField(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_GetInformationFieldSize(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_SerializeInformationField(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_GetSerializedSize(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_DeserializeIfPresent(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->DeserializeIfPresent(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_ElementId(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}

static PyMethodDef PyNs3WifiInformationElement_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiInformationElement_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiInformationElement_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3WifiInformationElement_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3WifiInformationElement_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3WifiInformationElement_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiInformationElement_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "DeserializeIfPresent", (PyCFunction) _wrap_PyNs3WifiInformationElement_DeserializeIfPresent, METH_KEYWORDS|METH_VARARGS, "DeserializeIfPresent(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3WifiInformationElement_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiInformationElement__tp_dealloc(PyNs3WifiInformationElement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiInformationElement *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiInformationElement__tp_richcompare (PyNs3WifiInformationElement *PYBINDGEN_UNUSED(self), PyNs3WifiInformationElement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiInformationElement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiInformationElement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiInformationElement",            /* tp_name */
    sizeof(PyNs3WifiInformationElement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiInformationElement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiInformationElement(arg0)\nWifiInformationElement()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiInformationElement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiInformationElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiInformationElement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiInformationElementVector__tp_init__0(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiInformationElementVector *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiInformationElementVector_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiInformationElementVector(*((PyNs3WifiInformationElementVector *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiInformationElementVector__tp_init__1(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiInformationElementVector();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiInformationElementVector__tp_init(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiInformationElementVector__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiInformationElementVector__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_AddInformationElement(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiInformationElement *element;
    ns3::WifiInformationElement *element_ptr;
    const char *keywords[] = {"element", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiInformationElement_Type, &element)) {
        return NULL;
    }
    element_ptr = (element ? element->obj : NULL);
    retval = self->obj->AddInformationElement(ns3::Ptr< ns3::WifiInformationElement  > (element_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiInformationElementVector_Deserialize__0(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiInformationElementVector_Deserialize__1(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3BufferIterator *end;
    const char *keywords[] = {"start", "end", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3BufferIterator_Type, &start, &PyNs3BufferIterator_Type, &end)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, *((PyNs3BufferIterator *) end)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3WifiInformationElementVector_Deserialize(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiInformationElementVector_Deserialize__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiInformationElementVector_Deserialize__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiInformationElementVector::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_Serialize(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_FindFirst(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiInformationElement > retval;
    int id;
    const char *keywords[] = {"id", NULL};
    PyNs3WifiInformationElement *py_WifiInformationElement;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->FindFirst(id);
    if (!(const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiInformationElement = NULL;
    } else {
        py_WifiInformationElement = (PyNs3WifiInformationElement *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiInformationElement);
    }
    
    if (py_WifiInformationElement == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)))), &PyNs3WifiInformationElement_Type);
        py_WifiInformationElement = PyObject_New(PyNs3WifiInformationElement, wrapper_type);
    
        py_WifiInformationElement->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval))->Ref();
        py_WifiInformationElement->obj = const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiInformationElement->obj] = (PyObject *) py_WifiInformationElement;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiInformationElement);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_DeserializeSingleIe(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->DeserializeSingleIe(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetInstanceTypeId(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetSerializedSize(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiInformationElementVector__copy__(PyNs3WifiInformationElementVector *self)
{

    PyNs3WifiInformationElementVector *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiInformationElementVector, &PyNs3WifiInformationElementVector_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiInformationElementVector(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiInformationElementVector_methods[] = {
    {(char *) "AddInformationElement", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_AddInformationElement, METH_KEYWORDS|METH_VARARGS, "AddInformationElement(element)\n\ntype: element: ns3::Ptr< ns3::WifiInformationElement >" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "FindFirst", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_FindFirst, METH_KEYWORDS|METH_VARARGS, "FindFirst(id)\n\ntype: id: uint8_t" },
    {(char *) "DeserializeSingleIe", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_DeserializeSingleIe, METH_KEYWORDS|METH_VARARGS, "DeserializeSingleIe(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiInformationElementVector__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiInformationElementVector__tp_clear(PyNs3WifiInformationElementVector *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiInformationElementVector *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiInformationElementVector__tp_traverse(PyNs3WifiInformationElementVector *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiInformationElementVector__tp_dealloc(PyNs3WifiInformationElementVector *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiInformationElementVector__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiInformationElementVector__tp_richcompare (PyNs3WifiInformationElementVector *PYBINDGEN_UNUSED(self), PyNs3WifiInformationElementVector *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiInformationElementVector_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiInformationElementVector_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiInformationElementVector",            /* tp_name */
    sizeof(PyNs3WifiInformationElementVector),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiInformationElementVector__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiInformationElementVector(arg0)\nWifiInformationElementVector()",                        /* Documentation string */
    (traverseproc)PyNs3WifiInformationElementVector__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiInformationElementVector__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiInformationElementVector__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiInformationElementVector_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiInformationElementVector, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiInformationElementVector__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiMac__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiMac' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiMac_SetEifsNoDifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *eifsNoDifs;
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &eifsNoDifs)) {
        return NULL;
    }
    self->obj->SetEifsNoDifs(*((PyNs3Time *) eifsNoDifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetForwardUpCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl3> upCallback_cb_impl;
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl3> (upCallback);
    self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetWifiPhy(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetBssid(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBssid();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SupportsSendFrom(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->SupportsSendFrom();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetWifiRemoteStationManager(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetWifiRemoteStationManager();
    if (!(const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetEifsNoDifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEifsNoDifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetShortSlotTimeSupported(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortSlotTimeSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetPromisc(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->SetPromisc();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetShortSlotTimeSupported(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetShortSlotTimeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSlot(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *slotTime;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &slotTime)) {
        return NULL;
    }
    self->obj->SetSlot(*((PyNs3Time *) slotTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetBasicBlockAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBasicBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetPifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetRifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyRxDrop(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyTxDrop(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiMac_Enqueue__0(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMac_Enqueue__1(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiMac_Enqueue(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiMac_SetCompressedBlockAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    self->obj->SetCompressedBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetWifiPhy(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetWifiPhy();
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = reinterpret_cast< PyNs3WifiPhy* >(reinterpret_cast< PyNs3WifiPhy__PythonHelper* >(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->inst_dict = NULL;
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetBasicBlockAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    self->obj->SetBasicBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetCtsTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ctsTimeout;
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ctsTimeout)) {
        return NULL;
    }
    self->obj->SetCtsTimeout(*((PyNs3Time *) ctsTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_ConfigureStandard(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    self->obj->ConfigureStandard(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetCtsTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCtsTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetAddress(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetMaxPropagationDelay(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *delay;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &delay)) {
        return NULL;
    }
    self->obj->SetMaxPropagationDelay(*((PyNs3Time *) delay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetRifsSupported(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetRifsSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyRx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetLinkDownCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl4> linkDown_cb_impl;
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl4> (linkDown);
    self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *sifs;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &sifs)) {
        return NULL;
    }
    self->obj->SetSifs(*((PyNs3Time *) sifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyTx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetAddress(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetWifiRemoteStationManager(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetCompressedBlockAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCompressedBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_ResetWifiPhy(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->ResetWifiPhy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSsid(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetRifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rifs;
    const char *keywords[] = {"rifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rifs)) {
        return NULL;
    }
    self->obj->SetRifs(*((PyNs3Time *) rifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ackTimeout;
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ackTimeout)) {
        return NULL;
    }
    self->obj->SetAckTimeout(*((PyNs3Time *) ackTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSsid(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSlot(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSlot();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetPifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *pifs;
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &pifs)) {
        return NULL;
    }
    self->obj->SetPifs(*((PyNs3Time *) pifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetLinkUpCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl4> linkUp_cb_impl;
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl4> (linkUp);
    self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyPromiscRx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyPromiscRx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiMac_methods[] = {
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3WifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, "SetEifsNoDifs(eifsNoDifs)\n\ntype: eifsNoDifs: ns3::Time" },
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, "SetForwardUpCallback(upCallback)\n\ntype: upCallback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3WifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, "SetWifiPhy(phy)\n\ntype: phy: ns3::Ptr< ns3::WifiPhy >" },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3WifiMac_GetBssid, METH_NOARGS, "GetBssid()\n\n" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3WifiMac_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "GetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiMac_GetWifiRemoteStationManager, METH_NOARGS, "GetWifiRemoteStationManager()\n\n" },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3WifiMac_GetEifsNoDifs, METH_NOARGS, "GetEifsNoDifs()\n\n" },
    {(char *) "GetShortSlotTimeSupported", (PyCFunction) _wrap_PyNs3WifiMac_GetShortSlotTimeSupported, METH_NOARGS, "GetShortSlotTimeSupported()\n\n" },
    {(char *) "SetPromisc", (PyCFunction) _wrap_PyNs3WifiMac_SetPromisc, METH_NOARGS, "SetPromisc()\n\n" },
    {(char *) "SetShortSlotTimeSupported", (PyCFunction) _wrap_PyNs3WifiMac_SetShortSlotTimeSupported, METH_KEYWORDS|METH_VARARGS, "SetShortSlotTimeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3WifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, "SetSlot(slotTime)\n\ntype: slotTime: ns3::Time" },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetBasicBlockAckTimeout, METH_NOARGS, "GetBasicBlockAckTimeout()\n\n" },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3WifiMac_GetPifs, METH_NOARGS, "GetPifs()\n\n" },
    {(char *) "GetRifs", (PyCFunction) _wrap_PyNs3WifiMac_GetRifs, METH_NOARGS, "GetRifs()\n\n" },
    {(char *) "NotifyRxDrop", (PyCFunction) _wrap_PyNs3WifiMac_NotifyRxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyRxDrop(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "NotifyTxDrop", (PyCFunction) _wrap_PyNs3WifiMac_NotifyTxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyTxDrop(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetCompressedBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "GetWifiPhy", (PyCFunction) _wrap_PyNs3WifiMac_GetWifiPhy, METH_NOARGS, "GetWifiPhy()\n\n" },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetBasicBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, "SetCtsTimeout(ctsTimeout)\n\ntype: ctsTimeout: ns3::Time" },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3WifiMac_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, "ConfigureStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetCtsTimeout, METH_NOARGS, "GetCtsTimeout()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3WifiMac_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "SetMaxPropagationDelay", (PyCFunction) _wrap_PyNs3WifiMac_SetMaxPropagationDelay, METH_KEYWORDS|METH_VARARGS, "SetMaxPropagationDelay(delay)\n\ntype: delay: ns3::Time" },
    {(char *) "GetRifsSupported", (PyCFunction) _wrap_PyNs3WifiMac_GetRifsSupported, METH_NOARGS, "GetRifsSupported()\n\n" },
    {(char *) "NotifyRx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyRx, METH_KEYWORDS|METH_VARARGS, "NotifyRx(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkDownCallback(linkDown)\n\ntype: linkDown: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3WifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, "SetSifs(sifs)\n\ntype: sifs: ns3::Time" },
    {(char *) "NotifyTx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyTx, METH_KEYWORDS|METH_VARARGS, "NotifyTx(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3WifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, "SetWifiRemoteStationManager(stationManager)\n\ntype: stationManager: ns3::Ptr< ns3::WifiRemoteStationManager >" },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, "GetCompressedBlockAckTimeout()\n\n" },
    {(char *) "ResetWifiPhy", (PyCFunction) _wrap_PyNs3WifiMac_ResetWifiPhy, METH_NOARGS, "ResetWifiPhy()\n\n" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3WifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "SetRifs", (PyCFunction) _wrap_PyNs3WifiMac_SetRifs, METH_KEYWORDS|METH_VARARGS, "SetRifs(rifs)\n\ntype: rifs: ns3::Time" },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetAckTimeout(ackTimeout)\n\ntype: ackTimeout: ns3::Time" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3WifiMac_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3WifiMac_GetSlot, METH_NOARGS, "GetSlot()\n\n" },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3WifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, "SetPifs(pifs)\n\ntype: pifs: ns3::Time" },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetAckTimeout, METH_NOARGS, "GetAckTimeout()\n\n" },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3WifiMac_GetSifs, METH_NOARGS, "GetSifs()\n\n" },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkUpCallback(linkUp)\n\ntype: linkUp: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "NotifyPromiscRx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyPromiscRx, METH_KEYWORDS|METH_VARARGS, "NotifyPromiscRx(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMac__tp_clear(PyNs3WifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiMac__tp_traverse(PyNs3WifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiMac__tp_dealloc(PyNs3WifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMac__tp_richcompare (PyNs3WifiMac *PYBINDGEN_UNUSED(self), PyNs3WifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMac",            /* tp_name */
    sizeof(PyNs3WifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiMac(arg0)\nWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3WifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiMacHeader__tp_init__0(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMacHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMacHeader(*((PyNs3WifiMacHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiMacHeader__tp_init__1(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMacHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiMacHeader__tp_init(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetNoRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetNoRetry();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr4(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr4();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr3(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr3();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr2(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr2();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr1(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr1();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsNotTo(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsNotTo();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMacHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_HasData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasData();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetSequenceNumber(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSequenceNumber(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBlockAckReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBlockAckReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAssocReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAssocReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosAmsdu();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosTid(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosData();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_Serialize(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr3(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr3(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMgt(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMgt();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsData();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDuration(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SetDuration(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr1(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr1(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoAmsdu();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr4(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr4(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetNoMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetNoMoreFragments();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsReassocResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsReassocResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsProbeReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsProbeReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSequenceNumber(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSequenceNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoMeshControlPresent(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoMeshControlPresent();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsRts(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCfEnd(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCfEnd();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetId(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetId(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMoreFragments();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetFragmentNumber(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFragmentNumber();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsFromDs(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsFromDs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSize(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosAckPolicy(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiMacHeader::QosAckPolicy policy;
    const char *keywords[] = {"policy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &policy)) {
        return NULL;
    }
    self->obj->SetQosAckPolicy(policy);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsTo(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsTo();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAuthentication(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAuthentication();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetTypeString(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    char const *retval;
    
    retval = self->obj->GetTypeString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSequenceControl(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosEosp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMultihopAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultihopAction();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetQosTid(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetQosTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetRawDuration(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &duration)) {
        return NULL;
    }
    if (duration > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRawDuration(duration);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetNoOrder(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetNoOrder();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetOrder(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetOrder();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsReassocReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsReassocReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_Deserialize(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosMeshControlPresent(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosMeshControlPresent();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosTxopLimit(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetMoreFragments();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosAmsdu();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCfPoll(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCfPoll();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetInstanceTypeId(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSerializedSize(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosEosp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsToDs(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsToDs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAction();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsDeauthentication(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDeauthentication();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCfAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCfAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetRawDuration(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRawDuration();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCtl(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCtl();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsDisassociation(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDisassociation();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetFragmentNumber(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frag;
    const char *keywords[] = {"frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frag)) {
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFragmentNumber(frag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetType(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    ns3::WifiMacType retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosNoAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosNoAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAssocResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAssocResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetRetry();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoEosp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBeacon(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBeacon();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRetry();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsFrom(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsFrom();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetDuration(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr2(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr2(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCts(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetType(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiMacType type;
    bool resetToDsFromDs;
    PyObject *py_resetToDsFromDs = NULL;
    const char *keywords[] = {"type", "resetToDsFromDs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i|O", (char **) keywords, &type, &py_resetToDsFromDs)) {
        return NULL;
    }
    resetToDsFromDs = py_resetToDsFromDs? (bool) PyObject_IsTrue(py_resetToDsFromDs) : true;
    self->obj->SetType(type, resetToDsFromDs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsNotFrom(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsNotFrom();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsProbeResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsProbeResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMacHeader__copy__(PyNs3WifiMacHeader *self)
{

    PyNs3WifiMacHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiMacHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMacHeader_methods[] = {
    {(char *) "SetNoRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetNoRetry, METH_NOARGS, "SetNoRetry()\n\n" },
    {(char *) "GetAddr4", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr4, METH_NOARGS, "GetAddr4()\n\n" },
    {(char *) "GetAddr3", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr3, METH_NOARGS, "GetAddr3()\n\n" },
    {(char *) "GetAddr2", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr2, METH_NOARGS, "GetAddr2()\n\n" },
    {(char *) "GetAddr1", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr1, METH_NOARGS, "GetAddr1()\n\n" },
    {(char *) "SetDsNotTo", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsNotTo, METH_NOARGS, "SetDsNotTo()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "HasData", (PyCFunction) _wrap_PyNs3WifiMacHeader_HasData, METH_NOARGS, "HasData()\n\n" },
    {(char *) "SetSequenceNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetSequenceNumber, METH_KEYWORDS|METH_VARARGS, "SetSequenceNumber(seq)\n\ntype: seq: uint16_t" },
    {(char *) "IsBlockAckReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBlockAckReq, METH_NOARGS, "IsBlockAckReq()\n\n" },
    {(char *) "IsAssocReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAssocReq, METH_NOARGS, "IsAssocReq()\n\n" },
    {(char *) "SetQosAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosAmsdu, METH_NOARGS, "SetQosAmsdu()\n\n" },
    {(char *) "SetQosTid", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosTid, METH_KEYWORDS|METH_VARARGS, "SetQosTid(tid)\n\ntype: tid: uint8_t" },
    {(char *) "IsQosData", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosData, METH_NOARGS, "IsQosData()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiMacHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetAddr3", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr3, METH_KEYWORDS|METH_VARARGS, "SetAddr3(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "IsMgt", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMgt, METH_NOARGS, "IsMgt()\n\n" },
    {(char *) "IsData", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsData, METH_NOARGS, "IsData()\n\n" },
    {(char *) "SetDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDuration, METH_KEYWORDS|METH_VARARGS, "SetDuration(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SetAddr1", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr1, METH_KEYWORDS|METH_VARARGS, "SetAddr1(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetQosNoAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoAmsdu, METH_NOARGS, "SetQosNoAmsdu()\n\n" },
    {(char *) "SetAddr4", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr4, METH_KEYWORDS|METH_VARARGS, "SetAddr4(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "IsBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBlockAck, METH_NOARGS, "IsBlockAck()\n\n" },
    {(char *) "SetNoMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetNoMoreFragments, METH_NOARGS, "SetNoMoreFragments()\n\n" },
    {(char *) "IsReassocResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsReassocResp, METH_NOARGS, "IsReassocResp()\n\n" },
    {(char *) "IsProbeReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsProbeReq, METH_NOARGS, "IsProbeReq()\n\n" },
    {(char *) "GetSequenceNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSequenceNumber, METH_NOARGS, "GetSequenceNumber()\n\n" },
    {(char *) "SetQosNoMeshControlPresent", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoMeshControlPresent, METH_NOARGS, "SetQosNoMeshControlPresent()\n\n" },
    {(char *) "IsRts", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsRts, METH_NOARGS, "IsRts()\n\n" },
    {(char *) "IsCfEnd", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCfEnd, METH_NOARGS, "IsCfEnd()\n\n" },
    {(char *) "SetId", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetId, METH_KEYWORDS|METH_VARARGS, "SetId(id)\n\ntype: id: uint16_t" },
    {(char *) "IsMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMoreFragments, METH_NOARGS, "IsMoreFragments()\n\n" },
    {(char *) "GetFragmentNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetFragmentNumber, METH_NOARGS, "GetFragmentNumber()\n\n" },
    {(char *) "IsFromDs", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsFromDs, METH_NOARGS, "IsFromDs()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetQosAckPolicy", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosAckPolicy, METH_KEYWORDS|METH_VARARGS, "SetQosAckPolicy(policy)\n\ntype: policy: ns3::WifiMacHeader::QosAckPolicy" },
    {(char *) "SetDsTo", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsTo, METH_NOARGS, "SetDsTo()\n\n" },
    {(char *) "IsAuthentication", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAuthentication, METH_NOARGS, "IsAuthentication()\n\n" },
    {(char *) "IsAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAck, METH_NOARGS, "IsAck()\n\n" },
    {(char *) "GetTypeString", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetTypeString, METH_NOARGS, "GetTypeString()\n\n" },
    {(char *) "GetSequenceControl", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSequenceControl, METH_NOARGS, "GetSequenceControl()\n\n" },
    {(char *) "SetQosEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosEosp, METH_NOARGS, "SetQosEosp()\n\n" },
    {(char *) "IsMultihopAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMultihopAction, METH_NOARGS, "IsMultihopAction()\n\n" },
    {(char *) "GetQosTid", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetQosTid, METH_NOARGS, "GetQosTid()\n\n" },
    {(char *) "SetRawDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetRawDuration, METH_KEYWORDS|METH_VARARGS, "SetRawDuration(duration)\n\ntype: duration: uint16_t" },
    {(char *) "SetNoOrder", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetNoOrder, METH_NOARGS, "SetNoOrder()\n\n" },
    {(char *) "SetOrder", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetOrder, METH_NOARGS, "SetOrder()\n\n" },
    {(char *) "IsReassocReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsReassocReq, METH_NOARGS, "IsReassocReq()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiMacHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetQosMeshControlPresent", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosMeshControlPresent, METH_NOARGS, "SetQosMeshControlPresent()\n\n" },
    {(char *) "SetQosTxopLimit", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetQosTxopLimit(txop)\n\ntype: txop: uint8_t" },
    {(char *) "SetMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetMoreFragments, METH_NOARGS, "SetMoreFragments()\n\n" },
    {(char *) "IsQosAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosAmsdu, METH_NOARGS, "IsQosAmsdu()\n\n" },
    {(char *) "IsQosBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosBlockAck, METH_NOARGS, "IsQosBlockAck()\n\n" },
    {(char *) "IsCfPoll", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCfPoll, METH_NOARGS, "IsCfPoll()\n\n" },
    {(char *) "IsQosAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosAck, METH_NOARGS, "IsQosAck()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "IsQosEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosEosp, METH_NOARGS, "IsQosEosp()\n\n" },
    {(char *) "IsToDs", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsToDs, METH_NOARGS, "IsToDs()\n\n" },
    {(char *) "IsAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAction, METH_NOARGS, "IsAction()\n\n" },
    {(char *) "IsDeauthentication", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsDeauthentication, METH_NOARGS, "IsDeauthentication()\n\n" },
    {(char *) "IsCfAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCfAck, METH_NOARGS, "IsCfAck()\n\n" },
    {(char *) "GetRawDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetRawDuration, METH_NOARGS, "GetRawDuration()\n\n" },
    {(char *) "IsCtl", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCtl, METH_NOARGS, "IsCtl()\n\n" },
    {(char *) "IsDisassociation", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsDisassociation, METH_NOARGS, "IsDisassociation()\n\n" },
    {(char *) "SetFragmentNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetFragmentNumber, METH_KEYWORDS|METH_VARARGS, "SetFragmentNumber(frag)\n\ntype: frag: uint8_t" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "IsQosNoAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosNoAck, METH_NOARGS, "IsQosNoAck()\n\n" },
    {(char *) "IsAssocResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAssocResp, METH_NOARGS, "IsAssocResp()\n\n" },
    {(char *) "SetRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetRetry, METH_NOARGS, "SetRetry()\n\n" },
    {(char *) "SetQosNoEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoEosp, METH_NOARGS, "SetQosNoEosp()\n\n" },
    {(char *) "IsBeacon", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBeacon, METH_NOARGS, "IsBeacon()\n\n" },
    {(char *) "IsRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsRetry, METH_NOARGS, "IsRetry()\n\n" },
    {(char *) "SetDsFrom", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsFrom, METH_NOARGS, "SetDsFrom()\n\n" },
    {(char *) "GetDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetDuration, METH_NOARGS, "GetDuration()\n\n" },
    {(char *) "SetAddr2", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr2, METH_KEYWORDS|METH_VARARGS, "SetAddr2(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "IsCts", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCts, METH_NOARGS, "IsCts()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type, resetToDsFromDs)\n\ntype: type: ns3::WifiMacType\ntype: resetToDsFromDs: bool" },
    {(char *) "SetDsNotFrom", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsNotFrom, METH_NOARGS, "SetDsNotFrom()\n\n" },
    {(char *) "IsProbeResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsProbeResp, METH_NOARGS, "IsProbeResp()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMacHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMacHeader__tp_clear(PyNs3WifiMacHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiMacHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiMacHeader__tp_traverse(PyNs3WifiMacHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiMacHeader__tp_dealloc(PyNs3WifiMacHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMacHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacHeader__tp_richcompare (PyNs3WifiMacHeader *PYBINDGEN_UNUSED(self), PyNs3WifiMacHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMacHeader",            /* tp_name */
    sizeof(PyNs3WifiMacHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiMacHeader(arg0)\nWifiMacHeader()",                        /* Documentation string */
    (traverseproc)PyNs3WifiMacHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMacHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMacHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiMacQueueItem__tp_init(PyNs3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3WifiMacHeader *header;
    const char *keywords[] = {"p", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &p, &PyNs3WifiMacHeader_Type, &header)) {
        return -1;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj = new ns3::WifiMacQueueItem(ns3::Ptr< ns3::Packet  > (p_ptr), *((PyNs3WifiMacHeader *) header)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3WifiMacQueueItem_GetTimeStamp(PyNs3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueueItem_GetDestinationAddress(PyNs3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetDestinationAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueueItem_GetHeader(PyNs3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    ns3::WifiMacHeader const & retval = self->obj->GetHeader();
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = Py_BuildValue((char *) "N", py_WifiMacHeader);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueueItem_GetPacket(PyNs3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueueItem_GetSize(PyNs3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3WifiMacQueueItem_methods[] = {
    {(char *) "GetTimeStamp", (PyCFunction) _wrap_PyNs3WifiMacQueueItem_GetTimeStamp, METH_NOARGS, "GetTimeStamp()\n\n" },
    {(char *) "GetDestinationAddress", (PyCFunction) _wrap_PyNs3WifiMacQueueItem_GetDestinationAddress, METH_NOARGS, "GetDestinationAddress()\n\n" },
    {(char *) "GetHeader", (PyCFunction) _wrap_PyNs3WifiMacQueueItem_GetHeader, METH_NOARGS, "GetHeader()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3WifiMacQueueItem_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3WifiMacQueueItem_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiMacQueueItem__tp_dealloc(PyNs3WifiMacQueueItem *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiMacQueueItem *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacQueueItem__tp_richcompare (PyNs3WifiMacQueueItem *PYBINDGEN_UNUSED(self), PyNs3WifiMacQueueItem *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacQueueItem_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacQueueItem_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMacQueueItem",            /* tp_name */
    sizeof(PyNs3WifiMacQueueItem),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacQueueItem__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiMacQueueItem(p, header)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacQueueItem__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacQueueItem_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacQueueItem__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiMacTrailer__tp_init__0(PyNs3WifiMacTrailer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMacTrailer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacTrailer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMacTrailer(*((PyNs3WifiMacTrailer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiMacTrailer__tp_init__1(PyNs3WifiMacTrailer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMacTrailer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiMacTrailer__tp_init(PyNs3WifiMacTrailer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacTrailer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacTrailer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMacTrailer_GetSerializedSize(PyNs3WifiMacTrailer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacTrailer_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMacTrailer::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacTrailer_Serialize(PyNs3WifiMacTrailer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacTrailer_Deserialize(PyNs3WifiMacTrailer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacTrailer_GetInstanceTypeId(PyNs3WifiMacTrailer *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMacTrailer__copy__(PyNs3WifiMacTrailer *self)
{

    PyNs3WifiMacTrailer *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiMacTrailer, &PyNs3WifiMacTrailer_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WifiMacTrailer(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMacTrailer_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiMacTrailer_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMacTrailer_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiMacTrailer_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiMacTrailer_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiMacTrailer_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMacTrailer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMacTrailer__tp_clear(PyNs3WifiMacTrailer *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiMacTrailer *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiMacTrailer__tp_traverse(PyNs3WifiMacTrailer *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiMacTrailer__tp_dealloc(PyNs3WifiMacTrailer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMacTrailer__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacTrailer__tp_richcompare (PyNs3WifiMacTrailer *PYBINDGEN_UNUSED(self), PyNs3WifiMacTrailer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacTrailer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacTrailer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMacTrailer",            /* tp_name */
    sizeof(PyNs3WifiMacTrailer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacTrailer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiMacTrailer(arg0)\nWifiMacTrailer()",                        /* Documentation string */
    (traverseproc)PyNs3WifiMacTrailer__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMacTrailer__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacTrailer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacTrailer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMacTrailer, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacTrailer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_DoInitialize(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_DoChannelSwitch(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int id;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoChannelSwitch of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->DoChannelSwitch__parent_caller(id);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_SwitchMaybeToCcaBusy(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SwitchMaybeToCcaBusy of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SwitchMaybeToCcaBusy__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_DoDispose(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiPhy__PythonHelper::_wrap_DoFrequencySwitch(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int frequency;
    PyNs3WifiPhy__PythonHelper *helper = dynamic_cast< PyNs3WifiPhy__PythonHelper* >(self->obj);
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frequency)) {
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoFrequencySwitch of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->DoFrequencySwitch__parent_caller(frequency);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

int64_t
PyNs3WifiPhy__PythonHelper::AssignStreams(int64_t stream)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AssignStreams"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AssignStreams", (char *) "L", stream);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiPhy__PythonHelper::ConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::ConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::Channel >
PyNs3WifiPhy__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = const_cast< ns3::WifiPhy* >((const ns3::WifiPhy*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiPhy__PythonHelper::SetChannelNumber(uint8_t id)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetChannelNumber(id);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelNumber", (char *) "i", (int) id);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::SetChannelWidth(uint16_t channelwidth)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelWidth"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetChannelWidth(channelwidth);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelWidth", (char *) "i", (int) channelwidth);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::SetFrequency(uint16_t freq)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetFrequency"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetFrequency(freq);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetFrequency", (char *) "i", (int) freq);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::StartTx(ns3::Ptr< ns3::Packet > packet, ns3::WifiTxVector txVector, ns3::Time txDuration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiTxVector *py_WifiTxVector;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartTx"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(txDuration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartTx", (char *) "NNN", py_Packet, py_WifiTxVector, py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WifiPhy__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiPhy__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhy__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiPhy__tp_init__0(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhy *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhy_Type)
    {
        self->obj = new PyNs3WifiPhy__PythonHelper(*((PyNs3WifiPhy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhy' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiPhy__tp_init__1(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiPhy_Type)
    {
        self->obj = new PyNs3WifiPhy__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhy' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiPhy__tp_init(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhy__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhy__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhy_SetShortPlcpPreambleSupported(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool preamble;
    PyObject *py_preamble;
    const char *keywords[] = {"preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_preamble)) {
        return NULL;
    }
    preamble = (bool) PyObject_IsTrue(py_preamble);
    self->obj->SetShortPlcpPreambleSupported(preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetNTxPower(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &n)) {
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNTxPower(n);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetRxGain(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGain();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetBssMembershipSelector(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    int selector;
    const char *keywords[] = {"selector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &selector)) {
        return NULL;
    }
    if (selector > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetBssMembershipSelector(selector);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetLdpc(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool ldpc;
    PyObject *py_ldpc;
    const char *keywords[] = {"ldpc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_ldpc)) {
        return NULL;
    }
    ldpc = (bool) PyObject_IsTrue(py_ldpc);
    self->obj->SetLdpc(ldpc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs7(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs7();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNMcs(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNMcs();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate24Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate24Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateSwitching(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSwitching();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate24Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate24Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate4_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate27MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate27MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetNumberOfAntennas(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int antennas;
    const char *keywords[] = {"antennas", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &antennas)) {
        return NULL;
    }
    if (antennas > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNumberOfAntennas(antennas);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpSigBDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamble)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpSigBDuration(preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNBssMembershipSelectors(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNBssMembershipSelectors();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMcs(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetMcs(mcs);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetTxGain(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetTxGain(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannelSwitchDelay(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetChannelSwitchDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpHeaderMode(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    ns3::WifiMode retval = ns3::WifiPhy::GetPlcpHeaderMode(*((PyNs3WifiTxVector *) txVector)->obj);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate6Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate6Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDelayUntilIdle(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelayUntilIdle();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs1(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs1();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs27(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs27();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetCcaMode1Threshold(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaMode1Threshold();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate18Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate18Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs10(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs10();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetCapabilitiesChangedCallback(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetCapabilitiesChangedCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateTx(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetSupportedChannelWidthSet(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    std::vector< unsigned short > retval;
    Pystd__vector__lt___unsigned_short___gt__ *py_std__vector__lt___unsigned_short___gt__;
    
    retval = self->obj->GetSupportedChannelWidthSet();
    py_std__vector__lt___unsigned_short___gt__ = PyObject_New(Pystd__vector__lt___unsigned_short___gt__, &Pystd__vector__lt___unsigned_short___gt___Type);
    py_std__vector__lt___unsigned_short___gt__->obj = new std::vector< unsigned short >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___unsigned_short___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetEdThreshold(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetEdThreshold();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_StartReceivePreambleAndHeader(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxPowerW;
    PyNs3Time *rxDuration;
    const char *keywords[] = {"packet", "rxPowerW", "rxDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &packet, &rxPowerW, &PyNs3Time_Type, &rxDuration)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->StartReceivePreambleAndHeader(ns3::Ptr< ns3::Packet  > (packet_ptr), rxPowerW, *((PyNs3Time *) rxDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetRxNoiseFigure(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double noiseFigureDb;
    const char *keywords[] = {"noiseFigureDb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &noiseFigureDb)) {
        return NULL;
    }
    self->obj->SetRxNoiseFigure(noiseFigureDb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxBegin(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxBegin(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate18Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate18Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs30(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs30();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs31(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs31();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetOffMode(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    
    self->obj->SetOffMode();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs29(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs29();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate12Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate12Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs0(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs0();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs3(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs3();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs2(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs2();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs5(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs5();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs4(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs4();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate54Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate54Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs6(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs6();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs9(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs9();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtMcs8(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtMcs8();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsModeSupported(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    retval = self->obj->IsModeSupported(*((PyNs3WifiMode *) mode)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate3MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetStbc(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetStbc();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyMonitorSniffTx(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    PyNs3WifiTxVector *txVector;
    PyNs3MpduInfo *aMpdu;
    const char *keywords[] = {"packet", "channelFreqMhz", "txVector", "aMpdu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &channelFreqMhz, &PyNs3WifiTxVector_Type, &txVector, &PyNs3MpduInfo_Type, &aMpdu)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyMonitorSniffTx(ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3MpduInfo *) aMpdu)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetRxGain(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGain(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMobility(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MobilityModel > retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMobility();
    if (!(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
    {
        py_MobilityModel = reinterpret_cast< PyNs3MobilityModel* >(reinterpret_cast< PyNs3MobilityModel__PythonHelper* >(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
    
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MobilityModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetChannelWidth(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelwidth;
    PyNs3WifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3WifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"channelwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelwidth)) {
        return NULL;
    }
    if (channelwidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetChannelWidth(channelwidth)) : (self->obj->ns3::WifiPhy::SetChannelWidth(channelwidth));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxEnd(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxEnd(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetGreenfield(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool greenfield;
    PyObject *py_greenfield;
    const char *keywords[] = {"greenfield", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_greenfield)) {
        return NULL;
    }
    greenfield = (bool) PyObject_IsTrue(py_greenfield);
    self->obj->SetGreenfield(greenfield);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateOff(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateOff();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpTrainingSymbolDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpTrainingSymbolDuration(*((PyNs3WifiTxVector *) txVector)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxEnd(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxEnd(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_DefineChannelNumber(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int channelNumber;
    ns3::WifiPhyStandard standard;
    int frequency;
    int channelWidth;
    const char *keywords[] = {"channelNumber", "standard", "frequency", "channelWidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiii", (char **) keywords, &channelNumber, &standard, &frequency, &channelWidth)) {
        return NULL;
    }
    if (channelNumber > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (channelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DefineChannelNumber(channelNumber, standard, frequency, channelWidth);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs28(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs28();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs11(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs11();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs26(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs26();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs25(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs25();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs24(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs24();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs23(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs23();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs22(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs22();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs21(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs21();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs20(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs20();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs9(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs9();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs8(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs8();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs1(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs1();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs0(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs0();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs3(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs3();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs2(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs2();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs5(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs5();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs4(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs4();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs7(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs7();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHeMcs6(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHeMcs6();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate2_25MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate2_25MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtPlcpHeaderMode(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtPlcpHeaderMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate36Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate36Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate24MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate24MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_CalculateSnr(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiTxVector *txVector;
    double ber;
    const char *keywords[] = {"txVector", "ber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector, &ber)) {
        return NULL;
    }
    retval = self->obj->CalculateSnr(*((PyNs3WifiTxVector *) txVector)->obj, ber);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate36Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate36Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetChannelNumber(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    PyNs3WifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3WifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetChannelNumber(id)) : (self->obj->ns3::WifiPhy::SetChannelNumber(id));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannel(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_AddSupportedChannelWidth(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelwidth;
    const char *keywords[] = {"channelwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelwidth)) {
        return NULL;
    }
    if (channelwidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddSupportedChannelWidth(channelwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetTxPowerStart(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &start)) {
        return NULL;
    }
    self->obj->SetTxPowerStart(start);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate18MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate18MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiPhy_GetPayloadDuration__0(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiTxVector *txVector;
    int frequency;
    const char *keywords[] = {"size", "txVector", "frequency", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &size, &PyNs3WifiTxVector_Type, &txVector, &frequency)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->GetPayloadDuration(size, *((PyNs3WifiTxVector *) txVector)->obj, frequency);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhy_GetPayloadDuration__1(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiTxVector *txVector;
    int frequency;
    ns3::MpduType mpdutype;
    int incFlag;
    const char *keywords[] = {"size", "txVector", "frequency", "mpdutype", "incFlag", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!iii", (char **) keywords, &size, &PyNs3WifiTxVector_Type, &txVector, &frequency, &mpdutype, &incFlag)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (incFlag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->GetPayloadDuration(size, *((PyNs3WifiTxVector *) txVector)->obj, frequency, mpdutype, incFlag);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiPhy_GetPayloadDuration(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhy_GetPayloadDuration__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhy_GetPayloadDuration__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpSigA1Duration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamble)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpSigA1Duration(preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTxGain(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxGain();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate2Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate2Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateSleep(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSleep();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetEdThreshold(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetEdThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_StartReceivePacket(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    ns3::MpduType mpdutype;
    PyNs3Event *event;
    ns3::Event *event_ptr;
    const char *keywords[] = {"packet", "txVector", "mpdutype", "event", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &mpdutype, &PyNs3Event_Type, &event)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    event_ptr = (event ? event->obj : NULL);
    self->obj->StartReceivePacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, mpdutype, ns3::Ptr< ns3::Event  > (event_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetLdpc(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetLdpc();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_CalculatePlcpPreambleAndHeaderDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::CalculatePlcpPreambleAndHeaderDuration(*((PyNs3WifiTxVector *) txVector)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyMonitorSniffRx(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    PyNs3WifiTxVector *txVector;
    PyNs3MpduInfo *aMpdu;
    PyNs3SignalNoiseDbm *signalNoise;
    const char *keywords[] = {"packet", "channelFreqMhz", "txVector", "aMpdu", "signalNoise", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &channelFreqMhz, &PyNs3WifiTxVector_Type, &txVector, &PyNs3MpduInfo_Type, &aMpdu, &PyNs3SignalNoiseDbm_Type, &signalNoise)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyMonitorSniffRx(ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3MpduInfo *) aMpdu)->obj, *((PyNs3SignalNoiseDbm *) signalNoise)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxBegin(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxBegin(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannelNumber(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelNumber();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate11Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate11Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetVhtPlcpHeaderMode(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetVhtPlcpHeaderMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpPreambleDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpPreambleDuration(*((PyNs3WifiTxVector *) txVector)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetMaxSupportedRxSpatialStreams(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int streams;
    const char *keywords[] = {"streams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &streams)) {
        return NULL;
    }
    if (streams > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxSupportedRxSpatialStreams(streams);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetShortPlcpPreambleSupported(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortPlcpPreambleSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxDrop(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate5_5Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate5_5Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpSigA2Duration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamble)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpSigA2Duration(preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNModes(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetSleepMode(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    
    self->obj->SetSleepMode();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate48Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate48Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpHeaderDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpHeaderDuration(*((PyNs3WifiTxVector *) txVector)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_ConfigureStandard(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3WifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3WifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->ConfigureStandard(standard)) : (self->obj->ns3::WifiPhy::ConfigureStandard(standard));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTxPowerEnd(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerEnd();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsMcsSupported(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMode *mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mcs)) {
        return NULL;
    }
    retval = self->obj->IsMcsSupported(*((PyNs3WifiMode *) mcs)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPlcpHtSigHeaderDuration(PyNs3WifiPhy *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamble)) {
        return NULL;
    }
    ns3::Time retval = ns3::WifiPhy::GetPlcpHtSigHeaderDuration(preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SendPacket(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    ns3::MpduType mpdutype = ::ns3::MpduType::NORMAL_MPDU;
    const char *keywords[] = {"packet", "txVector", "mpdutype", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!|i", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &mpdutype)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, mpdutype);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHePlcpHeaderMode(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHePlcpHeaderMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetShortGuardInterval(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortGuardInterval();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMode(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int mode;
    const char *keywords[] = {"mode", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mode)) {
        return NULL;
    }
    if (mode > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetMode(mode);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetErpOfdmRate9Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetErpOfdmRate9Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNTxPower(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNTxPower();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate54Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate54Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMaxSupportedRxSpatialStreams(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxSupportedRxSpatialStreams();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_AssignStreams(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    PyNs3WifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3WifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->AssignStreams(stream)) : (self->obj->ns3::WifiPhy::AssignStreams(stream));
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetMaxSupportedTxSpatialStreams(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int streams;
    const char *keywords[] = {"streams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &streams)) {
        return NULL;
    }
    if (streams > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxSupportedTxSpatialStreams(streams);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiPhy_CalculateTxDuration__0(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiTxVector *txVector;
    int frequency;
    const char *keywords[] = {"size", "txVector", "frequency", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &size, &PyNs3WifiTxVector_Type, &txVector, &frequency)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->CalculateTxDuration(size, *((PyNs3WifiTxVector *) txVector)->obj, frequency);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiPhy_CalculateTxDuration__1(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiTxVector *txVector;
    int frequency;
    ns3::MpduType mpdutype;
    int incFlag;
    const char *keywords[] = {"size", "txVector", "frequency", "mpdutype", "incFlag", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!iii", (char **) keywords, &size, &PyNs3WifiTxVector_Type, &txVector, &frequency, &mpdutype, &incFlag)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (frequency > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (incFlag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->CalculateTxDuration(size, *((PyNs3WifiTxVector *) txVector)->obj, frequency, mpdutype, incFlag);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiPhy_CalculateTxDuration(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhy_CalculateTxDuration__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhy_CalculateTxDuration__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiPhy_ResumeFromOff(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    
    self->obj->ResumeFromOff();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate13_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate13_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs16(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs16();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs17(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs17();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs14(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs14();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs15(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs15();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs12(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs12();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs13(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs13();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs10(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs10();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs11(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs11();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetReceiveErrorCallback(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl20> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl20> (callback);
    self->obj->SetReceiveErrorCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetStbc(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool stbc;
    PyObject *py_stbc;
    const char *keywords[] = {"stbc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_stbc)) {
        return NULL;
    }
    stbc = (bool) PyObject_IsTrue(py_stbc);
    self->obj->SetStbc(stbc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_EndReceive(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    ns3::WifiPreamble preamble;
    ns3::MpduType mpdutype;
    PyNs3Event *event;
    ns3::Event *event_ptr;
    const char *keywords[] = {"packet", "preamble", "mpdutype", "event", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!", (char **) keywords, &PyNs3Packet_Type, &packet, &preamble, &mpdutype, &PyNs3Event_Type, &event)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    event_ptr = (event ? event->obj : NULL);
    self->obj->EndReceive(ns3::Ptr< ns3::Packet  > (packet_ptr), preamble, mpdutype, ns3::Ptr< ns3::Event  > (event_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs18(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs18();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs19(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs19();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetStandard(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard retval;
    
    retval = self->obj->GetStandard();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs8(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs8();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs9(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs9();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetFrequency(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int freq;
    PyNs3WifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3WifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"freq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &freq)) {
        return NULL;
    }
    if (freq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetFrequency(freq)) : (self->obj->ns3::WifiPhy::SetFrequency(freq));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs4(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs4();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs5(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs5();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs6(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs6();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs7(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs7();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs0(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs0();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs1(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs1();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs2(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs2();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetHtMcs3(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetHtMcs3();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannelWidth(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetChannelWidth();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetPowerDbm(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    int power;
    const char *keywords[] = {"power", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &power)) {
        return NULL;
    }
    if (power > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetPowerDbm(power);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate3MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_StartTx(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    PyNs3Time *txDuration;
    const char *keywords[] = {"packet", "txVector", "txDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &PyNs3Time_Type, &txDuration)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->StartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) txDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTxPowerStart(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerStart();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetFrequency(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetFrequency();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetTxPowerEnd(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double end;
    const char *keywords[] = {"end", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &end)) {
        return NULL;
    }
    self->obj->SetTxPowerEnd(end);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetLastRxStartTime(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastRxStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetGuardInterval(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *guardInterval;
    const char *keywords[] = {"guardInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &guardInterval)) {
        return NULL;
    }
    self->obj->SetGuardInterval(*((PyNs3Time *) guardInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateRx(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetGreenfield(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetGreenfield();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMaxSupportedTxSpatialStreams(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxSupportedTxSpatialStreams();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetShortGuardInterval(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool shortGuardInterval;
    PyObject *py_shortGuardInterval;
    const char *keywords[] = {"shortGuardInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_shortGuardInterval)) {
        return NULL;
    }
    shortGuardInterval = (bool) PyObject_IsTrue(py_shortGuardInterval);
    self->obj->SetShortGuardInterval(shortGuardInterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetGuardInterval(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetGuardInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate1Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate1Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDevice(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate4_5MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNumberOfAntennas(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNumberOfAntennas();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetReceiveOkCallback(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl19> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl19> (callback);
    self->obj->SetReceiveOkCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetCcaMode1Threshold(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetCcaMode1Threshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate48Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate48Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateIdle(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateCcaBusy(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_ResumeFromSleep(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    
    self->obj->ResumeFromSleep();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate1_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate1_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxDrop(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiPhy_methods[] = {
    {(char *) "SetShortPlcpPreambleSupported", (PyCFunction) _wrap_PyNs3WifiPhy_SetShortPlcpPreambleSupported, METH_KEYWORDS|METH_VARARGS, "SetShortPlcpPreambleSupported(preamble)\n\ntype: preamble: bool" },
    {(char *) "SetNTxPower", (PyCFunction) _wrap_PyNs3WifiPhy_SetNTxPower, METH_KEYWORDS|METH_VARARGS, "SetNTxPower(n)\n\ntype: n: uint8_t" },
    {(char *) "GetRxGain", (PyCFunction) _wrap_PyNs3WifiPhy_GetRxGain, METH_NOARGS, "GetRxGain()\n\n" },
    {(char *) "GetBssMembershipSelector", (PyCFunction) _wrap_PyNs3WifiPhy_GetBssMembershipSelector, METH_KEYWORDS|METH_VARARGS, "GetBssMembershipSelector(selector)\n\ntype: selector: uint8_t" },
    {(char *) "SetLdpc", (PyCFunction) _wrap_PyNs3WifiPhy_SetLdpc, METH_KEYWORDS|METH_VARARGS, "SetLdpc(ldpc)\n\ntype: ldpc: bool" },
    {(char *) "GetVhtMcs7", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs7, METH_NOARGS|METH_STATIC, "GetVhtMcs7()\n\n" },
    {(char *) "GetNMcs", (PyCFunction) _wrap_PyNs3WifiPhy_GetNMcs, METH_NOARGS, "GetNMcs()\n\n" },
    {(char *) "GetErpOfdmRate24Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate24Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate24Mbps()\n\n" },
    {(char *) "IsStateSwitching", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateSwitching, METH_NOARGS, "IsStateSwitching()\n\n" },
    {(char *) "GetOfdmRate24Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate24Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate24Mbps()\n\n" },
    {(char *) "GetOfdmRate4_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate4_5MbpsBW5MHz()\n\n" },
    {(char *) "GetOfdmRate27MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate27MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate27MbpsBW10MHz()\n\n" },
    {(char *) "SetNumberOfAntennas", (PyCFunction) _wrap_PyNs3WifiPhy_SetNumberOfAntennas, METH_KEYWORDS|METH_VARARGS, "SetNumberOfAntennas(antennas)\n\ntype: antennas: uint8_t" },
    {(char *) "GetPlcpSigBDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpSigBDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpSigBDuration(preamble)\n\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "GetNBssMembershipSelectors", (PyCFunction) _wrap_PyNs3WifiPhy_GetNBssMembershipSelectors, METH_NOARGS, "GetNBssMembershipSelectors()\n\n" },
    {(char *) "GetMcs", (PyCFunction) _wrap_PyNs3WifiPhy_GetMcs, METH_KEYWORDS|METH_VARARGS, "GetMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetTxGain", (PyCFunction) _wrap_PyNs3WifiPhy_SetTxGain, METH_KEYWORDS|METH_VARARGS, "SetTxGain(gain)\n\ntype: gain: double" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiPhy_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetChannelSwitchDelay", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannelSwitchDelay, METH_NOARGS, "GetChannelSwitchDelay()\n\n" },
    {(char *) "GetPlcpHeaderMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpHeaderMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpHeaderMode(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "GetErpOfdmRate6Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate6Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate6Mbps()\n\n" },
    {(char *) "GetDelayUntilIdle", (PyCFunction) _wrap_PyNs3WifiPhy_GetDelayUntilIdle, METH_NOARGS, "GetDelayUntilIdle()\n\n" },
    {(char *) "GetVhtMcs1", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs1, METH_NOARGS|METH_STATIC, "GetVhtMcs1()\n\n" },
    {(char *) "GetHtMcs27", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs27, METH_NOARGS|METH_STATIC, "GetHtMcs27()\n\n" },
    {(char *) "GetCcaMode1Threshold", (PyCFunction) _wrap_PyNs3WifiPhy_GetCcaMode1Threshold, METH_NOARGS, "GetCcaMode1Threshold()\n\n" },
    {(char *) "GetErpOfdmRate18Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate18Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate18Mbps()\n\n" },
    {(char *) "GetHeMcs10", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs10, METH_NOARGS|METH_STATIC, "GetHeMcs10()\n\n" },
    {(char *) "SetCapabilitiesChangedCallback", (PyCFunction) _wrap_PyNs3WifiPhy_SetCapabilitiesChangedCallback, METH_KEYWORDS|METH_VARARGS, "SetCapabilitiesChangedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateTx, METH_NOARGS, "IsStateTx()\n\n" },
    {(char *) "GetSupportedChannelWidthSet", (PyCFunction) _wrap_PyNs3WifiPhy_GetSupportedChannelWidthSet, METH_NOARGS, "GetSupportedChannelWidthSet()\n\n" },
    {(char *) "GetEdThreshold", (PyCFunction) _wrap_PyNs3WifiPhy_GetEdThreshold, METH_NOARGS, "GetEdThreshold()\n\n" },
    {(char *) "StartReceivePreambleAndHeader", (PyCFunction) _wrap_PyNs3WifiPhy_StartReceivePreambleAndHeader, METH_KEYWORDS|METH_VARARGS, "StartReceivePreambleAndHeader(packet, rxPowerW, rxDuration)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: rxPowerW: double\ntype: rxDuration: ns3::Time" },
    {(char *) "SetRxNoiseFigure", (PyCFunction) _wrap_PyNs3WifiPhy_SetRxNoiseFigure, METH_KEYWORDS|METH_VARARGS, "SetRxNoiseFigure(noiseFigureDb)\n\ntype: noiseFigureDb: double" },
    {(char *) "NotifyTxBegin", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxBegin, METH_KEYWORDS|METH_VARARGS, "NotifyTxBegin(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetOfdmRate18Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate18Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate18Mbps()\n\n" },
    {(char *) "GetHtMcs30", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs30, METH_NOARGS|METH_STATIC, "GetHtMcs30()\n\n" },
    {(char *) "GetHtMcs31", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs31, METH_NOARGS|METH_STATIC, "GetHtMcs31()\n\n" },
    {(char *) "SetOffMode", (PyCFunction) _wrap_PyNs3WifiPhy_SetOffMode, METH_NOARGS, "SetOffMode()\n\n" },
    {(char *) "GetHtMcs29", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs29, METH_NOARGS|METH_STATIC, "GetHtMcs29()\n\n" },
    {(char *) "GetErpOfdmRate12Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate12Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate12Mbps()\n\n" },
    {(char *) "GetVhtMcs0", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs0, METH_NOARGS|METH_STATIC, "GetVhtMcs0()\n\n" },
    {(char *) "GetVhtMcs3", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs3, METH_NOARGS|METH_STATIC, "GetVhtMcs3()\n\n" },
    {(char *) "GetVhtMcs2", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs2, METH_NOARGS|METH_STATIC, "GetVhtMcs2()\n\n" },
    {(char *) "GetVhtMcs5", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs5, METH_NOARGS|METH_STATIC, "GetVhtMcs5()\n\n" },
    {(char *) "GetVhtMcs4", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs4, METH_NOARGS|METH_STATIC, "GetVhtMcs4()\n\n" },
    {(char *) "GetErpOfdmRate54Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate54Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate54Mbps()\n\n" },
    {(char *) "GetVhtMcs6", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs6, METH_NOARGS|METH_STATIC, "GetVhtMcs6()\n\n" },
    {(char *) "GetVhtMcs9", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs9, METH_NOARGS|METH_STATIC, "GetVhtMcs9()\n\n" },
    {(char *) "GetVhtMcs8", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtMcs8, METH_NOARGS|METH_STATIC, "GetVhtMcs8()\n\n" },
    {(char *) "IsModeSupported", (PyCFunction) _wrap_PyNs3WifiPhy_IsModeSupported, METH_KEYWORDS|METH_VARARGS, "IsModeSupported(mode)\n\ntype: mode: ns3::WifiMode" },
    {(char *) "GetOfdmRate3MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate3MbpsBW5MHz()\n\n" },
    {(char *) "GetStbc", (PyCFunction) _wrap_PyNs3WifiPhy_GetStbc, METH_NOARGS, "GetStbc()\n\n" },
    {(char *) "NotifyMonitorSniffTx", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyMonitorSniffTx, METH_KEYWORDS|METH_VARARGS, "NotifyMonitorSniffTx(packet, channelFreqMhz, txVector, aMpdu)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: channelFreqMhz: uint16_t\ntype: txVector: ns3::WifiTxVector\ntype: aMpdu: ns3::MpduInfo" },
    {(char *) "SetRxGain", (PyCFunction) _wrap_PyNs3WifiPhy_SetRxGain, METH_KEYWORDS|METH_VARARGS, "SetRxGain(gain)\n\ntype: gain: double" },
    {(char *) "GetMobility", (PyCFunction) _wrap_PyNs3WifiPhy_GetMobility, METH_NOARGS, "GetMobility()\n\n" },
    {(char *) "SetChannelWidth", (PyCFunction) _wrap_PyNs3WifiPhy_SetChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetChannelWidth(channelwidth)\n\ntype: channelwidth: uint16_t" },
    {(char *) "NotifyRxEnd", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxEnd, METH_KEYWORDS|METH_VARARGS, "NotifyRxEnd(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetGreenfield", (PyCFunction) _wrap_PyNs3WifiPhy_SetGreenfield, METH_KEYWORDS|METH_VARARGS, "SetGreenfield(greenfield)\n\ntype: greenfield: bool" },
    {(char *) "GetOfdmRate12Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate12Mbps()\n\n" },
    {(char *) "IsStateOff", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateOff, METH_NOARGS, "IsStateOff()\n\n" },
    {(char *) "GetPlcpTrainingSymbolDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpTrainingSymbolDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpTrainingSymbolDuration(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "NotifyTxEnd", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxEnd, METH_KEYWORDS|METH_VARARGS, "NotifyTxEnd(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "DefineChannelNumber", (PyCFunction) _wrap_PyNs3WifiPhy_DefineChannelNumber, METH_KEYWORDS|METH_VARARGS, "DefineChannelNumber(channelNumber, standard, frequency, channelWidth)\n\ntype: channelNumber: uint8_t\ntype: standard: ns3::WifiPhyStandard\ntype: frequency: uint16_t\ntype: channelWidth: uint16_t" },
    {(char *) "GetHtMcs28", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs28, METH_NOARGS|METH_STATIC, "GetHtMcs28()\n\n" },
    {(char *) "GetHeMcs11", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs11, METH_NOARGS|METH_STATIC, "GetHeMcs11()\n\n" },
    {(char *) "GetHtMcs26", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs26, METH_NOARGS|METH_STATIC, "GetHtMcs26()\n\n" },
    {(char *) "GetHtMcs25", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs25, METH_NOARGS|METH_STATIC, "GetHtMcs25()\n\n" },
    {(char *) "GetHtMcs24", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs24, METH_NOARGS|METH_STATIC, "GetHtMcs24()\n\n" },
    {(char *) "GetHtMcs23", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs23, METH_NOARGS|METH_STATIC, "GetHtMcs23()\n\n" },
    {(char *) "GetHtMcs22", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs22, METH_NOARGS|METH_STATIC, "GetHtMcs22()\n\n" },
    {(char *) "GetHtMcs21", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs21, METH_NOARGS|METH_STATIC, "GetHtMcs21()\n\n" },
    {(char *) "GetHtMcs20", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs20, METH_NOARGS|METH_STATIC, "GetHtMcs20()\n\n" },
    {(char *) "GetHeMcs9", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs9, METH_NOARGS|METH_STATIC, "GetHeMcs9()\n\n" },
    {(char *) "GetHeMcs8", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs8, METH_NOARGS|METH_STATIC, "GetHeMcs8()\n\n" },
    {(char *) "GetHeMcs1", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs1, METH_NOARGS|METH_STATIC, "GetHeMcs1()\n\n" },
    {(char *) "GetHeMcs0", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs0, METH_NOARGS|METH_STATIC, "GetHeMcs0()\n\n" },
    {(char *) "GetHeMcs3", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs3, METH_NOARGS|METH_STATIC, "GetHeMcs3()\n\n" },
    {(char *) "GetHeMcs2", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs2, METH_NOARGS|METH_STATIC, "GetHeMcs2()\n\n" },
    {(char *) "GetHeMcs5", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs5, METH_NOARGS|METH_STATIC, "GetHeMcs5()\n\n" },
    {(char *) "GetHeMcs4", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs4, METH_NOARGS|METH_STATIC, "GetHeMcs4()\n\n" },
    {(char *) "GetHeMcs7", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs7, METH_NOARGS|METH_STATIC, "GetHeMcs7()\n\n" },
    {(char *) "GetHeMcs6", (PyCFunction) _wrap_PyNs3WifiPhy_GetHeMcs6, METH_NOARGS|METH_STATIC, "GetHeMcs6()\n\n" },
    {(char *) "GetOfdmRate2_25MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate2_25MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate2_25MbpsBW5MHz()\n\n" },
    {(char *) "GetHtPlcpHeaderMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtPlcpHeaderMode, METH_NOARGS|METH_STATIC, "GetHtPlcpHeaderMode()\n\n" },
    {(char *) "GetErpOfdmRate36Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate36Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate36Mbps()\n\n" },
    {(char *) "GetOfdmRate24MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate24MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate24MbpsBW10MHz()\n\n" },
    {(char *) "CalculateSnr", (PyCFunction) _wrap_PyNs3WifiPhy_CalculateSnr, METH_KEYWORDS|METH_VARARGS, "CalculateSnr(txVector, ber)\n\ntype: txVector: ns3::WifiTxVector\ntype: ber: double" },
    {(char *) "GetOfdmRate36Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate36Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate36Mbps()\n\n" },
    {(char *) "GetOfdmRate12MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate12MbpsBW10MHz()\n\n" },
    {(char *) "SetChannelNumber", (PyCFunction) _wrap_PyNs3WifiPhy_SetChannelNumber, METH_KEYWORDS|METH_VARARGS, "SetChannelNumber(id)\n\ntype: id: uint8_t" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "AddSupportedChannelWidth", (PyCFunction) _wrap_PyNs3WifiPhy_AddSupportedChannelWidth, METH_KEYWORDS|METH_VARARGS, "AddSupportedChannelWidth(channelwidth)\n\ntype: channelwidth: uint16_t" },
    {(char *) "SetTxPowerStart", (PyCFunction) _wrap_PyNs3WifiPhy_SetTxPowerStart, METH_KEYWORDS|METH_VARARGS, "SetTxPowerStart(start)\n\ntype: start: double" },
    {(char *) "GetOfdmRate18MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate18MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate18MbpsBW10MHz()\n\n" },
    {(char *) "GetPayloadDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPayloadDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPlcpSigA1Duration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpSigA1Duration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpSigA1Duration(preamble)\n\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "GetTxGain", (PyCFunction) _wrap_PyNs3WifiPhy_GetTxGain, METH_NOARGS, "GetTxGain()\n\n" },
    {(char *) "GetDsssRate2Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate2Mbps, METH_NOARGS|METH_STATIC, "GetDsssRate2Mbps()\n\n" },
    {(char *) "IsStateSleep", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateSleep, METH_NOARGS, "IsStateSleep()\n\n" },
    {(char *) "SetEdThreshold", (PyCFunction) _wrap_PyNs3WifiPhy_SetEdThreshold, METH_KEYWORDS|METH_VARARGS, "SetEdThreshold(threshold)\n\ntype: threshold: double" },
    {(char *) "StartReceivePacket", (PyCFunction) _wrap_PyNs3WifiPhy_StartReceivePacket, METH_KEYWORDS|METH_VARARGS, "StartReceivePacket(packet, txVector, mpdutype, event)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: txVector: ns3::WifiTxVector\ntype: mpdutype: ns3::MpduType\ntype: event: ns3::Ptr< ns3::Event >" },
    {(char *) "GetLdpc", (PyCFunction) _wrap_PyNs3WifiPhy_GetLdpc, METH_NOARGS, "GetLdpc()\n\n" },
    {(char *) "CalculatePlcpPreambleAndHeaderDuration", (PyCFunction) _wrap_PyNs3WifiPhy_CalculatePlcpPreambleAndHeaderDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "CalculatePlcpPreambleAndHeaderDuration(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "NotifyMonitorSniffRx", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyMonitorSniffRx, METH_KEYWORDS|METH_VARARGS, "NotifyMonitorSniffRx(packet, channelFreqMhz, txVector, aMpdu, signalNoise)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: channelFreqMhz: uint16_t\ntype: txVector: ns3::WifiTxVector\ntype: aMpdu: ns3::MpduInfo\ntype: signalNoise: ns3::SignalNoiseDbm" },
    {(char *) "NotifyRxBegin", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxBegin, METH_KEYWORDS|METH_VARARGS, "NotifyRxBegin(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetOfdmRate6Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate6Mbps()\n\n" },
    {(char *) "GetChannelNumber", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannelNumber, METH_NOARGS, "GetChannelNumber()\n\n" },
    {(char *) "GetDsssRate11Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate11Mbps, METH_NOARGS|METH_STATIC, "GetDsssRate11Mbps()\n\n" },
    {(char *) "GetVhtPlcpHeaderMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetVhtPlcpHeaderMode, METH_NOARGS|METH_STATIC, "GetVhtPlcpHeaderMode()\n\n" },
    {(char *) "GetOfdmRate6MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate6MbpsBW10MHz()\n\n" },
    {(char *) "GetPlcpPreambleDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpPreambleDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpPreambleDuration(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "GetOfdmRate6MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate6MbpsBW5MHz()\n\n" },
    {(char *) "GetOfdmRate9MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate9MbpsBW5MHz()\n\n" },
    {(char *) "SetMaxSupportedRxSpatialStreams", (PyCFunction) _wrap_PyNs3WifiPhy_SetMaxSupportedRxSpatialStreams, METH_KEYWORDS|METH_VARARGS, "SetMaxSupportedRxSpatialStreams(streams)\n\ntype: streams: uint8_t" },
    {(char *) "GetShortPlcpPreambleSupported", (PyCFunction) _wrap_PyNs3WifiPhy_GetShortPlcpPreambleSupported, METH_NOARGS, "GetShortPlcpPreambleSupported()\n\n" },
    {(char *) "NotifyTxDrop", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyTxDrop(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetDsssRate5_5Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate5_5Mbps, METH_NOARGS|METH_STATIC, "GetDsssRate5_5Mbps()\n\n" },
    {(char *) "GetPlcpSigA2Duration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpSigA2Duration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpSigA2Duration(preamble)\n\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3WifiPhy_GetNModes, METH_NOARGS, "GetNModes()\n\n" },
    {(char *) "SetSleepMode", (PyCFunction) _wrap_PyNs3WifiPhy_SetSleepMode, METH_NOARGS, "SetSleepMode()\n\n" },
    {(char *) "GetErpOfdmRate48Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate48Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate48Mbps()\n\n" },
    {(char *) "GetPlcpHeaderDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpHeaderDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpHeaderDuration(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3WifiPhy_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, "ConfigureStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "GetOfdmRate12MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate12MbpsBW5MHz()\n\n" },
    {(char *) "GetTxPowerEnd", (PyCFunction) _wrap_PyNs3WifiPhy_GetTxPowerEnd, METH_NOARGS, "GetTxPowerEnd()\n\n" },
    {(char *) "IsMcsSupported", (PyCFunction) _wrap_PyNs3WifiPhy_IsMcsSupported, METH_KEYWORDS|METH_VARARGS, "IsMcsSupported(mcs)\n\ntype: mcs: ns3::WifiMode" },
    {(char *) "GetOfdmRate9Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate9Mbps()\n\n" },
    {(char *) "GetPlcpHtSigHeaderDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetPlcpHtSigHeaderDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "GetPlcpHtSigHeaderDuration(preamble)\n\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3WifiPhy_SendPacket, METH_KEYWORDS|METH_VARARGS, "SendPacket(packet, txVector, mpdutype)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: txVector: ns3::WifiTxVector\ntype: mpdutype: ns3::MpduType" },
    {(char *) "GetHePlcpHeaderMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetHePlcpHeaderMode, METH_NOARGS|METH_STATIC, "GetHePlcpHeaderMode()\n\n" },
    {(char *) "GetShortGuardInterval", (PyCFunction) _wrap_PyNs3WifiPhy_GetShortGuardInterval, METH_NOARGS, "GetShortGuardInterval()\n\n" },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetMode, METH_KEYWORDS|METH_VARARGS, "GetMode(mode)\n\ntype: mode: uint8_t" },
    {(char *) "GetErpOfdmRate9Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetErpOfdmRate9Mbps, METH_NOARGS|METH_STATIC, "GetErpOfdmRate9Mbps()\n\n" },
    {(char *) "GetNTxPower", (PyCFunction) _wrap_PyNs3WifiPhy_GetNTxPower, METH_NOARGS, "GetNTxPower()\n\n" },
    {(char *) "GetOfdmRate9MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate9MbpsBW10MHz()\n\n" },
    {(char *) "GetOfdmRate54Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate54Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate54Mbps()\n\n" },
    {(char *) "GetMaxSupportedRxSpatialStreams", (PyCFunction) _wrap_PyNs3WifiPhy_GetMaxSupportedRxSpatialStreams, METH_NOARGS, "GetMaxSupportedRxSpatialStreams()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3WifiPhy_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "SetMaxSupportedTxSpatialStreams", (PyCFunction) _wrap_PyNs3WifiPhy_SetMaxSupportedTxSpatialStreams, METH_KEYWORDS|METH_VARARGS, "SetMaxSupportedTxSpatialStreams(streams)\n\ntype: streams: uint8_t" },
    {(char *) "CalculateTxDuration", (PyCFunction) _wrap_PyNs3WifiPhy_CalculateTxDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ResumeFromOff", (PyCFunction) _wrap_PyNs3WifiPhy_ResumeFromOff, METH_NOARGS, "ResumeFromOff()\n\n" },
    {(char *) "GetOfdmRate13_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate13_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate13_5MbpsBW5MHz()\n\n" },
    {(char *) "GetHtMcs16", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs16, METH_NOARGS|METH_STATIC, "GetHtMcs16()\n\n" },
    {(char *) "GetHtMcs17", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs17, METH_NOARGS|METH_STATIC, "GetHtMcs17()\n\n" },
    {(char *) "GetHtMcs14", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs14, METH_NOARGS|METH_STATIC, "GetHtMcs14()\n\n" },
    {(char *) "GetHtMcs15", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs15, METH_NOARGS|METH_STATIC, "GetHtMcs15()\n\n" },
    {(char *) "GetHtMcs12", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs12, METH_NOARGS|METH_STATIC, "GetHtMcs12()\n\n" },
    {(char *) "GetHtMcs13", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs13, METH_NOARGS|METH_STATIC, "GetHtMcs13()\n\n" },
    {(char *) "GetHtMcs10", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs10, METH_NOARGS|METH_STATIC, "GetHtMcs10()\n\n" },
    {(char *) "GetHtMcs11", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs11, METH_NOARGS|METH_STATIC, "GetHtMcs11()\n\n" },
    {(char *) "SetReceiveErrorCallback", (PyCFunction) _wrap_PyNs3WifiPhy_SetReceiveErrorCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveErrorCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetStbc", (PyCFunction) _wrap_PyNs3WifiPhy_SetStbc, METH_KEYWORDS|METH_VARARGS, "SetStbc(stbc)\n\ntype: stbc: bool" },
    {(char *) "EndReceive", (PyCFunction) _wrap_PyNs3WifiPhy_EndReceive, METH_KEYWORDS|METH_VARARGS, "EndReceive(packet, preamble, mpdutype, event)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: preamble: ns3::WifiPreamble\ntype: mpdutype: ns3::MpduType\ntype: event: ns3::Ptr< ns3::Event >" },
    {(char *) "GetHtMcs18", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs18, METH_NOARGS|METH_STATIC, "GetHtMcs18()\n\n" },
    {(char *) "GetHtMcs19", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs19, METH_NOARGS|METH_STATIC, "GetHtMcs19()\n\n" },
    {(char *) "GetStandard", (PyCFunction) _wrap_PyNs3WifiPhy_GetStandard, METH_NOARGS, "GetStandard()\n\n" },
    {(char *) "GetHtMcs8", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs8, METH_NOARGS|METH_STATIC, "GetHtMcs8()\n\n" },
    {(char *) "GetHtMcs9", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs9, METH_NOARGS|METH_STATIC, "GetHtMcs9()\n\n" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3WifiPhy_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(freq)\n\ntype: freq: uint16_t" },
    {(char *) "GetHtMcs4", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs4, METH_NOARGS|METH_STATIC, "GetHtMcs4()\n\n" },
    {(char *) "GetHtMcs5", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs5, METH_NOARGS|METH_STATIC, "GetHtMcs5()\n\n" },
    {(char *) "GetHtMcs6", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs6, METH_NOARGS|METH_STATIC, "GetHtMcs6()\n\n" },
    {(char *) "GetHtMcs7", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs7, METH_NOARGS|METH_STATIC, "GetHtMcs7()\n\n" },
    {(char *) "GetHtMcs0", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs0, METH_NOARGS|METH_STATIC, "GetHtMcs0()\n\n" },
    {(char *) "GetHtMcs1", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs1, METH_NOARGS|METH_STATIC, "GetHtMcs1()\n\n" },
    {(char *) "GetHtMcs2", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs2, METH_NOARGS|METH_STATIC, "GetHtMcs2()\n\n" },
    {(char *) "GetHtMcs3", (PyCFunction) _wrap_PyNs3WifiPhy_GetHtMcs3, METH_NOARGS|METH_STATIC, "GetHtMcs3()\n\n" },
    {(char *) "GetChannelWidth", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannelWidth, METH_NOARGS, "GetChannelWidth()\n\n" },
    {(char *) "GetPowerDbm", (PyCFunction) _wrap_PyNs3WifiPhy_GetPowerDbm, METH_KEYWORDS|METH_VARARGS, "GetPowerDbm(power)\n\ntype: power: uint8_t" },
    {(char *) "GetOfdmRate3MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate3MbpsBW10MHz()\n\n" },
    {(char *) "StartTx", (PyCFunction) _wrap_PyNs3WifiPhy_StartTx, METH_KEYWORDS|METH_VARARGS, "StartTx(packet, txVector, txDuration)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: txVector: ns3::WifiTxVector\ntype: txDuration: ns3::Time" },
    {(char *) "GetTxPowerStart", (PyCFunction) _wrap_PyNs3WifiPhy_GetTxPowerStart, METH_NOARGS, "GetTxPowerStart()\n\n" },
    {(char *) "GetFrequency", (PyCFunction) _wrap_PyNs3WifiPhy_GetFrequency, METH_NOARGS, "GetFrequency()\n\n" },
    {(char *) "SetTxPowerEnd", (PyCFunction) _wrap_PyNs3WifiPhy_SetTxPowerEnd, METH_KEYWORDS|METH_VARARGS, "SetTxPowerEnd(end)\n\ntype: end: double" },
    {(char *) "GetLastRxStartTime", (PyCFunction) _wrap_PyNs3WifiPhy_GetLastRxStartTime, METH_NOARGS, "GetLastRxStartTime()\n\n" },
    {(char *) "SetGuardInterval", (PyCFunction) _wrap_PyNs3WifiPhy_SetGuardInterval, METH_KEYWORDS|METH_VARARGS, "SetGuardInterval(guardInterval)\n\ntype: guardInterval: ns3::Time" },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateRx, METH_NOARGS, "IsStateRx()\n\n" },
    {(char *) "GetGreenfield", (PyCFunction) _wrap_PyNs3WifiPhy_GetGreenfield, METH_NOARGS, "GetGreenfield()\n\n" },
    {(char *) "GetMaxSupportedTxSpatialStreams", (PyCFunction) _wrap_PyNs3WifiPhy_GetMaxSupportedTxSpatialStreams, METH_NOARGS, "GetMaxSupportedTxSpatialStreams()\n\n" },
    {(char *) "SetShortGuardInterval", (PyCFunction) _wrap_PyNs3WifiPhy_SetShortGuardInterval, METH_KEYWORDS|METH_VARARGS, "SetShortGuardInterval(shortGuardInterval)\n\ntype: shortGuardInterval: bool" },
    {(char *) "GetGuardInterval", (PyCFunction) _wrap_PyNs3WifiPhy_GetGuardInterval, METH_NOARGS, "GetGuardInterval()\n\n" },
    {(char *) "GetDsssRate1Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate1Mbps, METH_NOARGS|METH_STATIC, "GetDsssRate1Mbps()\n\n" },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3WifiPhy_GetDevice, METH_NOARGS, "GetDevice()\n\n" },
    {(char *) "GetOfdmRate4_5MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW10MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate4_5MbpsBW10MHz()\n\n" },
    {(char *) "GetNumberOfAntennas", (PyCFunction) _wrap_PyNs3WifiPhy_GetNumberOfAntennas, METH_NOARGS, "GetNumberOfAntennas()\n\n" },
    {(char *) "SetReceiveOkCallback", (PyCFunction) _wrap_PyNs3WifiPhy_SetReceiveOkCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveOkCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetCcaMode1Threshold", (PyCFunction) _wrap_PyNs3WifiPhy_SetCcaMode1Threshold, METH_KEYWORDS|METH_VARARGS, "SetCcaMode1Threshold(threshold)\n\ntype: threshold: double" },
    {(char *) "GetOfdmRate48Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate48Mbps, METH_NOARGS|METH_STATIC, "GetOfdmRate48Mbps()\n\n" },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateIdle, METH_NOARGS, "IsStateIdle()\n\n" },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateCcaBusy, METH_NOARGS, "IsStateCcaBusy()\n\n" },
    {(char *) "ResumeFromSleep", (PyCFunction) _wrap_PyNs3WifiPhy_ResumeFromSleep, METH_NOARGS, "ResumeFromSleep()\n\n" },
    {(char *) "GetOfdmRate1_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate1_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, "GetOfdmRate1_5MbpsBW5MHz()\n\n" },
    {(char *) "NotifyRxDrop", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyRxDrop(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoChannelSwitch", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_DoChannelSwitch, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SwitchMaybeToCcaBusy", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_SwitchMaybeToCcaBusy, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "DoFrequencySwitch", (PyCFunction) PyNs3WifiPhy__PythonHelper::_wrap_DoFrequencySwitch, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhy__tp_clear(PyNs3WifiPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiPhy__tp_traverse(PyNs3WifiPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiPhy__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiPhy__tp_dealloc(PyNs3WifiPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhy__tp_richcompare (PyNs3WifiPhy *PYBINDGEN_UNUSED(self), PyNs3WifiPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiPhy",            /* tp_name */
    sizeof(PyNs3WifiPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiPhy(arg0)\nWifiPhy()",                        /* Documentation string */
    (traverseproc)PyNs3WifiPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiPhyStateHelper__tp_init__0(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhyStateHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhyStateHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiPhyStateHelper(*((PyNs3WifiPhyStateHelper *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiPhyStateHelper__tp_init__1(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiPhyStateHelper();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiPhyStateHelper__tp_init(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhyStateHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyStateHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchToSleep(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    
    self->obj->SwitchToSleep();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SetReceiveErrorCallback(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl20> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl20> (callback);
    self->obj->SetReceiveErrorCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiPhyStateHelper::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateSleep(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSleep();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchFromOff(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SwitchFromOff(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchMaybeToCcaBusy(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SwitchMaybeToCcaBusy(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchFromSleep(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SwitchFromSleep(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateSwitching(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSwitching();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchFromRxEndError(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double snr;
    const char *keywords[] = {"packet", "snr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &snr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SwitchFromRxEndError(ns3::Ptr< ns3::Packet  > (packet_ptr), snr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchFromRxAbort(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    
    self->obj->SwitchFromRxAbort();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateOff(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateOff();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchToRx(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rxDuration;
    const char *keywords[] = {"rxDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rxDuration)) {
        return NULL;
    }
    self->obj->SwitchToRx(*((PyNs3Time *) rxDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchToTx(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *txDuration;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDbm;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txDuration", "packet", "txPowerDbm", "txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3Time_Type, &txDuration, &PyNs3Packet_Type, &packet, &txPowerDbm, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SwitchToTx(*((PyNs3Time *) txDuration)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDbm, *((PyNs3WifiTxVector *) txVector)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchToOff(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    
    self->obj->SwitchToOff();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_GetLastRxStartTime(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastRxStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_GetDelayUntilIdle(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelayUntilIdle();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateRx(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchToChannelSwitching(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *switchingDuration;
    const char *keywords[] = {"switchingDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &switchingDuration)) {
        return NULL;
    }
    self->obj->SwitchToChannelSwitching(*((PyNs3Time *) switchingDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SwitchFromRxEndOk(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double snr;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"packet", "snr", "txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &packet, &snr, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SwitchFromRxEndOk(ns3::Ptr< ns3::Packet  > (packet_ptr), snr, *((PyNs3WifiTxVector *) txVector)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateTx(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_SetReceiveOkCallback(PyNs3WifiPhyStateHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl19> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl19> (callback);
    self->obj->SetReceiveOkCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateIdle(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyStateHelper_IsStateCcaBusy(PyNs3WifiPhyStateHelper *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiPhyStateHelper__copy__(PyNs3WifiPhyStateHelper *self)
{

    PyNs3WifiPhyStateHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiPhyStateHelper, &PyNs3WifiPhyStateHelper_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::WifiPhyStateHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiPhyStateHelper_methods[] = {
    {(char *) "SwitchToSleep", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchToSleep, METH_NOARGS, "SwitchToSleep()\n\n" },
    {(char *) "SetReceiveErrorCallback", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SetReceiveErrorCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveErrorCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "IsStateSleep", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateSleep, METH_NOARGS, "IsStateSleep()\n\n" },
    {(char *) "SwitchFromOff", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchFromOff, METH_KEYWORDS|METH_VARARGS, "SwitchFromOff(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SwitchMaybeToCcaBusy", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchMaybeToCcaBusy, METH_KEYWORDS|METH_VARARGS, "SwitchMaybeToCcaBusy(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SwitchFromSleep", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchFromSleep, METH_KEYWORDS|METH_VARARGS, "SwitchFromSleep(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "IsStateSwitching", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateSwitching, METH_NOARGS, "IsStateSwitching()\n\n" },
    {(char *) "SwitchFromRxEndError", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchFromRxEndError, METH_KEYWORDS|METH_VARARGS, "SwitchFromRxEndError(packet, snr)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: snr: double" },
    {(char *) "SwitchFromRxAbort", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchFromRxAbort, METH_NOARGS, "SwitchFromRxAbort()\n\n" },
    {(char *) "IsStateOff", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateOff, METH_NOARGS, "IsStateOff()\n\n" },
    {(char *) "SwitchToRx", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchToRx, METH_KEYWORDS|METH_VARARGS, "SwitchToRx(rxDuration)\n\ntype: rxDuration: ns3::Time" },
    {(char *) "SwitchToTx", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchToTx, METH_KEYWORDS|METH_VARARGS, "SwitchToTx(txDuration, packet, txPowerDbm, txVector)\n\ntype: txDuration: ns3::Time\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: txPowerDbm: double\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "SwitchToOff", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchToOff, METH_NOARGS, "SwitchToOff()\n\n" },
    {(char *) "GetLastRxStartTime", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_GetLastRxStartTime, METH_NOARGS, "GetLastRxStartTime()\n\n" },
    {(char *) "GetDelayUntilIdle", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_GetDelayUntilIdle, METH_NOARGS, "GetDelayUntilIdle()\n\n" },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateRx, METH_NOARGS, "IsStateRx()\n\n" },
    {(char *) "SwitchToChannelSwitching", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchToChannelSwitching, METH_KEYWORDS|METH_VARARGS, "SwitchToChannelSwitching(switchingDuration)\n\ntype: switchingDuration: ns3::Time" },
    {(char *) "SwitchFromRxEndOk", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SwitchFromRxEndOk, METH_KEYWORDS|METH_VARARGS, "SwitchFromRxEndOk(packet, snr, txVector)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: snr: double\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateTx, METH_NOARGS, "IsStateTx()\n\n" },
    {(char *) "SetReceiveOkCallback", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_SetReceiveOkCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveOkCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateIdle, METH_NOARGS, "IsStateIdle()\n\n" },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper_IsStateCcaBusy, METH_NOARGS, "IsStateCcaBusy()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiPhyStateHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhyStateHelper__tp_clear(PyNs3WifiPhyStateHelper *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiPhyStateHelper *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiPhyStateHelper__tp_traverse(PyNs3WifiPhyStateHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiPhyStateHelper__tp_dealloc(PyNs3WifiPhyStateHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhyStateHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhyStateHelper__tp_richcompare (PyNs3WifiPhyStateHelper *PYBINDGEN_UNUSED(self), PyNs3WifiPhyStateHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhyStateHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhyStateHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiPhyStateHelper",            /* tp_name */
    sizeof(PyNs3WifiPhyStateHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhyStateHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiPhyStateHelper(arg0)\nWifiPhyStateHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WifiPhyStateHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhyStateHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhyStateHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhyStateHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhyStateHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhyStateHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiRemoteStationManager__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiRemoteStationManager' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiRemoteStationManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetMaxSlrc(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSlrc;
    const char *keywords[] = {"maxSlrc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSlrc)) {
        return NULL;
    }
    self->obj->SetMaxSlrc(maxSlrc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsBrandNew(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsBrandNew(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_HasHeSupported(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasHeSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNonErpBasicMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetNonErpBasicMode(i);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_HasPcfSupported(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasPcfSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddStationHtCapabilities(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *from;
    PyNs3HtCapabilities *htcapabilities;
    const char *keywords[] = {"from", "htcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &from, &PyNs3HtCapabilities_Type, &htcapabilities)) {
        return NULL;
    }
    self->obj->AddStationHtCapabilities(*((PyNs3Mac48Address *) from)->obj, *((PyNs3HtCapabilities *) htcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddAllSupportedMcs(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->AddAllSupportedMcs(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetQosSupport(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *from;
    bool qosSupported;
    PyObject *py_qosSupported;
    const char *keywords[] = {"from", "qosSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3Mac48Address_Type, &from, &py_qosSupported)) {
        return NULL;
    }
    qosSupported = (bool) PyObject_IsTrue(py_qosSupported);
    self->obj->SetQosSupport(*((PyNs3Mac48Address *) from)->obj, qosSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetVhtSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetVhtSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetQosSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetQosSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetFragmentationThreshold(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetFragmentationThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetShortGuardInterval(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetShortGuardInterval(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_Reset(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    
    self->obj->Reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetGreenfieldSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetGreenfieldSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNonUnicastMode(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetNonUnicastMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetHtSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetHtSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetAckTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *dataMode;
    const char *keywords[] = {"address", "dataMode", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &dataMode)) {
        return NULL;
    }
    ns3::WifiTxVector retval = self->obj->GetAckTxVector(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) dataMode)->obj);
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDataTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::WifiTxVector retval = self->obj->GetDataTxVector(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddSupportedErpSlotTime(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    bool isShortSlotTimeSupported;
    PyObject *py_isShortSlotTimeSupported;
    const char *keywords[] = {"address", "isShortSlotTimeSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3Mac48Address_Type, &address, &py_isShortSlotTimeSupported)) {
        return NULL;
    }
    isShortSlotTimeSupported = (bool) PyObject_IsTrue(py_isShortSlotTimeSupported);
    self->obj->AddSupportedErpSlotTime(*((PyNs3Mac48Address *) address)->obj, isShortSlotTimeSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetShortSlotTimeEnabled(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetShortSlotTimeEnabled(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetDefaultTxPowerLevel(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txPower;
    const char *keywords[] = {"txPower", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txPower)) {
        return NULL;
    }
    if (txPower > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDefaultTxPowerLevel(txPower);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetInfo(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    PyNs3WifiRemoteStationInfo *py_WifiRemoteStationInfo;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    ns3::WifiRemoteStationInfo retval = self->obj->GetInfo(*((PyNs3Mac48Address *) address)->obj);
    py_WifiRemoteStationInfo = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_WifiRemoteStationInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiRemoteStationInfo->obj = new ns3::WifiRemoteStationInfo(retval);
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_WifiRemoteStationInfo->obj] = (PyObject *) py_WifiRemoteStationInfo;
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationInfo);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportDataOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double ackSnr;
    PyNs3WifiMode *ackMode;
    double dataSnr;
    unsigned int packetSize;
    const char *keywords[] = {"address", "header", "ackSnr", "ackMode", "dataSnr", "packetSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!dI", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &ackSnr, &PyNs3WifiMode_Type, &ackMode, &dataSnr, &packetSize)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportDataOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, ackSnr, *((PyNs3WifiMode *) ackMode)->obj, dataSnr, packetSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double rxSnr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"address", "header", "rxSnr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &rxSnr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRxOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, rxSnr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordWaitAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordWaitAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetVhtSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetPcfSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetPcfSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetRtsCtsThreshold(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetRtsCtsThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetRtsTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::WifiTxVector retval = self->obj->GetRtsTxVector(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetShortSlotTimeSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetShortSlotTimeSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNumberOfSupportedStreams(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetNumberOfSupportedStreams(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetChannelWidthSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetChannelWidthSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_PrepareForQueue(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PrepareForQueue(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddStationVhtCapabilities(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *from;
    PyNs3VhtCapabilities *vhtcapabilities;
    const char *keywords[] = {"from", "vhtcapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &from, &PyNs3VhtCapabilities_Type, &vhtcapabilities)) {
        return NULL;
    }
    self->obj->AddStationVhtCapabilities(*((PyNs3Mac48Address *) from)->obj, *((PyNs3VhtCapabilities *) vhtcapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDefaultMode(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetDefaultMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_HasVhtSupported(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasVhtSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordGotAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsWaitAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsWaitAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNNonErpBasicModes(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNNonErpBasicModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetShortPreambleSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetShortPreambleSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddSupportedMcs(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *mcs;
    const char *keywords[] = {"address", "mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &mcs)) {
        return NULL;
    }
    self->obj->AddSupportedMcs(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) mcs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetRifsPermitted(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetRifsPermitted();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_DoGetCtsToSelfTxVector(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    ns3::WifiTxVector retval = self->obj->DoGetCtsToSelfTxVector();
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedRts(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"address", "header", "packet", "txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedRts(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentOffset(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->GetFragmentOffset(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentSize(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->GetFragmentSize(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_UpdateFragmentationThreshold(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    
    self->obj->UpdateFragmentationThreshold();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetCtsTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *rtsMode;
    const char *keywords[] = {"address", "rtsMode", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &rtsMode)) {
        return NULL;
    }
    ns3::WifiTxVector retval = self->obj->GetCtsTxVector(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) rtsMode)->obj);
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetMaxSsrc(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSsrc;
    const char *keywords[] = {"maxSsrc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSsrc)) {
        return NULL;
    }
    self->obj->SetMaxSsrc(maxSsrc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordDisassociated(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordDisassociated(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDefaultTxPowerLevel(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDefaultTxPowerLevel();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetRifsPermitted(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool allow;
    PyObject *py_allow;
    const char *keywords[] = {"allow", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_allow)) {
        return NULL;
    }
    allow = (bool) PyObject_IsTrue(py_allow);
    self->obj->SetRifsPermitted(allow);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsAssociated(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsAssociated(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddSupportedMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"address", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    self->obj->AddSupportedMode(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetShortPreambleEnabled(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortPreambleEnabled();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetCtsToSelfTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"header", "packet", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::WifiTxVector retval = self->obj->GetCtsToSelfTxVector(header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetShortPreambleEnabled(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetShortPreambleEnabled(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRtsOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double ctsSnr;
    PyNs3WifiMode *ctsMode;
    double rtsSnr;
    const char *keywords[] = {"address", "header", "ctsSnr", "ctsMode", "rtsSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &ctsSnr, &PyNs3WifiMode_Type, &ctsMode, &rtsSnr)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRtsOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, ctsSnr, *((PyNs3WifiMode *) ctsMode)->obj, rtsSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNBasicModes(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNBasicModes();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetUseGreenfieldProtection(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetUseGreenfieldProtection(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedRetransmission(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedRetransmission(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetUseNonHtProtection(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetUseNonHtProtection();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNMcsSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetNMcsSupported(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddAllSupportedModes(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->AddAllSupportedModes(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetUseGreenfieldProtection(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetUseGreenfieldProtection();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetShortSlotTimeEnabled(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortSlotTimeEnabled();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetHtSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetBasicMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetBasicMode(i);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedFragmentation(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedFragmentation(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddStationHeCapabilities(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *from;
    PyNs3HeCapabilities *hecapabilities;
    const char *keywords[] = {"from", "hecapabilities", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &from, &PyNs3HeCapabilities_Type, &hecapabilities)) {
        return NULL;
    }
    self->obj->AddStationHeCapabilities(*((PyNs3Mac48Address *) from)->obj, *((PyNs3HeCapabilities *) hecapabilities)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportFinalDataFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    unsigned int packetSize;
    const char *keywords[] = {"address", "header", "packetSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &packetSize)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportFinalDataFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr, packetSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetHeSupported(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNBasicMcs(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNBasicMcs();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetMaxNumberOfTransmitStreams(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxNumberOfTransmitStreams();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetUseNonErpProtection(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetUseNonErpProtection(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetUseNonErpProtection(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetUseNonErpProtection();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetBlockAckTxVector(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *dataMode;
    const char *keywords[] = {"address", "dataMode", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &dataMode)) {
        return NULL;
    }
    ns3::WifiTxVector retval = self->obj->GetBlockAckTxVector(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) dataMode)->obj);
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportDataFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    unsigned int packetSize;
    const char *keywords[] = {"address", "header", "packetSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &packetSize)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportDataFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr, packetSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_HasHtSupported(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasHtSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetUseNonHtProtection(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetUseNonHtProtection(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRtsFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRtsFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddSupportedPlcpPreamble(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    bool isShortPreambleSupported;
    PyObject *py_isShortPreambleSupported;
    const char *keywords[] = {"address", "isShortPreambleSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3Mac48Address_Type, &address, &py_isShortPreambleSupported)) {
        return NULL;
    }
    isShortPreambleSupported = (bool) PyObject_IsTrue(py_isShortPreambleSupported);
    self->obj->AddSupportedPlcpPreamble(*((PyNs3Mac48Address *) address)->obj, isShortPreambleSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetBasicMcs(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetBasicMcs(i);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RemoveAllSupportedMcs(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RemoveAllSupportedMcs(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddBasicMcs(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mcs)) {
        return NULL;
    }
    self->obj->AddBasicMcs(*((PyNs3WifiMode *) mcs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportFinalRtsFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportFinalRtsFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsLastFragment(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->IsLastFragment(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddBasicMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    self->obj->AddBasicMode(*((PyNs3WifiMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedCtsToSelf(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    retval = self->obj->NeedCtsToSelf(*((PyNs3WifiTxVector *) txVector)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNumberOfAntennas(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNumberOfAntennas();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportAmpduTxStatus(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    int tid;
    int nSuccessfulMpdus;
    int nFailedMpdus;
    double rxSnr;
    double dataSnr;
    const char *keywords[] = {"address", "tid", "nSuccessfulMpdus", "nFailedMpdus", "rxSnr", "dataSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiidd", (char **) keywords, &PyNs3Mac48Address_Type, &address, &tid, &nSuccessfulMpdus, &nFailedMpdus, &rxSnr, &dataSnr)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nSuccessfulMpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nFailedMpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->ReportAmpduTxStatus(*((PyNs3Mac48Address *) address)->obj, tid, nSuccessfulMpdus, nFailedMpdus, rxSnr, dataSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentationThreshold(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFragmentationThreshold();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordGotAssocTxFailed(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDefaultMcs(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetDefaultMcs();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

static PyMethodDef PyNs3WifiRemoteStationManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMaxSlrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetMaxSlrc, METH_KEYWORDS|METH_VARARGS, "SetMaxSlrc(maxSlrc)\n\ntype: maxSlrc: uint32_t" },
    {(char *) "IsBrandNew", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsBrandNew, METH_KEYWORDS|METH_VARARGS, "IsBrandNew(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "HasHeSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_HasHeSupported, METH_NOARGS, "HasHeSupported()\n\n" },
    {(char *) "GetNonErpBasicMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNonErpBasicMode, METH_KEYWORDS|METH_VARARGS, "GetNonErpBasicMode(i)\n\ntype: i: uint8_t" },
    {(char *) "HasPcfSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_HasPcfSupported, METH_NOARGS, "HasPcfSupported()\n\n" },
    {(char *) "AddStationHtCapabilities", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddStationHtCapabilities, METH_KEYWORDS|METH_VARARGS, "AddStationHtCapabilities(from, htcapabilities)\n\ntype: from: ns3::Mac48Address\ntype: htcapabilities: ns3::HtCapabilities" },
    {(char *) "AddAllSupportedMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddAllSupportedMcs, METH_KEYWORDS|METH_VARARGS, "AddAllSupportedMcs(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetQosSupport", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetQosSupport, METH_KEYWORDS|METH_VARARGS, "SetQosSupport(from, qosSupported)\n\ntype: from: ns3::Mac48Address\ntype: qosSupported: bool" },
    {(char *) "GetVhtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetVhtSupported, METH_KEYWORDS|METH_VARARGS, "GetVhtSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetQosSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetQosSupported, METH_KEYWORDS|METH_VARARGS, "GetQosSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetFragmentationThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetFragmentationThreshold, METH_KEYWORDS|METH_VARARGS, "SetFragmentationThreshold(threshold)\n\ntype: threshold: uint32_t" },
    {(char *) "GetShortGuardInterval", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetShortGuardInterval, METH_KEYWORDS|METH_VARARGS, "GetShortGuardInterval(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "Reset", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_Reset, METH_NOARGS, "Reset()\n\n" },
    {(char *) "GetGreenfieldSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetGreenfieldSupported, METH_KEYWORDS|METH_VARARGS, "GetGreenfieldSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetNonUnicastMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNonUnicastMode, METH_NOARGS, "GetNonUnicastMode()\n\n" },
    {(char *) "GetHtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetHtSupported, METH_KEYWORDS|METH_VARARGS, "GetHtSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetAckTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetAckTxVector, METH_KEYWORDS|METH_VARARGS, "GetAckTxVector(address, dataMode)\n\ntype: address: ns3::Mac48Address\ntype: dataMode: ns3::WifiMode" },
    {(char *) "GetDataTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDataTxVector, METH_KEYWORDS|METH_VARARGS, "GetDataTxVector(address, header, packet)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "AddSupportedErpSlotTime", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddSupportedErpSlotTime, METH_KEYWORDS|METH_VARARGS, "AddSupportedErpSlotTime(address, isShortSlotTimeSupported)\n\ntype: address: ns3::Mac48Address\ntype: isShortSlotTimeSupported: bool" },
    {(char *) "SetShortSlotTimeEnabled", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetShortSlotTimeEnabled, METH_KEYWORDS|METH_VARARGS, "SetShortSlotTimeEnabled(enable)\n\ntype: enable: bool" },
    {(char *) "SetDefaultTxPowerLevel", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetDefaultTxPowerLevel, METH_KEYWORDS|METH_VARARGS, "SetDefaultTxPowerLevel(txPower)\n\ntype: txPower: uint8_t" },
    {(char *) "GetInfo", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetInfo, METH_KEYWORDS|METH_VARARGS, "GetInfo(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "ReportDataOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportDataOk, METH_KEYWORDS|METH_VARARGS, "ReportDataOk(address, header, ackSnr, ackMode, dataSnr, packetSize)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: ackSnr: double\ntype: ackMode: ns3::WifiMode\ntype: dataSnr: double\ntype: packetSize: uint32_t" },
    {(char *) "ReportRxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRxOk, METH_KEYWORDS|METH_VARARGS, "ReportRxOk(address, header, rxSnr, txMode)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: rxSnr: double\ntype: txMode: ns3::WifiMode" },
    {(char *) "RecordWaitAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordWaitAssocTxOk, METH_KEYWORDS|METH_VARARGS, "RecordWaitAssocTxOk(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetPcfSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetPcfSupported, METH_KEYWORDS|METH_VARARGS, "SetPcfSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetRtsCtsThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetRtsCtsThreshold, METH_KEYWORDS|METH_VARARGS, "SetRtsCtsThreshold(threshold)\n\ntype: threshold: uint32_t" },
    {(char *) "GetRtsTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetRtsTxVector, METH_KEYWORDS|METH_VARARGS, "GetRtsTxVector(address, header, packet)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetShortSlotTimeSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetShortSlotTimeSupported, METH_KEYWORDS|METH_VARARGS, "GetShortSlotTimeSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetNumberOfSupportedStreams", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNumberOfSupportedStreams, METH_KEYWORDS|METH_VARARGS, "GetNumberOfSupportedStreams(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetChannelWidthSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetChannelWidthSupported, METH_KEYWORDS|METH_VARARGS, "GetChannelWidthSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "PrepareForQueue", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_PrepareForQueue, METH_KEYWORDS|METH_VARARGS, "PrepareForQueue(address, header, packet)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "AddStationVhtCapabilities", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddStationVhtCapabilities, METH_KEYWORDS|METH_VARARGS, "AddStationVhtCapabilities(from, vhtcapabilities)\n\ntype: from: ns3::Mac48Address\ntype: vhtcapabilities: ns3::VhtCapabilities" },
    {(char *) "GetDefaultMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDefaultMode, METH_NOARGS, "GetDefaultMode()\n\n" },
    {(char *) "HasVhtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_HasVhtSupported, METH_NOARGS, "HasVhtSupported()\n\n" },
    {(char *) "RecordGotAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxOk, METH_KEYWORDS|METH_VARARGS, "RecordGotAssocTxOk(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "IsWaitAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsWaitAssocTxOk, METH_KEYWORDS|METH_VARARGS, "IsWaitAssocTxOk(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetNNonErpBasicModes", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNNonErpBasicModes, METH_NOARGS, "GetNNonErpBasicModes()\n\n" },
    {(char *) "GetShortPreambleSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetShortPreambleSupported, METH_KEYWORDS|METH_VARARGS, "GetShortPreambleSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "AddSupportedMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddSupportedMcs, METH_KEYWORDS|METH_VARARGS, "AddSupportedMcs(address, mcs)\n\ntype: address: ns3::Mac48Address\ntype: mcs: ns3::WifiMode" },
    {(char *) "GetRifsPermitted", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetRifsPermitted, METH_NOARGS, "GetRifsPermitted()\n\n" },
    {(char *) "DoGetCtsToSelfTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_DoGetCtsToSelfTxVector, METH_NOARGS, "DoGetCtsToSelfTxVector()\n\n" },
    {(char *) "NeedRts", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedRts, METH_KEYWORDS|METH_VARARGS, "NeedRts(address, header, packet, txVector)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "GetFragmentOffset", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentOffset, METH_KEYWORDS|METH_VARARGS, "GetFragmentOffset(address, header, packet, fragmentNumber)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: fragmentNumber: uint32_t" },
    {(char *) "GetFragmentSize", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentSize, METH_KEYWORDS|METH_VARARGS, "GetFragmentSize(address, header, packet, fragmentNumber)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: fragmentNumber: uint32_t" },
    {(char *) "UpdateFragmentationThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_UpdateFragmentationThreshold, METH_NOARGS, "UpdateFragmentationThreshold()\n\n" },
    {(char *) "GetCtsTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetCtsTxVector, METH_KEYWORDS|METH_VARARGS, "GetCtsTxVector(address, rtsMode)\n\ntype: address: ns3::Mac48Address\ntype: rtsMode: ns3::WifiMode" },
    {(char *) "SetMaxSsrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetMaxSsrc, METH_KEYWORDS|METH_VARARGS, "SetMaxSsrc(maxSsrc)\n\ntype: maxSsrc: uint32_t" },
    {(char *) "RecordDisassociated", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordDisassociated, METH_KEYWORDS|METH_VARARGS, "RecordDisassociated(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetDefaultTxPowerLevel", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDefaultTxPowerLevel, METH_NOARGS, "GetDefaultTxPowerLevel()\n\n" },
    {(char *) "SetRifsPermitted", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetRifsPermitted, METH_KEYWORDS|METH_VARARGS, "SetRifsPermitted(allow)\n\ntype: allow: bool" },
    {(char *) "IsAssociated", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsAssociated, METH_KEYWORDS|METH_VARARGS, "IsAssociated(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "AddSupportedMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddSupportedMode, METH_KEYWORDS|METH_VARARGS, "AddSupportedMode(address, mode)\n\ntype: address: ns3::Mac48Address\ntype: mode: ns3::WifiMode" },
    {(char *) "GetShortPreambleEnabled", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetShortPreambleEnabled, METH_NOARGS, "GetShortPreambleEnabled()\n\n" },
    {(char *) "GetCtsToSelfTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetCtsToSelfTxVector, METH_KEYWORDS|METH_VARARGS, "GetCtsToSelfTxVector(header, packet)\n\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetShortPreambleEnabled", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetShortPreambleEnabled, METH_KEYWORDS|METH_VARARGS, "SetShortPreambleEnabled(enable)\n\ntype: enable: bool" },
    {(char *) "ReportRtsOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRtsOk, METH_KEYWORDS|METH_VARARGS, "ReportRtsOk(address, header, ctsSnr, ctsMode, rtsSnr)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: ctsSnr: double\ntype: ctsMode: ns3::WifiMode\ntype: rtsSnr: double" },
    {(char *) "GetNBasicModes", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNBasicModes, METH_NOARGS, "GetNBasicModes()\n\n" },
    {(char *) "SetUseGreenfieldProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetUseGreenfieldProtection, METH_KEYWORDS|METH_VARARGS, "SetUseGreenfieldProtection(enable)\n\ntype: enable: bool" },
    {(char *) "NeedRetransmission", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedRetransmission, METH_KEYWORDS|METH_VARARGS, "NeedRetransmission(address, header, packet)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetUseNonHtProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetUseNonHtProtection, METH_NOARGS, "GetUseNonHtProtection()\n\n" },
    {(char *) "GetNMcsSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNMcsSupported, METH_KEYWORDS|METH_VARARGS, "GetNMcsSupported(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "AddAllSupportedModes", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddAllSupportedModes, METH_KEYWORDS|METH_VARARGS, "AddAllSupportedModes(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetUseGreenfieldProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetUseGreenfieldProtection, METH_NOARGS, "GetUseGreenfieldProtection()\n\n" },
    {(char *) "GetShortSlotTimeEnabled", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetShortSlotTimeEnabled, METH_NOARGS, "GetShortSlotTimeEnabled()\n\n" },
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetBasicMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetBasicMode, METH_KEYWORDS|METH_VARARGS, "GetBasicMode(i)\n\ntype: i: uint8_t" },
    {(char *) "NeedFragmentation", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedFragmentation, METH_KEYWORDS|METH_VARARGS, "NeedFragmentation(address, header, packet)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >" },
    {(char *) "AddStationHeCapabilities", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddStationHeCapabilities, METH_KEYWORDS|METH_VARARGS, "AddStationHeCapabilities(from, hecapabilities)\n\ntype: from: ns3::Mac48Address\ntype: hecapabilities: ns3::HeCapabilities" },
    {(char *) "ReportFinalDataFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportFinalDataFailed, METH_KEYWORDS|METH_VARARGS, "ReportFinalDataFailed(address, header, packetSize)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packetSize: uint32_t" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetNBasicMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNBasicMcs, METH_NOARGS, "GetNBasicMcs()\n\n" },
    {(char *) "GetMaxNumberOfTransmitStreams", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetMaxNumberOfTransmitStreams, METH_NOARGS, "GetMaxNumberOfTransmitStreams()\n\n" },
    {(char *) "SetUseNonErpProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetUseNonErpProtection, METH_KEYWORDS|METH_VARARGS, "SetUseNonErpProtection(enable)\n\ntype: enable: bool" },
    {(char *) "GetUseNonErpProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetUseNonErpProtection, METH_NOARGS, "GetUseNonErpProtection()\n\n" },
    {(char *) "GetBlockAckTxVector", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetBlockAckTxVector, METH_KEYWORDS|METH_VARARGS, "GetBlockAckTxVector(address, dataMode)\n\ntype: address: ns3::Mac48Address\ntype: dataMode: ns3::WifiMode" },
    {(char *) "ReportDataFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportDataFailed, METH_KEYWORDS|METH_VARARGS, "ReportDataFailed(address, header, packetSize)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packetSize: uint32_t" },
    {(char *) "HasHtSupported", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_HasHtSupported, METH_NOARGS, "HasHtSupported()\n\n" },
    {(char *) "SetUseNonHtProtection", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetUseNonHtProtection, METH_KEYWORDS|METH_VARARGS, "SetUseNonHtProtection(enable)\n\ntype: enable: bool" },
    {(char *) "ReportRtsFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRtsFailed, METH_KEYWORDS|METH_VARARGS, "ReportRtsFailed(address, header)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *" },
    {(char *) "AddSupportedPlcpPreamble", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddSupportedPlcpPreamble, METH_KEYWORDS|METH_VARARGS, "AddSupportedPlcpPreamble(address, isShortPreambleSupported)\n\ntype: address: ns3::Mac48Address\ntype: isShortPreambleSupported: bool" },
    {(char *) "GetBasicMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetBasicMcs, METH_KEYWORDS|METH_VARARGS, "GetBasicMcs(i)\n\ntype: i: uint8_t" },
    {(char *) "RemoveAllSupportedMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RemoveAllSupportedMcs, METH_KEYWORDS|METH_VARARGS, "RemoveAllSupportedMcs(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "AddBasicMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddBasicMcs, METH_KEYWORDS|METH_VARARGS, "AddBasicMcs(mcs)\n\ntype: mcs: ns3::WifiMode" },
    {(char *) "ReportFinalRtsFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportFinalRtsFailed, METH_KEYWORDS|METH_VARARGS, "ReportFinalRtsFailed(address, header)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *" },
    {(char *) "IsLastFragment", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsLastFragment, METH_KEYWORDS|METH_VARARGS, "IsLastFragment(address, header, packet, fragmentNumber)\n\ntype: address: ns3::Mac48Address\ntype: header: ns3::WifiMacHeader const *\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: fragmentNumber: uint32_t" },
    {(char *) "AddBasicMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddBasicMode, METH_KEYWORDS|METH_VARARGS, "AddBasicMode(mode)\n\ntype: mode: ns3::WifiMode" },
    {(char *) "NeedCtsToSelf", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedCtsToSelf, METH_KEYWORDS|METH_VARARGS, "NeedCtsToSelf(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "GetNumberOfAntennas", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNumberOfAntennas, METH_NOARGS, "GetNumberOfAntennas()\n\n" },
    {(char *) "ReportAmpduTxStatus", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportAmpduTxStatus, METH_KEYWORDS|METH_VARARGS, "ReportAmpduTxStatus(address, tid, nSuccessfulMpdus, nFailedMpdus, rxSnr, dataSnr)\n\ntype: address: ns3::Mac48Address\ntype: tid: uint8_t\ntype: nSuccessfulMpdus: uint8_t\ntype: nFailedMpdus: uint8_t\ntype: rxSnr: double\ntype: dataSnr: double" },
    {(char *) "GetFragmentationThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentationThreshold, METH_NOARGS, "GetFragmentationThreshold()\n\n" },
    {(char *) "RecordGotAssocTxFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxFailed, METH_KEYWORDS|METH_VARARGS, "RecordGotAssocTxFailed(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetDefaultMcs", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDefaultMcs, METH_NOARGS, "GetDefaultMcs()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRemoteStationManager__tp_clear(PyNs3WifiRemoteStationManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiRemoteStationManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiRemoteStationManager__tp_traverse(PyNs3WifiRemoteStationManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiRemoteStationManager__tp_dealloc(PyNs3WifiRemoteStationManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRemoteStationManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationManager__tp_richcompare (PyNs3WifiRemoteStationManager *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRemoteStationManager",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiRemoteStationManager(arg0)\nWifiRemoteStationManager()",                        /* Documentation string */
    (traverseproc)PyNs3WifiRemoteStationManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRemoteStationManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRemoteStationManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper = dynamic_cast< PyNs3WifiSpectrumPhyInterface__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_DoInitialize(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper = dynamic_cast< PyNs3WifiSpectrumPhyInterface__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper = dynamic_cast< PyNs3WifiSpectrumPhyInterface__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3WifiSpectrumPhyInterface__PythonHelper::GetDevice() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetDevice();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = const_cast< ns3::WifiSpectrumPhyInterface* >((const ns3::WifiSpectrumPhyInterface*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetDevice();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetDevice();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::MobilityModel >
PyNs3WifiSpectrumPhyInterface__PythonHelper::GetMobility()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::MobilityModel > retval;
    PyNs3MobilityModel *tmp_MobilityModel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMobility"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetMobility();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = (ns3::WifiSpectrumPhyInterface*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMobility", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetMobility();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3MobilityModel_Type, &tmp_MobilityModel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetMobility();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::MobilityModel  > (tmp_MobilityModel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::SpectrumModel const >
PyNs3WifiSpectrumPhyInterface__PythonHelper::GetRxSpectrumModel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::SpectrumModel const > retval;
    PyNs3SpectrumModel *tmp_SpectrumModel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRxSpectrumModel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxSpectrumModel();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = const_cast< ns3::WifiSpectrumPhyInterface* >((const ns3::WifiSpectrumPhyInterface*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRxSpectrumModel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxSpectrumModel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3SpectrumModel_Type, &tmp_SpectrumModel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxSpectrumModel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::SpectrumModel  > (tmp_SpectrumModel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::AntennaModel >
PyNs3WifiSpectrumPhyInterface__PythonHelper::GetRxAntenna()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::AntennaModel > retval;
    PyNs3AntennaModel *tmp_AntennaModel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRxAntenna"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxAntenna();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = (ns3::WifiSpectrumPhyInterface*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRxAntenna", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxAntenna();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3AntennaModel_Type, &tmp_AntennaModel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiSpectrumPhyInterface::GetRxAntenna();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::AntennaModel  > (tmp_AntennaModel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::StartRx(ns3::Ptr< ns3::SpectrumSignalParameters > params)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    PyNs3SpectrumSignalParameters *py_SpectrumSignalParameters;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartRx"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiSpectrumPhyInterface::StartRx(params);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = (ns3::WifiSpectrumPhyInterface*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (params)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_SpectrumSignalParameters = NULL;
    } else {
        py_SpectrumSignalParameters = (PyNs3SpectrumSignalParameters *) wrapper_lookup_iter->second;
        Py_INCREF(py_SpectrumSignalParameters);
    }
    
    if (py_SpectrumSignalParameters == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (params))), &PyNs3SpectrumSignalParameters_Type);
        py_SpectrumSignalParameters = PyObject_New(PyNs3SpectrumSignalParameters, wrapper_type);
    
        py_SpectrumSignalParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (params))->Ref();
        py_SpectrumSignalParameters->obj = const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (params));
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumSignalParameters->obj] = (PyObject *) py_SpectrumSignalParameters;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartRx", (char *) "N", py_SpectrumSignalParameters);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiSpectrumPhyInterface *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = (ns3::WifiSpectrumPhyInterface*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiSpectrumPhyInterface* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::SetMobility(ns3::Ptr< ns3::MobilityModel > m)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMobility"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = (ns3::SpectrumPhy*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
    
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (m));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMobility", (char *) "N", py_MobilityModel);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::SetChannel(ns3::Ptr< ns3::SpectrumChannel > c)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3SpectrumChannel *py_SpectrumChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = (ns3::SpectrumPhy*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumChannel *> (ns3::PeekPointer (c)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_SpectrumChannel = NULL;
    } else {
        py_SpectrumChannel = (PyNs3SpectrumChannel *) wrapper_lookup_iter->second;
        Py_INCREF(py_SpectrumChannel);
    }
    
    if (py_SpectrumChannel == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumChannel *> (ns3::PeekPointer (c))), &PyNs3SpectrumChannel_Type);
        py_SpectrumChannel = PyObject_GC_New(PyNs3SpectrumChannel, wrapper_type);
        py_SpectrumChannel->inst_dict = NULL;
    
        py_SpectrumChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SpectrumChannel *> (ns3::PeekPointer (c))->Ref();
        py_SpectrumChannel->obj = const_cast<ns3::SpectrumChannel *> (ns3::PeekPointer (c));
        PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumChannel->obj] = (PyObject *) py_SpectrumChannel;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannel", (char *) "N", py_SpectrumChannel);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::SetDevice(ns3::Ptr< ns3::NetDevice > d)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = (ns3::SpectrumPhy*) this;
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (d)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (d)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (d));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (d)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (d))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (d))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (d));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetDevice", (char *) "N", py_NetDevice);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WifiSpectrumPhyInterface__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiSpectrumPhyInterface__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3WifiSpectrumPhyInterface__tp_init(PyNs3WifiSpectrumPhyInterface *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiSpectrumPhyInterface_Type)
    {
        self->obj = new PyNs3WifiSpectrumPhyInterface__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiSpectrumPhyInterface__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiSpectrumPhyInterface' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_GetRxSpectrumModel(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::SpectrumModel const > retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper_class = dynamic_cast<PyNs3WifiSpectrumPhyInterface__PythonHelper*> (self->obj);
    PyNs3SpectrumModel *py_SpectrumModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetRxSpectrumModel()) : (self->obj->ns3::WifiSpectrumPhyInterface::GetRxSpectrumModel());
    if (!(const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_SpectrumModel = NULL;
    } else {
        py_SpectrumModel = (PyNs3SpectrumModel *) wrapper_lookup_iter->second;
        Py_INCREF(py_SpectrumModel);
    }
    
    if (py_SpectrumModel == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)))), &PyNs3SpectrumModel_Type);
        py_SpectrumModel = PyObject_New(PyNs3SpectrumModel, wrapper_type);
    
        py_SpectrumModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval))->Ref();
        py_SpectrumModel->obj = const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumModel->obj] = (PyObject *) py_SpectrumModel;
    }
    py_retval = Py_BuildValue((char *) "N", py_SpectrumModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiSpectrumPhyInterface::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_StartRx(PyNs3WifiSpectrumPhyInterface *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SpectrumSignalParameters *params;
    ns3::SpectrumSignalParameters *params_ptr;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper_class = dynamic_cast<PyNs3WifiSpectrumPhyInterface__PythonHelper*> (self->obj);
    const char *keywords[] = {"params", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SpectrumSignalParameters_Type, &params)) {
        return NULL;
    }
    params_ptr = (params ? params->obj : NULL);
    (helper_class == NULL)? (self->obj->StartRx(ns3::Ptr< ns3::SpectrumSignalParameters  > (params_ptr))) : (self->obj->ns3::WifiSpectrumPhyInterface::StartRx(ns3::Ptr< ns3::SpectrumSignalParameters  > (params_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_GetRxAntenna(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AntennaModel > retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper_class = dynamic_cast<PyNs3WifiSpectrumPhyInterface__PythonHelper*> (self->obj);
    PyNs3AntennaModel *py_AntennaModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetRxAntenna()) : (self->obj->ns3::WifiSpectrumPhyInterface::GetRxAntenna());
    if (!(const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3AntennaModel__PythonHelper).name())
    {
        py_AntennaModel = reinterpret_cast< PyNs3AntennaModel* >(reinterpret_cast< PyNs3AntennaModel__PythonHelper* >(const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_AntennaModel->obj = const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_AntennaModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_AntennaModel = NULL;
        } else {
            py_AntennaModel = (PyNs3AntennaModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_AntennaModel);
        }
    
        if (py_AntennaModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))), &PyNs3AntennaModel_Type);
            py_AntennaModel = PyObject_GC_New(PyNs3AntennaModel, wrapper_type);
            py_AntennaModel->inst_dict = NULL;
    
            py_AntennaModel->inst_dict = NULL;
            py_AntennaModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval))->Ref();
            py_AntennaModel->obj = const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_AntennaModel->obj] = (PyObject *) py_AntennaModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_AntennaModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_GetMobility(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MobilityModel > retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper_class = dynamic_cast<PyNs3WifiSpectrumPhyInterface__PythonHelper*> (self->obj);
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetMobility()) : (self->obj->ns3::WifiSpectrumPhyInterface::GetMobility());
    if (!(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
    {
        py_MobilityModel = reinterpret_cast< PyNs3MobilityModel* >(reinterpret_cast< PyNs3MobilityModel__PythonHelper* >(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval)))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
    
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MobilityModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiSpectrumPhyInterface_GetDevice(PyNs3WifiSpectrumPhyInterface *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3WifiSpectrumPhyInterface__PythonHelper *helper_class = dynamic_cast<PyNs3WifiSpectrumPhyInterface__PythonHelper*> (self->obj);
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetDevice()) : (self->obj->ns3::WifiSpectrumPhyInterface::GetDevice());
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}

static PyMethodDef PyNs3WifiSpectrumPhyInterface_methods[] = {
    {(char *) "GetRxSpectrumModel", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_GetRxSpectrumModel, METH_NOARGS, "GetRxSpectrumModel()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "StartRx", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_StartRx, METH_KEYWORDS|METH_VARARGS, "StartRx(params)\n\ntype: params: ns3::Ptr< ns3::SpectrumSignalParameters >" },
    {(char *) "GetRxAntenna", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_GetRxAntenna, METH_NOARGS, "GetRxAntenna()\n\n" },
    {(char *) "GetMobility", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_GetMobility, METH_NOARGS, "GetMobility()\n\n" },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3WifiSpectrumPhyInterface_GetDevice, METH_NOARGS, "GetDevice()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiSpectrumPhyInterface__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiSpectrumPhyInterface__tp_clear(PyNs3WifiSpectrumPhyInterface *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiSpectrumPhyInterface *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiSpectrumPhyInterface__tp_traverse(PyNs3WifiSpectrumPhyInterface *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiSpectrumPhyInterface__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiSpectrumPhyInterface__tp_dealloc(PyNs3WifiSpectrumPhyInterface *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiSpectrumPhyInterface__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiSpectrumPhyInterface__tp_richcompare (PyNs3WifiSpectrumPhyInterface *PYBINDGEN_UNUSED(self), PyNs3WifiSpectrumPhyInterface *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiSpectrumPhyInterface_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiSpectrumPhyInterface_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiSpectrumPhyInterface",            /* tp_name */
    sizeof(PyNs3WifiSpectrumPhyInterface),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiSpectrumPhyInterface__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiSpectrumPhyInterface()",                        /* Documentation string */
    (traverseproc)PyNs3WifiSpectrumPhyInterface__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiSpectrumPhyInterface__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiSpectrumPhyInterface__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiSpectrumPhyInterface_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiSpectrumPhyInterface, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiSpectrumPhyInterface__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3WifiSpectrumSignalParameters__get_packet(PyNs3WifiSpectrumSignalParameters *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->packet)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->packet)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}
static int _wrap_PyNs3WifiSpectrumSignalParameters__set_packet(PyNs3WifiSpectrumSignalParameters *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->packet = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiSpectrumSignalParameters__getsets[] = {
    {
        (char*) "packet", /* attribute name */
        (getter) _wrap_PyNs3WifiSpectrumSignalParameters__get_packet, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiSpectrumSignalParameters__set_packet, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiSpectrumSignalParameters__tp_init__0(PyNs3WifiSpectrumSignalParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiSpectrumSignalParameters();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiSpectrumSignalParameters__tp_init__1(PyNs3WifiSpectrumSignalParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiSpectrumSignalParameters *p;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiSpectrumSignalParameters_Type, &p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiSpectrumSignalParameters(*((PyNs3WifiSpectrumSignalParameters *) p)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiSpectrumSignalParameters__tp_init(PyNs3WifiSpectrumSignalParameters *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiSpectrumSignalParameters__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiSpectrumSignalParameters__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiSpectrumSignalParameters_Copy(PyNs3WifiSpectrumSignalParameters *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::SpectrumSignalParameters > retval;
    PyNs3SpectrumSignalParameters *py_SpectrumSignalParameters;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_SpectrumSignalParameters = NULL;
    } else {
        py_SpectrumSignalParameters = (PyNs3SpectrumSignalParameters *) wrapper_lookup_iter->second;
        Py_INCREF(py_SpectrumSignalParameters);
    }
    
    if (py_SpectrumSignalParameters == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (retval)))), &PyNs3SpectrumSignalParameters_Type);
        py_SpectrumSignalParameters = PyObject_New(PyNs3SpectrumSignalParameters, wrapper_type);
    
        py_SpectrumSignalParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (retval))->Ref();
        py_SpectrumSignalParameters->obj = const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumSignalParameters->obj] = (PyObject *) py_SpectrumSignalParameters;
    }
    py_retval = Py_BuildValue((char *) "N", py_SpectrumSignalParameters);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiSpectrumSignalParameters__copy__(PyNs3WifiSpectrumSignalParameters *self)
{

    PyNs3WifiSpectrumSignalParameters *py_copy;
    py_copy = PyObject_New(PyNs3WifiSpectrumSignalParameters, &PyNs3WifiSpectrumSignalParameters_Type);
    
    py_copy->obj = new ns3::WifiSpectrumSignalParameters(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiSpectrumSignalParameters_methods[] = {
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3WifiSpectrumSignalParameters_Copy, METH_NOARGS, "Copy()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiSpectrumSignalParameters__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiSpectrumSignalParameters__tp_dealloc(PyNs3WifiSpectrumSignalParameters *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiSpectrumSignalParameters *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiSpectrumSignalParameters__tp_richcompare (PyNs3WifiSpectrumSignalParameters *PYBINDGEN_UNUSED(self), PyNs3WifiSpectrumSignalParameters *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiSpectrumSignalParameters_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiSpectrumSignalParameters_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiSpectrumSignalParameters",            /* tp_name */
    sizeof(PyNs3WifiSpectrumSignalParameters),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiSpectrumSignalParameters__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiSpectrumSignalParameters(p)\nWifiSpectrumSignalParameters()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiSpectrumSignalParameters__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiSpectrumSignalParameters_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiSpectrumSignalParameters__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiSpectrumSignalParameters__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiTxCurrentModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3WifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3WifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiTxCurrentModel__PythonHelper::_wrap_DoInitialize(PyNs3WifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3WifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3WifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiTxCurrentModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3WifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3WifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiTxCurrentModel__PythonHelper::_wrap_DoDispose(PyNs3WifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3WifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3WifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3WifiTxCurrentModel__PythonHelper::CalcTxCurrent(double txPowerDbm) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiTxCurrentModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcTxCurrent"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiTxCurrentModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiTxCurrentModel* >(m_pyself)->obj = const_cast< ns3::WifiTxCurrentModel* >((const ns3::WifiTxCurrentModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcTxCurrent", (char *) "d", txPowerDbm);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiTxCurrentModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiTxCurrentModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiTxCurrentModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiTxCurrentModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiTxCurrentModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiTxCurrentModel__tp_init__0(PyNs3WifiTxCurrentModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiTxCurrentModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxCurrentModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiTxCurrentModel_Type)
    {
        self->obj = new PyNs3WifiTxCurrentModel__PythonHelper(*((PyNs3WifiTxCurrentModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiTxCurrentModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiTxCurrentModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiTxCurrentModel__tp_init__1(PyNs3WifiTxCurrentModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiTxCurrentModel_Type)
    {
        self->obj = new PyNs3WifiTxCurrentModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiTxCurrentModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiTxCurrentModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiTxCurrentModel__tp_init(PyNs3WifiTxCurrentModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiTxCurrentModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiTxCurrentModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiTxCurrentModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiTxCurrentModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiTxCurrentModel_CalcTxCurrent(PyNs3WifiTxCurrentModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double txPowerDbm;
    const char *keywords[] = {"txPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txPowerDbm)) {
        return NULL;
    }
    retval = self->obj->CalcTxCurrent(txPowerDbm);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

static PyMethodDef PyNs3WifiTxCurrentModel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiTxCurrentModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "CalcTxCurrent", (PyCFunction) _wrap_PyNs3WifiTxCurrentModel_CalcTxCurrent, METH_KEYWORDS|METH_VARARGS, "CalcTxCurrent(txPowerDbm)\n\ntype: txPowerDbm: double" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiTxCurrentModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiTxCurrentModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiTxCurrentModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3WifiTxCurrentModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiTxCurrentModel__tp_clear(PyNs3WifiTxCurrentModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiTxCurrentModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiTxCurrentModel__tp_traverse(PyNs3WifiTxCurrentModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiTxCurrentModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiTxCurrentModel__tp_dealloc(PyNs3WifiTxCurrentModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiTxCurrentModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiTxCurrentModel__tp_richcompare (PyNs3WifiTxCurrentModel *PYBINDGEN_UNUSED(self), PyNs3WifiTxCurrentModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiTxCurrentModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiTxCurrentModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiTxCurrentModel",            /* tp_name */
    sizeof(PyNs3WifiTxCurrentModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiTxCurrentModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiTxCurrentModel(arg0)\nWifiTxCurrentModel()",                        /* Documentation string */
    (traverseproc)PyNs3WifiTxCurrentModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiTxCurrentModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiTxCurrentModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiTxCurrentModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiTxCurrentModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiTxCurrentModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3YansWifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3YansWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiPhy__PythonHelper::_wrap_DoInitialize(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3YansWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class WifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiPhy__PythonHelper::_wrap_NotifyNewAggregate(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3YansWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiPhy__PythonHelper::_wrap_DoDispose(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3YansWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class YansWifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::Channel >
PyNs3YansWifiPhy__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiPhy *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiPhy::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = const_cast< ns3::YansWifiPhy* >((const ns3::YansWifiPhy*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiPhy::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiPhy::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiPhy__PythonHelper::StartTx(ns3::Ptr< ns3::Packet > packet, ns3::WifiTxVector txVector, ns3::Time txDuration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiTxVector *py_WifiTxVector;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartTx"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::YansWifiPhy::StartTx(packet, txVector, txDuration);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = (ns3::YansWifiPhy*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(txDuration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartTx", (char *) "NNN", py_Packet, py_WifiTxVector, py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::YansWifiPhy::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = (ns3::YansWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::SetChannelWidth(uint16_t channelwidth)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelWidth"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetChannelWidth(channelwidth);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelWidth", (char *) "i", (int) channelwidth);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::SetChannelNumber(uint8_t id)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetChannelNumber(id);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelNumber", (char *) "i", (int) id);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::ConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::ConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

int64_t
PyNs3YansWifiPhy__PythonHelper::AssignStreams(int64_t stream)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AssignStreams"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AssignStreams", (char *) "L", stream);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiPhy__PythonHelper::SetFrequency(uint16_t freq)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetFrequency"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::SetFrequency(freq);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetFrequency", (char *) "i", (int) freq);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiPhy::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3YansWifiPhy__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiPhy__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiPhy__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansWifiPhy__tp_init__0(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansWifiPhy *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiPhy_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiPhy_Type)
    {
        self->obj = new PyNs3YansWifiPhy__PythonHelper(*((PyNs3YansWifiPhy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiPhy(*((PyNs3YansWifiPhy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3YansWifiPhy__tp_init__1(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiPhy_Type)
    {
        self->obj = new PyNs3YansWifiPhy__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiPhy();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3YansWifiPhy__tp_init(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiPhy__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiPhy__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansWifiPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_StartTx(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    PyNs3Time *txDuration;
    PyNs3YansWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "txVector", "txDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &PyNs3Time_Type, &txDuration)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->StartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) txDuration)->obj)) : (self->obj->ns3::YansWifiPhy::StartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) txDuration)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetChannel(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3YansWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiPhy__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::YansWifiPhy::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansWifiPhy__copy__(PyNs3YansWifiPhy *self)
{

    PyNs3YansWifiPhy *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansWifiPhy, &PyNs3YansWifiPhy_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::YansWifiPhy(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansWifiPhy_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "StartTx", (PyCFunction) _wrap_PyNs3YansWifiPhy_StartTx, METH_KEYWORDS|METH_VARARGS, "StartTx(packet, txVector, txDuration)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: txVector: ns3::WifiTxVector\ntype: txDuration: ns3::Time" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3YansWifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3YansWifiPhy__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3YansWifiPhy__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3YansWifiPhy__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansWifiPhy__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansWifiPhy__tp_clear(PyNs3YansWifiPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansWifiPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansWifiPhy__tp_traverse(PyNs3YansWifiPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3YansWifiPhy__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansWifiPhy__tp_dealloc(PyNs3YansWifiPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansWifiPhy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiPhy__tp_richcompare (PyNs3YansWifiPhy *PYBINDGEN_UNUSED(self), PyNs3YansWifiPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiPhy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.YansWifiPhy",            /* tp_name */
    sizeof(PyNs3YansWifiPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "YansWifiPhy(arg0)\nYansWifiPhy()",                        /* Documentation string */
    (traverseproc)PyNs3YansWifiPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansWifiPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansWifiPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AarfWifiManager__tp_init__0(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AarfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AarfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfWifiManager(*((PyNs3AarfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AarfWifiManager__tp_init__1(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AarfWifiManager__tp_init(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AarfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AarfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AarfWifiManager_SetHtSupported(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AarfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfWifiManager_SetVhtSupported(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfWifiManager_SetHeSupported(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AarfWifiManager__copy__(PyNs3AarfWifiManager *self)
{

    PyNs3AarfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AarfWifiManager, &PyNs3AarfWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::AarfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AarfWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3AarfWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AarfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3AarfWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3AarfWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AarfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AarfWifiManager__tp_clear(PyNs3AarfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AarfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AarfWifiManager__tp_traverse(PyNs3AarfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AarfWifiManager__tp_dealloc(PyNs3AarfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AarfWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AarfWifiManager__tp_richcompare (PyNs3AarfWifiManager *PYBINDGEN_UNUSED(self), PyNs3AarfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AarfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AarfWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AarfWifiManager",            /* tp_name */
    sizeof(PyNs3AarfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AarfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AarfWifiManager(arg0)\nAarfWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3AarfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AarfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AarfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AarfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AarfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AarfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AarfcdWifiManager__tp_init__0(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AarfcdWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AarfcdWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfcdWifiManager(*((PyNs3AarfcdWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AarfcdWifiManager__tp_init__1(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfcdWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AarfcdWifiManager__tp_init(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AarfcdWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AarfcdWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AarfcdWifiManager_SetHtSupported(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfcdWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AarfcdWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfcdWifiManager_SetVhtSupported(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AarfcdWifiManager_SetHeSupported(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AarfcdWifiManager__copy__(PyNs3AarfcdWifiManager *self)
{

    PyNs3AarfcdWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AarfcdWifiManager, &PyNs3AarfcdWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::AarfcdWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AarfcdWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3AarfcdWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AarfcdWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3AarfcdWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3AarfcdWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AarfcdWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AarfcdWifiManager__tp_clear(PyNs3AarfcdWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AarfcdWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AarfcdWifiManager__tp_traverse(PyNs3AarfcdWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AarfcdWifiManager__tp_dealloc(PyNs3AarfcdWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AarfcdWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AarfcdWifiManager__tp_richcompare (PyNs3AarfcdWifiManager *PYBINDGEN_UNUSED(self), PyNs3AarfcdWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AarfcdWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AarfcdWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AarfcdWifiManager",            /* tp_name */
    sizeof(PyNs3AarfcdWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AarfcdWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AarfcdWifiManager(arg0)\nAarfcdWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3AarfcdWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AarfcdWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AarfcdWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AarfcdWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AarfcdWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AarfcdWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AmpduSubframeHeader__tp_init__0(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmpduSubframeHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmpduSubframeHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmpduSubframeHeader(*((PyNs3AmpduSubframeHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AmpduSubframeHeader__tp_init__1(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmpduSubframeHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AmpduSubframeHeader__tp_init(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmpduSubframeHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmpduSubframeHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_SetEof(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool eof;
    PyObject *py_eof;
    const char *keywords[] = {"eof", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_eof)) {
        return NULL;
    }
    eof = (bool) PyObject_IsTrue(py_eof);
    self->obj->SetEof(eof);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_Deserialize(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_GetLength(PyNs3AmpduSubframeHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmpduSubframeHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_Serialize(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_GetInstanceTypeId(PyNs3AmpduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_GetSerializedSize(PyNs3AmpduSubframeHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_GetEof(PyNs3AmpduSubframeHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetEof();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmpduSubframeHeader_SetLength(PyNs3AmpduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmpduSubframeHeader__copy__(PyNs3AmpduSubframeHeader *self)
{

    PyNs3AmpduSubframeHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmpduSubframeHeader, &PyNs3AmpduSubframeHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::AmpduSubframeHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmpduSubframeHeader_methods[] = {
    {(char *) "SetEof", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_SetEof, METH_KEYWORDS|METH_VARARGS, "SetEof(eof)\n\ntype: eof: bool" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetEof", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_GetEof, METH_NOARGS, "GetEof()\n\n" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint16_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmpduSubframeHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmpduSubframeHeader__tp_clear(PyNs3AmpduSubframeHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::AmpduSubframeHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3AmpduSubframeHeader__tp_traverse(PyNs3AmpduSubframeHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AmpduSubframeHeader__tp_dealloc(PyNs3AmpduSubframeHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmpduSubframeHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmpduSubframeHeader__tp_richcompare (PyNs3AmpduSubframeHeader *PYBINDGEN_UNUSED(self), PyNs3AmpduSubframeHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmpduSubframeHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmpduSubframeHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AmpduSubframeHeader",            /* tp_name */
    sizeof(PyNs3AmpduSubframeHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmpduSubframeHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AmpduSubframeHeader(arg0)\nAmpduSubframeHeader()",                        /* Documentation string */
    (traverseproc)PyNs3AmpduSubframeHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmpduSubframeHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmpduSubframeHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmpduSubframeHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmpduSubframeHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmpduSubframeHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AmrrWifiManager__tp_init__0(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmrrWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmrrWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmrrWifiManager(*((PyNs3AmrrWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AmrrWifiManager__tp_init__1(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmrrWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AmrrWifiManager__tp_init(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmrrWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmrrWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmrrWifiManager_SetHtSupported(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmrrWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmrrWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmrrWifiManager_SetVhtSupported(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmrrWifiManager_SetHeSupported(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmrrWifiManager__copy__(PyNs3AmrrWifiManager *self)
{

    PyNs3AmrrWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmrrWifiManager, &PyNs3AmrrWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::AmrrWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmrrWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3AmrrWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmrrWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3AmrrWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3AmrrWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmrrWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmrrWifiManager__tp_clear(PyNs3AmrrWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AmrrWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AmrrWifiManager__tp_traverse(PyNs3AmrrWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AmrrWifiManager__tp_dealloc(PyNs3AmrrWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmrrWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmrrWifiManager__tp_richcompare (PyNs3AmrrWifiManager *PYBINDGEN_UNUSED(self), PyNs3AmrrWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmrrWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmrrWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AmrrWifiManager",            /* tp_name */
    sizeof(PyNs3AmrrWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmrrWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AmrrWifiManager(arg0)\nAmrrWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3AmrrWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmrrWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmrrWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmrrWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmrrWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmrrWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AmsduSubframeHeader__tp_init__0(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmsduSubframeHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmsduSubframeHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmsduSubframeHeader(*((PyNs3AmsduSubframeHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AmsduSubframeHeader__tp_init__1(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmsduSubframeHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AmsduSubframeHeader__tp_init(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmsduSubframeHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmsduSubframeHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_Serialize(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_Deserialize(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetLength(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmsduSubframeHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetDestinationAddr(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetDestinationAddr();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetDestinationAddr(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    self->obj->SetDestinationAddr(*((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetInstanceTypeId(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetSerializedSize(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetSourceAddr(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    self->obj->SetSourceAddr(*((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetLength(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetSourceAddr(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetSourceAddr();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmsduSubframeHeader__copy__(PyNs3AmsduSubframeHeader *self)
{

    PyNs3AmsduSubframeHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmsduSubframeHeader, &PyNs3AmsduSubframeHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::AmsduSubframeHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmsduSubframeHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetDestinationAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetDestinationAddr, METH_NOARGS, "GetDestinationAddr()\n\n" },
    {(char *) "SetDestinationAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetDestinationAddr, METH_KEYWORDS|METH_VARARGS, "SetDestinationAddr(to)\n\ntype: to: ns3::Mac48Address" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetSourceAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetSourceAddr, METH_KEYWORDS|METH_VARARGS, "SetSourceAddr(to)\n\ntype: to: ns3::Mac48Address" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint16_t" },
    {(char *) "GetSourceAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetSourceAddr, METH_NOARGS, "GetSourceAddr()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmsduSubframeHeader__tp_clear(PyNs3AmsduSubframeHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::AmsduSubframeHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3AmsduSubframeHeader__tp_traverse(PyNs3AmsduSubframeHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AmsduSubframeHeader__tp_dealloc(PyNs3AmsduSubframeHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmsduSubframeHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmsduSubframeHeader__tp_richcompare (PyNs3AmsduSubframeHeader *PYBINDGEN_UNUSED(self), PyNs3AmsduSubframeHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmsduSubframeHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmsduSubframeHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AmsduSubframeHeader",            /* tp_name */
    sizeof(PyNs3AmsduSubframeHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmsduSubframeHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AmsduSubframeHeader(arg0)\nAmsduSubframeHeader()",                        /* Documentation string */
    (traverseproc)PyNs3AmsduSubframeHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmsduSubframeHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmsduSubframeHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmsduSubframeHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmsduSubframeHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmsduSubframeHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AparfWifiManager__tp_init__0(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AparfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AparfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AparfWifiManager(*((PyNs3AparfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AparfWifiManager__tp_init__1(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AparfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AparfWifiManager__tp_init(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AparfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AparfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AparfWifiManager_SetHtSupported(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AparfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AparfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AparfWifiManager_SetVhtSupported(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AparfWifiManager_SetHeSupported(PyNs3AparfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AparfWifiManager__copy__(PyNs3AparfWifiManager *self)
{

    PyNs3AparfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AparfWifiManager, &PyNs3AparfWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::AparfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AparfWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3AparfWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AparfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3AparfWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3AparfWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AparfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AparfWifiManager__tp_clear(PyNs3AparfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AparfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AparfWifiManager__tp_traverse(PyNs3AparfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AparfWifiManager__tp_dealloc(PyNs3AparfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AparfWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AparfWifiManager__tp_richcompare (PyNs3AparfWifiManager *PYBINDGEN_UNUSED(self), PyNs3AparfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AparfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AparfWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AparfWifiManager",            /* tp_name */
    sizeof(PyNs3AparfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AparfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AparfWifiManager(arg0)\nAparfWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3AparfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AparfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AparfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AparfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AparfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AparfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ArfWifiManager__tp_init__0(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ArfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ArfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ArfWifiManager(*((PyNs3ArfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ArfWifiManager__tp_init__1(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ArfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ArfWifiManager__tp_init(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ArfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ArfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ArfWifiManager_SetHtSupported(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ArfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ArfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ArfWifiManager_SetVhtSupported(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ArfWifiManager_SetHeSupported(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ArfWifiManager__copy__(PyNs3ArfWifiManager *self)
{

    PyNs3ArfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ArfWifiManager, &PyNs3ArfWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ArfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ArfWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3ArfWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ArfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3ArfWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3ArfWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ArfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ArfWifiManager__tp_clear(PyNs3ArfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ArfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ArfWifiManager__tp_traverse(PyNs3ArfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ArfWifiManager__tp_dealloc(PyNs3ArfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ArfWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ArfWifiManager__tp_richcompare (PyNs3ArfWifiManager *PYBINDGEN_UNUSED(self), PyNs3ArfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ArfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ArfWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ArfWifiManager",            /* tp_name */
    sizeof(PyNs3ArfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ArfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ArfWifiManager(arg0)\nArfWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3ArfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ArfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ArfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ArfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ArfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ArfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AthstatsWifiTraceSink__tp_init__0(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AthstatsWifiTraceSink *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AthstatsWifiTraceSink_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AthstatsWifiTraceSink(*((PyNs3AthstatsWifiTraceSink *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3AthstatsWifiTraceSink__tp_init__1(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AthstatsWifiTraceSink();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3AthstatsWifiTraceSink__tp_init(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AthstatsWifiTraceSink__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AthstatsWifiTraceSink__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_TxFinalDataFailedTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"context", "address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->TxFinalDataFailedTrace(std::string(context, context_len), *((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_DevTxTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"context", "p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->DevTxTrace(std::string(context, context_len), ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_PhyTxTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    int txPower;
    const char *keywords[] = {"context", "packet", "mode", "preamble", "txPower", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!O!ii", (char **) keywords, &context, &context_len, &PyNs3Packet_Type, &packet, &PyNs3WifiMode_Type, &mode, &preamble, &txPower)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (txPower > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->PhyTxTrace(std::string(context, context_len), ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMode *) mode)->obj, preamble, txPower);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_TxRtsFailedTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"context", "address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->TxRtsFailedTrace(std::string(context, context_len), *((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AthstatsWifiTraceSink::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_DevRxTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"context", "p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->DevRxTrace(std::string(context, context_len), ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_PhyRxOkTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double snr;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"context", "packet", "snr", "mode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!dO!i", (char **) keywords, &context, &context_len, &PyNs3Packet_Type, &packet, &snr, &PyNs3WifiMode_Type, &mode, &preamble)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PhyRxOkTrace(std::string(context, context_len), ns3::Ptr< ns3::Packet  > (packet_ptr), snr, *((PyNs3WifiMode *) mode)->obj, preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_PhyRxErrorTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double snr;
    const char *keywords[] = {"context", "packet", "snr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!d", (char **) keywords, &context, &context_len, &PyNs3Packet_Type, &packet, &snr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PhyRxErrorTrace(std::string(context, context_len), ns3::Ptr< ns3::Packet  > (packet_ptr), snr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_TxFinalRtsFailedTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"context", "address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->TxFinalRtsFailedTrace(std::string(context, context_len), *((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_Open(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name = NULL;
    Py_ssize_t name_len;
    std::string name_std;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        return NULL;
    }
    name_std = std::string(name, name_len);
    self->obj->Open(name_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AthstatsWifiTraceSink_TxDataFailedTrace(PyNs3AthstatsWifiTraceSink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"context", "address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &context, &context_len, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->TxDataFailedTrace(std::string(context, context_len), *((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3AthstatsWifiTraceSink__copy__(PyNs3AthstatsWifiTraceSink *self)
{

    PyNs3AthstatsWifiTraceSink *py_copy;
    py_copy = PyObject_GC_New(PyNs3AthstatsWifiTraceSink, &PyNs3AthstatsWifiTraceSink_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::AthstatsWifiTraceSink(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AthstatsWifiTraceSink_methods[] = {
    {(char *) "TxFinalDataFailedTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_TxFinalDataFailedTrace, METH_KEYWORDS|METH_VARARGS, "TxFinalDataFailedTrace(context, address)\n\ntype: context: std::string\ntype: address: ns3::Mac48Address" },
    {(char *) "DevTxTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_DevTxTrace, METH_KEYWORDS|METH_VARARGS, "DevTxTrace(context, p)\n\ntype: context: std::string\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "PhyTxTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_PhyTxTrace, METH_KEYWORDS|METH_VARARGS, "PhyTxTrace(context, packet, mode, preamble, txPower)\n\ntype: context: std::string\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: mode: ns3::WifiMode\ntype: preamble: ns3::WifiPreamble\ntype: txPower: uint8_t" },
    {(char *) "TxRtsFailedTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_TxRtsFailedTrace, METH_KEYWORDS|METH_VARARGS, "TxRtsFailedTrace(context, address)\n\ntype: context: std::string\ntype: address: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "DevRxTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_DevRxTrace, METH_KEYWORDS|METH_VARARGS, "DevRxTrace(context, p)\n\ntype: context: std::string\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "PhyRxOkTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_PhyRxOkTrace, METH_KEYWORDS|METH_VARARGS, "PhyRxOkTrace(context, packet, snr, mode, preamble)\n\ntype: context: std::string\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: snr: double\ntype: mode: ns3::WifiMode\ntype: preamble: ns3::WifiPreamble" },
    {(char *) "PhyRxErrorTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_PhyRxErrorTrace, METH_KEYWORDS|METH_VARARGS, "PhyRxErrorTrace(context, packet, snr)\n\ntype: context: std::string\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: snr: double" },
    {(char *) "TxFinalRtsFailedTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_TxFinalRtsFailedTrace, METH_KEYWORDS|METH_VARARGS, "TxFinalRtsFailedTrace(context, address)\n\ntype: context: std::string\ntype: address: ns3::Mac48Address" },
    {(char *) "Open", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_Open, METH_KEYWORDS|METH_VARARGS, "Open(name)\n\ntype: name: std::string const &" },
    {(char *) "TxDataFailedTrace", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink_TxDataFailedTrace, METH_KEYWORDS|METH_VARARGS, "TxDataFailedTrace(context, address)\n\ntype: context: std::string\ntype: address: ns3::Mac48Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AthstatsWifiTraceSink__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AthstatsWifiTraceSink__tp_clear(PyNs3AthstatsWifiTraceSink *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AthstatsWifiTraceSink *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AthstatsWifiTraceSink__tp_traverse(PyNs3AthstatsWifiTraceSink *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AthstatsWifiTraceSink__tp_dealloc(PyNs3AthstatsWifiTraceSink *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AthstatsWifiTraceSink__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AthstatsWifiTraceSink__tp_richcompare (PyNs3AthstatsWifiTraceSink *PYBINDGEN_UNUSED(self), PyNs3AthstatsWifiTraceSink *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AthstatsWifiTraceSink_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AthstatsWifiTraceSink_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AthstatsWifiTraceSink",            /* tp_name */
    sizeof(PyNs3AthstatsWifiTraceSink),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AthstatsWifiTraceSink__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AthstatsWifiTraceSink(arg0)\nAthstatsWifiTraceSink()",                        /* Documentation string */
    (traverseproc)PyNs3AthstatsWifiTraceSink__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AthstatsWifiTraceSink__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AthstatsWifiTraceSink__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AthstatsWifiTraceSink_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AthstatsWifiTraceSink, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AthstatsWifiTraceSink__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3BlockAckManager__tp_init(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::BlockAckManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNRetryNeededPackets(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNRetryNeededPackets(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_HasPackets(PyNs3BlockAckManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasPackets();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_ExistsAgreementInState(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    ns3::OriginatorBlockAckAgreement::State state;
    const char *keywords[] = {"recipient", "tid", "state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &state)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->ExistsAgreementInState(*((PyNs3Mac48Address *) recipient)->obj, tid, state);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetSeqNumOfNextRetryPacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetSeqNumOfNextRetryPacket(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockAckThreshold(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nPackets;
    const char *keywords[] = {"nPackets", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nPackets)) {
        return NULL;
    }
    if (nPackets > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckThreshold(nPackets);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyGotBlockAck(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *recipient;
    double rxSnr;
    PyNs3WifiMode *txMode;
    double dataSnr;
    const char *keywords[] = {"blockAck", "recipient", "rxSnr", "txMode", "dataSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &recipient, &rxSnr, &PyNs3WifiMode_Type, &txMode, &dataSnr)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    self->obj->NotifyGotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj, rxSnr, *((PyNs3WifiMode *) txMode)->obj, dataSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_AlreadyExists(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int currentSeq;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"currentSeq", "recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!i", (char **) keywords, &currentSeq, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (currentSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->AlreadyExists(currentSeq, *((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNBufferedPackets(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNBufferedPackets(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_UpdateAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"respHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    self->obj->UpdateAgreement(respHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNextPacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3WifiMacHeader *hdr;
    bool removePacket;
    PyObject *py_removePacket;
    const char *keywords[] = {"hdr", "removePacket", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr, &py_removePacket)) {
        return NULL;
    }
    removePacket = (bool) PyObject_IsTrue(py_removePacket);
    retval = self->obj->GetNextPacket(*((PyNs3WifiMacHeader *) hdr)->obj, removePacket);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyMpduTransmission(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    int nextSeqNumber;
    ns3::WifiMacHeader::QosAckPolicy policy;
    const char *keywords[] = {"recipient", "tid", "nextSeqNumber", "policy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &nextSeqNumber, &policy)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nextSeqNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyMpduTransmission(*((PyNs3Mac48Address *) recipient)->obj, tid, nextSeqNumber, policy);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyAgreementEstablished(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    int startingSeq;
    const char *keywords[] = {"recipient", "tid", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &startingSeq)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyAgreementEstablished(*((PyNs3Mac48Address *) recipient)->obj, tid, startingSeq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_CompleteAmpduExchange(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CompleteAmpduExchange(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyAgreementUnsuccessful(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyAgreementUnsuccessful(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_DestroyAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->DestroyAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetTxOkCallback(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl8> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl8> (callback);
    self->obj->SetTxOkCallback(ns3::Callback<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BlockAckManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetTxFailedCallback(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl8> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl8> (callback);
    self->obj->SetTxFailedCallback(ns3::Callback<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_HasBar(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Bar *bar;
    const char *keywords[] = {"bar", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Bar_Type, &bar)) {
        return NULL;
    }
    retval = self->obj->HasBar(*((PyNs3Bar *) bar)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_ExistsAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->ExistsAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_RemovePacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int tid;
    PyNs3Mac48Address *recipient;
    int seqnumber;
    const char *keywords[] = {"tid", "recipient", "seqnumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!i", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &recipient, &seqnumber)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (seqnumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->RemovePacket(tid, *((PyNs3Mac48Address *) recipient)->obj, seqnumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NeedBarRetransmission(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int tid;
    int seqNumber;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"tid", "seqNumber", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiO!", (char **) keywords, &tid, &seqNumber, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (seqNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->NeedBarRetransmission(tid, seqNumber, *((PyNs3Mac48Address *) recipient)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetMaxPacketDelay(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *maxDelay;
    const char *keywords[] = {"maxDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &maxDelay)) {
        return NULL;
    }
    self->obj->SetMaxPacketDelay(*((PyNs3Time *) maxDelay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockAckInactivityCallback(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl6> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl6> (callback);
    self->obj->SetBlockAckInactivityCallback(ns3::Callback<void, ns3::Mac48Address, unsigned char, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_CreateAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader *reqHdr;
    ns3::MgtAddBaRequestHeader *reqHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"reqHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &reqHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    reqHdr_ptr = (reqHdr ? reqHdr->obj : NULL);
    self->obj->CreateAgreement(reqHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetUnblockDestinationCallback(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl7> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl7> (callback);
    self->obj->SetUnblockDestinationCallback(ns3::Callback<void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SwitchToBlockAckIfNeeded(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    int startingSeq;
    const char *keywords[] = {"recipient", "tid", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &startingSeq)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->SwitchToBlockAckIfNeeded(*((PyNs3Mac48Address *) recipient)->obj, tid, startingSeq);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_StorePacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyNs3Time *tStamp;
    const char *keywords[] = {"packet", "hdr", "tStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3Time_Type, &tStamp)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->StorePacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj, *((PyNs3Time *) tStamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockAckType(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType bAckType;
    const char *keywords[] = {"bAckType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bAckType)) {
        return NULL;
    }
    self->obj->SetBlockAckType(bAckType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockDestinationCallback(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl7> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl7> (callback);
    self->obj->SetBlockDestinationCallback(ns3::Callback<void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3BlockAckManager_methods[] = {
    {(char *) "GetNRetryNeededPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNRetryNeededPackets, METH_KEYWORDS|METH_VARARGS, "GetNRetryNeededPackets(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "HasPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_HasPackets, METH_NOARGS, "HasPackets()\n\n" },
    {(char *) "ExistsAgreementInState", (PyCFunction) _wrap_PyNs3BlockAckManager_ExistsAgreementInState, METH_KEYWORDS|METH_VARARGS, "ExistsAgreementInState(recipient, tid, state)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t\ntype: state: ns3::OriginatorBlockAckAgreement::State" },
    {(char *) "GetSeqNumOfNextRetryPacket", (PyCFunction) _wrap_PyNs3BlockAckManager_GetSeqNumOfNextRetryPacket, METH_KEYWORDS|METH_VARARGS, "GetSeqNumOfNextRetryPacket(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "SetBlockAckThreshold", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockAckThreshold, METH_KEYWORDS|METH_VARARGS, "SetBlockAckThreshold(nPackets)\n\ntype: nPackets: uint8_t" },
    {(char *) "NotifyGotBlockAck", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyGotBlockAck, METH_KEYWORDS|METH_VARARGS, "NotifyGotBlockAck(blockAck, recipient, rxSnr, txMode, dataSnr)\n\ntype: blockAck: ns3::CtrlBAckResponseHeader const *\ntype: recipient: ns3::Mac48Address\ntype: rxSnr: double\ntype: txMode: ns3::WifiMode\ntype: dataSnr: double" },
    {(char *) "AlreadyExists", (PyCFunction) _wrap_PyNs3BlockAckManager_AlreadyExists, METH_KEYWORDS|METH_VARARGS, "AlreadyExists(currentSeq, recipient, tid)\n\ntype: currentSeq: uint16_t\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "GetNBufferedPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNBufferedPackets, METH_KEYWORDS|METH_VARARGS, "GetNBufferedPackets(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "UpdateAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_UpdateAgreement, METH_KEYWORDS|METH_VARARGS, "UpdateAgreement(respHdr, recipient)\n\ntype: respHdr: ns3::MgtAddBaResponseHeader const *\ntype: recipient: ns3::Mac48Address" },
    {(char *) "GetNextPacket", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNextPacket, METH_KEYWORDS|METH_VARARGS, "GetNextPacket(hdr, removePacket)\n\ntype: hdr: ns3::WifiMacHeader &\ntype: removePacket: bool" },
    {(char *) "NotifyMpduTransmission", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyMpduTransmission, METH_KEYWORDS|METH_VARARGS, "NotifyMpduTransmission(recipient, tid, nextSeqNumber, policy)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t\ntype: nextSeqNumber: uint16_t\ntype: policy: ns3::WifiMacHeader::QosAckPolicy" },
    {(char *) "NotifyAgreementEstablished", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyAgreementEstablished, METH_KEYWORDS|METH_VARARGS, "NotifyAgreementEstablished(recipient, tid, startingSeq)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t\ntype: startingSeq: uint16_t" },
    {(char *) "CompleteAmpduExchange", (PyCFunction) _wrap_PyNs3BlockAckManager_CompleteAmpduExchange, METH_KEYWORDS|METH_VARARGS, "CompleteAmpduExchange(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "NotifyAgreementUnsuccessful", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyAgreementUnsuccessful, METH_KEYWORDS|METH_VARARGS, "NotifyAgreementUnsuccessful(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "DestroyAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_DestroyAgreement, METH_KEYWORDS|METH_VARARGS, "DestroyAgreement(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "SetTxOkCallback", (PyCFunction) _wrap_PyNs3BlockAckManager_SetTxOkCallback, METH_KEYWORDS|METH_VARARGS, "SetTxOkCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::WifiMacHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BlockAckManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetTxFailedCallback", (PyCFunction) _wrap_PyNs3BlockAckManager_SetTxFailedCallback, METH_KEYWORDS|METH_VARARGS, "SetTxFailedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::WifiMacHeader const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "HasBar", (PyCFunction) _wrap_PyNs3BlockAckManager_HasBar, METH_KEYWORDS|METH_VARARGS, "HasBar(bar)\n\ntype: bar: ns3::Bar &" },
    {(char *) "ExistsAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_ExistsAgreement, METH_KEYWORDS|METH_VARARGS, "ExistsAgreement(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "RemovePacket", (PyCFunction) _wrap_PyNs3BlockAckManager_RemovePacket, METH_KEYWORDS|METH_VARARGS, "RemovePacket(tid, recipient, seqnumber)\n\ntype: tid: uint8_t\ntype: recipient: ns3::Mac48Address\ntype: seqnumber: uint16_t" },
    {(char *) "NeedBarRetransmission", (PyCFunction) _wrap_PyNs3BlockAckManager_NeedBarRetransmission, METH_KEYWORDS|METH_VARARGS, "NeedBarRetransmission(tid, seqNumber, recipient)\n\ntype: tid: uint8_t\ntype: seqNumber: uint16_t\ntype: recipient: ns3::Mac48Address" },
    {(char *) "SetMaxPacketDelay", (PyCFunction) _wrap_PyNs3BlockAckManager_SetMaxPacketDelay, METH_KEYWORDS|METH_VARARGS, "SetMaxPacketDelay(maxDelay)\n\ntype: maxDelay: ns3::Time" },
    {(char *) "SetBlockAckInactivityCallback", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockAckInactivityCallback, METH_KEYWORDS|METH_VARARGS, "SetBlockAckInactivityCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Mac48Address, unsigned char, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "CreateAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_CreateAgreement, METH_KEYWORDS|METH_VARARGS, "CreateAgreement(reqHdr, recipient)\n\ntype: reqHdr: ns3::MgtAddBaRequestHeader const *\ntype: recipient: ns3::Mac48Address" },
    {(char *) "SetUnblockDestinationCallback", (PyCFunction) _wrap_PyNs3BlockAckManager_SetUnblockDestinationCallback, METH_KEYWORDS|METH_VARARGS, "SetUnblockDestinationCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SwitchToBlockAckIfNeeded", (PyCFunction) _wrap_PyNs3BlockAckManager_SwitchToBlockAckIfNeeded, METH_KEYWORDS|METH_VARARGS, "SwitchToBlockAckIfNeeded(recipient, tid, startingSeq)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t\ntype: startingSeq: uint16_t" },
    {(char *) "StorePacket", (PyCFunction) _wrap_PyNs3BlockAckManager_StorePacket, METH_KEYWORDS|METH_VARARGS, "StorePacket(packet, hdr, tStamp)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const &\ntype: tStamp: ns3::Time" },
    {(char *) "SetBlockAckType", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockAckType, METH_KEYWORDS|METH_VARARGS, "SetBlockAckType(bAckType)\n\ntype: bAckType: ns3::BlockAckType" },
    {(char *) "SetBlockDestinationCallback", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockDestinationCallback, METH_KEYWORDS|METH_VARARGS, "SetBlockDestinationCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BlockAckManager__tp_clear(PyNs3BlockAckManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BlockAckManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BlockAckManager__tp_traverse(PyNs3BlockAckManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3BlockAckManager__tp_dealloc(PyNs3BlockAckManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BlockAckManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BlockAckManager__tp_richcompare (PyNs3BlockAckManager *PYBINDGEN_UNUSED(self), PyNs3BlockAckManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BlockAckManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BlockAckManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.BlockAckManager",            /* tp_name */
    sizeof(PyNs3BlockAckManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BlockAckManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BlockAckManager()",                        /* Documentation string */
    (traverseproc)PyNs3BlockAckManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BlockAckManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BlockAckManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BlockAckManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BlockAckManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BlockAckManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CaraWifiManager__tp_init__0(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CaraWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CaraWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CaraWifiManager(*((PyNs3CaraWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CaraWifiManager__tp_init__1(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CaraWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CaraWifiManager__tp_init(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CaraWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CaraWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CaraWifiManager_SetHtSupported(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CaraWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CaraWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CaraWifiManager_SetVhtSupported(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CaraWifiManager_SetHeSupported(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CaraWifiManager__copy__(PyNs3CaraWifiManager *self)
{

    PyNs3CaraWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3CaraWifiManager, &PyNs3CaraWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::CaraWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CaraWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3CaraWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CaraWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3CaraWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3CaraWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CaraWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CaraWifiManager__tp_clear(PyNs3CaraWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::CaraWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3CaraWifiManager__tp_traverse(PyNs3CaraWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3CaraWifiManager__tp_dealloc(PyNs3CaraWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CaraWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CaraWifiManager__tp_richcompare (PyNs3CaraWifiManager *PYBINDGEN_UNUSED(self), PyNs3CaraWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CaraWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CaraWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CaraWifiManager",            /* tp_name */
    sizeof(PyNs3CaraWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CaraWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "CaraWifiManager(arg0)\nCaraWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3CaraWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CaraWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CaraWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CaraWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CaraWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CaraWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CfParameterSet__tp_init__0(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CfParameterSet *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CfParameterSet_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CfParameterSet(*((PyNs3CfParameterSet *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CfParameterSet__tp_init__1(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CfParameterSet();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CfParameterSet__tp_init(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CfParameterSet__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CfParameterSet__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CfParameterSet_SetCFPCount(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int cfpcount;
    const char *keywords[] = {"cfpcount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &cfpcount)) {
        return NULL;
    }
    if (cfpcount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetCFPCount(cfpcount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetCFPPeriod(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetCFPPeriod();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_Serialize(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_DeserializeInformationField(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_SetCFPDurRemainingUs(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t cfpdurremaining;
    const char *keywords[] = {"cfpdurremaining", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &cfpdurremaining)) {
        return NULL;
    }
    self->obj->SetCFPDurRemainingUs(cfpdurremaining);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetCFPMaxDurationUs(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetCFPMaxDurationUs();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetInformationFieldSize(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_SetPcfSupported(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int pcfSupported;
    const char *keywords[] = {"pcfSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &pcfSupported)) {
        return NULL;
    }
    if (pcfSupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPcfSupported(pcfSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_ElementId(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_SetCFPPeriod(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int cfpperiod;
    const char *keywords[] = {"cfpperiod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &cfpperiod)) {
        return NULL;
    }
    if (cfpperiod > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetCFPPeriod(cfpperiod);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetSerializedSize(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_SetCFPMaxDurationUs(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t cfpmaxduration;
    const char *keywords[] = {"cfpmaxduration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &cfpmaxduration)) {
        return NULL;
    }
    self->obj->SetCFPMaxDurationUs(cfpmaxduration);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetCFPCount(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetCFPCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_GetCFPDurRemainingUs(PyNs3CfParameterSet *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetCFPDurRemainingUs();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CfParameterSet_SerializeInformationField(PyNs3CfParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CfParameterSet__copy__(PyNs3CfParameterSet *self)
{

    PyNs3CfParameterSet *py_copy;
    py_copy = PyObject_New(PyNs3CfParameterSet, &PyNs3CfParameterSet_Type);
    
    py_copy->obj = new ns3::CfParameterSet(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CfParameterSet_methods[] = {
    {(char *) "SetCFPCount", (PyCFunction) _wrap_PyNs3CfParameterSet_SetCFPCount, METH_KEYWORDS|METH_VARARGS, "SetCFPCount(cfpcount)\n\ntype: cfpcount: uint8_t" },
    {(char *) "GetCFPPeriod", (PyCFunction) _wrap_PyNs3CfParameterSet_GetCFPPeriod, METH_NOARGS, "GetCFPPeriod()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CfParameterSet_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3CfParameterSet_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SetCFPDurRemainingUs", (PyCFunction) _wrap_PyNs3CfParameterSet_SetCFPDurRemainingUs, METH_KEYWORDS|METH_VARARGS, "SetCFPDurRemainingUs(cfpdurremaining)\n\ntype: cfpdurremaining: uint64_t" },
    {(char *) "GetCFPMaxDurationUs", (PyCFunction) _wrap_PyNs3CfParameterSet_GetCFPMaxDurationUs, METH_NOARGS, "GetCFPMaxDurationUs()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3CfParameterSet_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetPcfSupported", (PyCFunction) _wrap_PyNs3CfParameterSet_SetPcfSupported, METH_KEYWORDS|METH_VARARGS, "SetPcfSupported(pcfSupported)\n\ntype: pcfSupported: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3CfParameterSet_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetCFPPeriod", (PyCFunction) _wrap_PyNs3CfParameterSet_SetCFPPeriod, METH_KEYWORDS|METH_VARARGS, "SetCFPPeriod(cfpperiod)\n\ntype: cfpperiod: uint8_t" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CfParameterSet_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetCFPMaxDurationUs", (PyCFunction) _wrap_PyNs3CfParameterSet_SetCFPMaxDurationUs, METH_KEYWORDS|METH_VARARGS, "SetCFPMaxDurationUs(cfpmaxduration)\n\ntype: cfpmaxduration: uint64_t" },
    {(char *) "GetCFPCount", (PyCFunction) _wrap_PyNs3CfParameterSet_GetCFPCount, METH_NOARGS, "GetCFPCount()\n\n" },
    {(char *) "GetCFPDurRemainingUs", (PyCFunction) _wrap_PyNs3CfParameterSet_GetCFPDurRemainingUs, METH_NOARGS, "GetCFPDurRemainingUs()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3CfParameterSet_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CfParameterSet__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CfParameterSet__tp_dealloc(PyNs3CfParameterSet *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CfParameterSet *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3CfParameterSet__tp_str(PyNs3CfParameterSet *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3CfParameterSet__tp_richcompare (PyNs3CfParameterSet *PYBINDGEN_UNUSED(self), PyNs3CfParameterSet *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CfParameterSet_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CfParameterSet_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CfParameterSet",            /* tp_name */
    sizeof(PyNs3CfParameterSet),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CfParameterSet__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3CfParameterSet__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CfParameterSet(arg0)\nCfParameterSet()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CfParameterSet__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CfParameterSet_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CfParameterSet__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ChannelAccessManager__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    PyNs3ChannelAccessManager__PythonHelper *helper = dynamic_cast< PyNs3ChannelAccessManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ChannelAccessManager__PythonHelper::_wrap_DoInitialize(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    PyNs3ChannelAccessManager__PythonHelper *helper = dynamic_cast< PyNs3ChannelAccessManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ChannelAccessManager__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    PyNs3ChannelAccessManager__PythonHelper *helper = dynamic_cast< PyNs3ChannelAccessManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ChannelAccessManager__PythonHelper::_wrap_DoDispose(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    PyNs3ChannelAccessManager__PythonHelper *helper = dynamic_cast< PyNs3ChannelAccessManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class ChannelAccessManager is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3ChannelAccessManager__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ChannelAccessManager *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ChannelAccessManager::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ChannelAccessManager* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ChannelAccessManager* >(m_pyself)->obj = (ns3::ChannelAccessManager*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ChannelAccessManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ChannelAccessManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ChannelAccessManager* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3ChannelAccessManager__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ChannelAccessManager__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ChannelAccessManager__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ChannelAccessManager__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3ChannelAccessManager__tp_init__0(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ChannelAccessManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ChannelAccessManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ChannelAccessManager_Type)
    {
        self->obj = new PyNs3ChannelAccessManager__PythonHelper(*((PyNs3ChannelAccessManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ChannelAccessManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ChannelAccessManager(*((PyNs3ChannelAccessManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3ChannelAccessManager__tp_init__1(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ChannelAccessManager_Type)
    {
        self->obj = new PyNs3ChannelAccessManager__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ChannelAccessManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ChannelAccessManager();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3ChannelAccessManager__tp_init(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ChannelAccessManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ChannelAccessManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifySwitchingStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifySwitchingStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_Add(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Txop *dcf;
    ns3::Txop *dcf_ptr;
    const char *keywords[] = {"dcf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Txop_Type, &dcf)) {
        return NULL;
    }
    dcf_ptr = (dcf ? dcf->obj : NULL);
    self->obj->Add(ns3::Ptr< ns3::Txop  > (dcf_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_GetEifsNoDifs(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEifsNoDifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_RequestAccess(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Txop *state;
    ns3::Txop *state_ptr;
    bool isCfPeriod;
    PyObject *py_isCfPeriod = NULL;
    const char *keywords[] = {"state", "isCfPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|O", (char **) keywords, &PyNs3Txop_Type, &state, &py_isCfPeriod)) {
        return NULL;
    }
    state_ptr = (state ? state->obj : NULL);
    isCfPeriod = py_isCfPeriod? (bool) PyObject_IsTrue(py_isCfPeriod) : false;
    self->obj->RequestAccess(ns3::Ptr< ns3::Txop  > (state_ptr), isCfPeriod);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyAckTimeoutStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyAckTimeoutStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_SetSlot(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *slotTime;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &slotTime)) {
        return NULL;
    }
    self->obj->SetSlot(*((PyNs3Time *) slotTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyOffNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyOffNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyTxStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyTxStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyRxStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyRxStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyWakeupNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyWakeupNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyAckTimeoutResetNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyAckTimeoutResetNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifySleepNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifySleepNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_SetupPhyListener(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetupPhyListener(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyMaybeCcaBusyStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyMaybeCcaBusyStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyRxEndErrorNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndErrorNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyCtsTimeoutStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyCtsTimeoutStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyNavResetNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyNavResetNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_SetSifs(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *sifs;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &sifs)) {
        return NULL;
    }
    self->obj->SetSifs(*((PyNs3Time *) sifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_IsBusy(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_SetupLow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MacLow *low;
    ns3::MacLow *low_ptr;
    const char *keywords[] = {"low", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &low)) {
        return NULL;
    }
    low_ptr = (low ? low->obj : NULL);
    self->obj->SetupLow(ns3::Ptr< ns3::MacLow  > (low_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_RemovePhyListener(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->RemovePhyListener(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyNavStartNow(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifyNavStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_SetEifsNoDifs(PyNs3ChannelAccessManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *eifsNoDifs;
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &eifsNoDifs)) {
        return NULL;
    }
    self->obj->SetEifsNoDifs(*((PyNs3Time *) eifsNoDifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyRxEndOkNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndOkNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyOnNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyOnNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ChannelAccessManager_NotifyCtsTimeoutResetNow(PyNs3ChannelAccessManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyCtsTimeoutResetNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ChannelAccessManager__copy__(PyNs3ChannelAccessManager *self)
{

    PyNs3ChannelAccessManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ChannelAccessManager, &PyNs3ChannelAccessManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ChannelAccessManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ChannelAccessManager_methods[] = {
    {(char *) "NotifySwitchingStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifySwitchingStartNow, METH_KEYWORDS|METH_VARARGS, "NotifySwitchingStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3ChannelAccessManager_Add, METH_KEYWORDS|METH_VARARGS, "Add(dcf)\n\ntype: dcf: ns3::Ptr< ns3::Txop >" },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3ChannelAccessManager_GetEifsNoDifs, METH_NOARGS, "GetEifsNoDifs()\n\n" },
    {(char *) "RequestAccess", (PyCFunction) _wrap_PyNs3ChannelAccessManager_RequestAccess, METH_KEYWORDS|METH_VARARGS, "RequestAccess(state, isCfPeriod)\n\ntype: state: ns3::Ptr< ns3::Txop >\ntype: isCfPeriod: bool" },
    {(char *) "NotifyAckTimeoutStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyAckTimeoutStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyAckTimeoutStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3ChannelAccessManager_SetSlot, METH_KEYWORDS|METH_VARARGS, "SetSlot(slotTime)\n\ntype: slotTime: ns3::Time" },
    {(char *) "NotifyOffNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyOffNow, METH_NOARGS, "NotifyOffNow()\n\n" },
    {(char *) "NotifyTxStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyTxStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyTxStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyRxStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyRxStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyRxStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyWakeupNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyWakeupNow, METH_NOARGS, "NotifyWakeupNow()\n\n" },
    {(char *) "NotifyAckTimeoutResetNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyAckTimeoutResetNow, METH_NOARGS, "NotifyAckTimeoutResetNow()\n\n" },
    {(char *) "NotifySleepNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifySleepNow, METH_NOARGS, "NotifySleepNow()\n\n" },
    {(char *) "SetupPhyListener", (PyCFunction) _wrap_PyNs3ChannelAccessManager_SetupPhyListener, METH_KEYWORDS|METH_VARARGS, "SetupPhyListener(phy)\n\ntype: phy: ns3::Ptr< ns3::WifiPhy >" },
    {(char *) "NotifyMaybeCcaBusyStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyMaybeCcaBusyStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyMaybeCcaBusyStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyRxEndErrorNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyRxEndErrorNow, METH_NOARGS, "NotifyRxEndErrorNow()\n\n" },
    {(char *) "NotifyCtsTimeoutStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyCtsTimeoutStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyCtsTimeoutStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "NotifyNavResetNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyNavResetNow, METH_KEYWORDS|METH_VARARGS, "NotifyNavResetNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3ChannelAccessManager_SetSifs, METH_KEYWORDS|METH_VARARGS, "SetSifs(sifs)\n\ntype: sifs: ns3::Time" },
    {(char *) "IsBusy", (PyCFunction) _wrap_PyNs3ChannelAccessManager_IsBusy, METH_NOARGS, "IsBusy()\n\n" },
    {(char *) "SetupLow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_SetupLow, METH_KEYWORDS|METH_VARARGS, "SetupLow(low)\n\ntype: low: ns3::Ptr< ns3::MacLow >" },
    {(char *) "RemovePhyListener", (PyCFunction) _wrap_PyNs3ChannelAccessManager_RemovePhyListener, METH_KEYWORDS|METH_VARARGS, "RemovePhyListener(phy)\n\ntype: phy: ns3::Ptr< ns3::WifiPhy >" },
    {(char *) "NotifyNavStartNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyNavStartNow, METH_KEYWORDS|METH_VARARGS, "NotifyNavStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3ChannelAccessManager_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, "SetEifsNoDifs(eifsNoDifs)\n\ntype: eifsNoDifs: ns3::Time" },
    {(char *) "NotifyRxEndOkNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyRxEndOkNow, METH_NOARGS, "NotifyRxEndOkNow()\n\n" },
    {(char *) "NotifyOnNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyOnNow, METH_NOARGS, "NotifyOnNow()\n\n" },
    {(char *) "NotifyCtsTimeoutResetNow", (PyCFunction) _wrap_PyNs3ChannelAccessManager_NotifyCtsTimeoutResetNow, METH_NOARGS, "NotifyCtsTimeoutResetNow()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ChannelAccessManager__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3ChannelAccessManager__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ChannelAccessManager__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3ChannelAccessManager__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ChannelAccessManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ChannelAccessManager__tp_clear(PyNs3ChannelAccessManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ChannelAccessManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ChannelAccessManager__tp_traverse(PyNs3ChannelAccessManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3ChannelAccessManager__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ChannelAccessManager__tp_dealloc(PyNs3ChannelAccessManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ChannelAccessManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ChannelAccessManager__tp_richcompare (PyNs3ChannelAccessManager *PYBINDGEN_UNUSED(self), PyNs3ChannelAccessManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ChannelAccessManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ChannelAccessManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ChannelAccessManager",            /* tp_name */
    sizeof(PyNs3ChannelAccessManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ChannelAccessManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ChannelAccessManager(arg0)\nChannelAccessManager()",                        /* Documentation string */
    (traverseproc)PyNs3ChannelAccessManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ChannelAccessManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ChannelAccessManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ChannelAccessManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ChannelAccessManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ChannelAccessManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ConstantRateWifiManager__tp_init__0(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ConstantRateWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ConstantRateWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ConstantRateWifiManager(*((PyNs3ConstantRateWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ConstantRateWifiManager__tp_init__1(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ConstantRateWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ConstantRateWifiManager__tp_init(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ConstantRateWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ConstantRateWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ConstantRateWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ConstantRateWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ConstantRateWifiManager__copy__(PyNs3ConstantRateWifiManager *self)
{

    PyNs3ConstantRateWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ConstantRateWifiManager, &PyNs3ConstantRateWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ConstantRateWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ConstantRateWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ConstantRateWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ConstantRateWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ConstantRateWifiManager__tp_clear(PyNs3ConstantRateWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ConstantRateWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ConstantRateWifiManager__tp_traverse(PyNs3ConstantRateWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ConstantRateWifiManager__tp_dealloc(PyNs3ConstantRateWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ConstantRateWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ConstantRateWifiManager__tp_richcompare (PyNs3ConstantRateWifiManager *PYBINDGEN_UNUSED(self), PyNs3ConstantRateWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ConstantRateWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ConstantRateWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ConstantRateWifiManager",            /* tp_name */
    sizeof(PyNs3ConstantRateWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ConstantRateWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ConstantRateWifiManager(arg0)\nConstantRateWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3ConstantRateWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ConstantRateWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ConstantRateWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ConstantRateWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ConstantRateWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ConstantRateWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CtrlBAckRequestHeader__tp_init__0(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CtrlBAckRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CtrlBAckRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CtrlBAckRequestHeader(*((PyNs3CtrlBAckRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CtrlBAckRequestHeader__tp_init__1(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CtrlBAckRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CtrlBAckRequestHeader__tp_init(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CtrlBAckRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CtrlBAckRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_Serialize(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequence(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_MustSendHtImmediateAck(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendHtImmediateAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_Deserialize(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsMultiTid(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultiTid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CtrlBAckRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsCompressed(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCompressed();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsBasic(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBasic();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequenceControl(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetStartingSequence(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetHtImmediateAck(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool immediateAck;
    PyObject *py_immediateAck;
    const char *keywords[] = {"immediateAck", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_immediateAck)) {
        return NULL;
    }
    immediateAck = (bool) PyObject_IsTrue(py_immediateAck);
    self->obj->SetHtImmediateAck(immediateAck);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetInstanceTypeId(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetSerializedSize(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetTidInfo(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTidInfo(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetTidInfo(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTidInfo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetType(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CtrlBAckRequestHeader__copy__(PyNs3CtrlBAckRequestHeader *self)
{

    PyNs3CtrlBAckRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3CtrlBAckRequestHeader, &PyNs3CtrlBAckRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::CtrlBAckRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CtrlBAckRequestHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequence, METH_NOARGS, "GetStartingSequence()\n\n" },
    {(char *) "MustSendHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_MustSendHtImmediateAck, METH_NOARGS, "MustSendHtImmediateAck()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "IsMultiTid", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsMultiTid, METH_NOARGS, "IsMultiTid()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "IsCompressed", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsCompressed, METH_NOARGS, "IsCompressed()\n\n" },
    {(char *) "IsBasic", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsBasic, METH_NOARGS, "IsBasic()\n\n" },
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequenceControl, METH_NOARGS, "GetStartingSequenceControl()\n\n" },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, "SetStartingSequence(seq)\n\ntype: seq: uint16_t" },
    {(char *) "SetHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetHtImmediateAck, METH_KEYWORDS|METH_VARARGS, "SetHtImmediateAck(immediateAck)\n\ntype: immediateAck: bool" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetTidInfo, METH_KEYWORDS|METH_VARARGS, "SetTidInfo(tid)\n\ntype: tid: uint8_t" },
    {(char *) "GetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetTidInfo, METH_NOARGS, "GetTidInfo()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: ns3::BlockAckType" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CtrlBAckRequestHeader__tp_clear(PyNs3CtrlBAckRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CtrlBAckRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CtrlBAckRequestHeader__tp_traverse(PyNs3CtrlBAckRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3CtrlBAckRequestHeader__tp_dealloc(PyNs3CtrlBAckRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CtrlBAckRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CtrlBAckRequestHeader__tp_richcompare (PyNs3CtrlBAckRequestHeader *PYBINDGEN_UNUSED(self), PyNs3CtrlBAckRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CtrlBAckRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CtrlBAckRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CtrlBAckRequestHeader",            /* tp_name */
    sizeof(PyNs3CtrlBAckRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CtrlBAckRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "CtrlBAckRequestHeader(arg0)\nCtrlBAckRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3CtrlBAckRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CtrlBAckRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CtrlBAckRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CtrlBAckRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CtrlBAckRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CtrlBAckRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CtrlBAckResponseHeader__tp_init__0(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CtrlBAckResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CtrlBAckResponseHeader(*((PyNs3CtrlBAckResponseHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CtrlBAckResponseHeader__tp_init__1(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CtrlBAckResponseHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CtrlBAckResponseHeader__tp_init(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CtrlBAckResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CtrlBAckResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetHtImmediateAck(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool immediateAck;
    PyObject *py_immediateAck;
    const char *keywords[] = {"immediateAck", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_immediateAck)) {
        return NULL;
    }
    immediateAck = (bool) PyObject_IsTrue(py_immediateAck);
    self->obj->SetHtImmediateAck(immediateAck);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetCompressedBitmap(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetCompressedBitmap();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsMultiTid(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultiTid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CtrlBAckResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsCompressed(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCompressed();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetReceivedFragment(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    int frag;
    const char *keywords[] = {"seq", "frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seq, &frag)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetReceivedFragment(seq, frag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequenceControl(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seqControl;
    const char *keywords[] = {"seqControl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seqControl)) {
        return NULL;
    }
    if (seqControl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequenceControl(seqControl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_MustSendHtImmediateAck(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendHtImmediateAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetReceivedPacket(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetReceivedPacket(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsPacketReceived(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsPacketReceived(seq);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsBasic(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBasic();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetType(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequence(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_Deserialize(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequence(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsFragmentReceived(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int seq;
    int frag;
    const char *keywords[] = {"seq", "frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seq, &frag)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsFragmentReceived(seq, frag);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetInstanceTypeId(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetSerializedSize(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetTidInfo(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTidInfo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_Serialize(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequenceControl(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_ResetBitmap(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    
    self->obj->ResetBitmap();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetTidInfo(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTidInfo(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CtrlBAckResponseHeader__copy__(PyNs3CtrlBAckResponseHeader *self)
{

    PyNs3CtrlBAckResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3CtrlBAckResponseHeader, &PyNs3CtrlBAckResponseHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::CtrlBAckResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CtrlBAckResponseHeader_methods[] = {
    {(char *) "SetHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetHtImmediateAck, METH_KEYWORDS|METH_VARARGS, "SetHtImmediateAck(immediateAck)\n\ntype: immediateAck: bool" },
    {(char *) "GetCompressedBitmap", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetCompressedBitmap, METH_NOARGS, "GetCompressedBitmap()\n\n" },
    {(char *) "IsMultiTid", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsMultiTid, METH_NOARGS, "IsMultiTid()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "IsCompressed", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsCompressed, METH_NOARGS, "IsCompressed()\n\n" },
    {(char *) "SetReceivedFragment", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetReceivedFragment, METH_KEYWORDS|METH_VARARGS, "SetReceivedFragment(seq, frag)\n\ntype: seq: uint16_t\ntype: frag: uint8_t" },
    {(char *) "SetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequenceControl, METH_KEYWORDS|METH_VARARGS, "SetStartingSequenceControl(seqControl)\n\ntype: seqControl: uint16_t" },
    {(char *) "MustSendHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_MustSendHtImmediateAck, METH_NOARGS, "MustSendHtImmediateAck()\n\n" },
    {(char *) "SetReceivedPacket", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetReceivedPacket, METH_KEYWORDS|METH_VARARGS, "SetReceivedPacket(seq)\n\ntype: seq: uint16_t" },
    {(char *) "IsPacketReceived", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsPacketReceived, METH_KEYWORDS|METH_VARARGS, "IsPacketReceived(seq)\n\ntype: seq: uint16_t" },
    {(char *) "IsBasic", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsBasic, METH_NOARGS, "IsBasic()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: ns3::BlockAckType" },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequence, METH_NOARGS, "GetStartingSequence()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, "SetStartingSequence(seq)\n\ntype: seq: uint16_t" },
    {(char *) "IsFragmentReceived", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsFragmentReceived, METH_KEYWORDS|METH_VARARGS, "IsFragmentReceived(seq, frag)\n\ntype: seq: uint16_t\ntype: frag: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetTidInfo, METH_NOARGS, "GetTidInfo()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequenceControl, METH_NOARGS, "GetStartingSequenceControl()\n\n" },
    {(char *) "ResetBitmap", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_ResetBitmap, METH_NOARGS, "ResetBitmap()\n\n" },
    {(char *) "SetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetTidInfo, METH_KEYWORDS|METH_VARARGS, "SetTidInfo(tid)\n\ntype: tid: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CtrlBAckResponseHeader__tp_clear(PyNs3CtrlBAckResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CtrlBAckResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CtrlBAckResponseHeader__tp_traverse(PyNs3CtrlBAckResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3CtrlBAckResponseHeader__tp_dealloc(PyNs3CtrlBAckResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CtrlBAckResponseHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CtrlBAckResponseHeader__tp_richcompare (PyNs3CtrlBAckResponseHeader *PYBINDGEN_UNUSED(self), PyNs3CtrlBAckResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CtrlBAckResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CtrlBAckResponseHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CtrlBAckResponseHeader",            /* tp_name */
    sizeof(PyNs3CtrlBAckResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CtrlBAckResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "CtrlBAckResponseHeader(arg0)\nCtrlBAckResponseHeader()",                        /* Documentation string */
    (traverseproc)PyNs3CtrlBAckResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CtrlBAckResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CtrlBAckResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CtrlBAckResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CtrlBAckResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CtrlBAckResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsssParameterSet__tp_init__0(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsssParameterSet *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsssParameterSet_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssParameterSet(*((PyNs3DsssParameterSet *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsssParameterSet__tp_init__1(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssParameterSet();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsssParameterSet__tp_init(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsssParameterSet__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsssParameterSet__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsssParameterSet_Serialize(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_DeserializeInformationField(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_SetCurrentChannel(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int currentChannel;
    const char *keywords[] = {"currentChannel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &currentChannel)) {
        return NULL;
    }
    if (currentChannel > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetCurrentChannel(currentChannel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_GetInformationFieldSize(PyNs3DsssParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_SerializeInformationField(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_GetSerializedSize(PyNs3DsssParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_SetDsssSupported(PyNs3DsssParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int DsssSupported;
    const char *keywords[] = {"DsssSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &DsssSupported)) {
        return NULL;
    }
    if (DsssSupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDsssSupported(DsssSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssParameterSet_ElementId(PyNs3DsssParameterSet *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsssParameterSet__copy__(PyNs3DsssParameterSet *self)
{

    PyNs3DsssParameterSet *py_copy;
    py_copy = PyObject_New(PyNs3DsssParameterSet, &PyNs3DsssParameterSet_Type);
    
    py_copy->obj = new ns3::DsssParameterSet(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsssParameterSet_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsssParameterSet_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3DsssParameterSet_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SetCurrentChannel", (PyCFunction) _wrap_PyNs3DsssParameterSet_SetCurrentChannel, METH_KEYWORDS|METH_VARARGS, "SetCurrentChannel(currentChannel)\n\ntype: currentChannel: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3DsssParameterSet_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3DsssParameterSet_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsssParameterSet_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetDsssSupported", (PyCFunction) _wrap_PyNs3DsssParameterSet_SetDsssSupported, METH_KEYWORDS|METH_VARARGS, "SetDsssSupported(DsssSupported)\n\ntype: DsssSupported: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3DsssParameterSet_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsssParameterSet__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsssParameterSet__tp_dealloc(PyNs3DsssParameterSet *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::DsssParameterSet *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsssParameterSet__tp_richcompare (PyNs3DsssParameterSet *PYBINDGEN_UNUSED(self), PyNs3DsssParameterSet *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsssParameterSet_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsssParameterSet_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.DsssParameterSet",            /* tp_name */
    sizeof(PyNs3DsssParameterSet),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsssParameterSet__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsssParameterSet(arg0)\nDsssParameterSet()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsssParameterSet__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsssParameterSet_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsssParameterSet__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3EdcaParameterSet__tp_init__0(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3EdcaParameterSet *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EdcaParameterSet_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::EdcaParameterSet(*((PyNs3EdcaParameterSet *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3EdcaParameterSet__tp_init__1(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::EdcaParameterSet();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3EdcaParameterSet__tp_init(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3EdcaParameterSet__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EdcaParameterSet__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetVoCWmin(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetVoCWmin();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetViAifsn(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetViAifsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBkCWmax(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMax;
    const char *keywords[] = {"cwMax", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMax)) {
        return NULL;
    }
    self->obj->SetBkCWmax(cwMax);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBeAci(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aci;
    const char *keywords[] = {"aci", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aci)) {
        return NULL;
    }
    if (aci > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBeAci(aci);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetVoAci(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aci;
    const char *keywords[] = {"aci", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aci)) {
        return NULL;
    }
    if (aci > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVoAci(aci);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetQosInfo(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetQosInfo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SerializeInformationField(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetViTxopLimit(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetViTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_ElementId(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBeCWmin(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMin;
    const char *keywords[] = {"cwMin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMin)) {
        return NULL;
    }
    self->obj->SetBeCWmin(cwMin);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetViCWmax(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMax;
    const char *keywords[] = {"cwMax", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMax)) {
        return NULL;
    }
    self->obj->SetViCWmax(cwMax);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBkAifsn(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aifsn)) {
        return NULL;
    }
    if (aifsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBkAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetViAci(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aci;
    const char *keywords[] = {"aci", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aci)) {
        return NULL;
    }
    if (aci > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetViAci(aci);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetVoCWmax(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMax;
    const char *keywords[] = {"cwMax", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMax)) {
        return NULL;
    }
    self->obj->SetVoCWmax(cwMax);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBkTxopLimit(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBkTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetViTxopLimit(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetViTxopLimit();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetInformationFieldSize(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetVoCWmax(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetVoCWmax();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetQosInfo(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int qosInfo;
    const char *keywords[] = {"qosInfo", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &qosInfo)) {
        return NULL;
    }
    if (qosInfo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosInfo(qosInfo);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBeCWmax(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBeCWmax();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBeTxopLimit(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBeTxopLimit();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_IsQosSupported(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->IsQosSupported();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_DeserializeInformationField(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBkTxopLimit(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBkTxopLimit();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetQosSupported(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int qosSupported;
    const char *keywords[] = {"qosSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &qosSupported)) {
        return NULL;
    }
    if (qosSupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosSupported(qosSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetVoTxopLimit(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVoTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBeCWmin(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBeCWmin();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBkAifsn(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBkAifsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBkCWmin(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMin;
    const char *keywords[] = {"cwMin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMin)) {
        return NULL;
    }
    self->obj->SetBkCWmin(cwMin);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetVoTxopLimit(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetVoTxopLimit();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetSerializedSize(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBkCWmax(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBkCWmax();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetViCWmax(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetViCWmax();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetViCWmin(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMin;
    const char *keywords[] = {"cwMin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMin)) {
        return NULL;
    }
    self->obj->SetViCWmin(cwMin);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBeAifsn(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aifsn)) {
        return NULL;
    }
    if (aifsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBeAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetVoAifsn(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aifsn)) {
        return NULL;
    }
    if (aifsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVoAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetViAifsn(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aifsn)) {
        return NULL;
    }
    if (aifsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetViAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_Serialize(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBkAci(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aci;
    const char *keywords[] = {"aci", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aci)) {
        return NULL;
    }
    if (aci > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBkAci(aci);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetVoAifsn(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetVoAifsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetVoCWmin(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMin;
    const char *keywords[] = {"cwMin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMin)) {
        return NULL;
    }
    self->obj->SetVoCWmin(cwMin);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBeAifsn(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBeAifsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBeTxopLimit(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBeTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetBkCWmin(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBkCWmin();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_GetViCWmin(PyNs3EdcaParameterSet *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetViCWmin();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaParameterSet_SetBeCWmax(PyNs3EdcaParameterSet *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMax;
    const char *keywords[] = {"cwMax", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cwMax)) {
        return NULL;
    }
    self->obj->SetBeCWmax(cwMax);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3EdcaParameterSet__copy__(PyNs3EdcaParameterSet *self)
{

    PyNs3EdcaParameterSet *py_copy;
    py_copy = PyObject_New(PyNs3EdcaParameterSet, &PyNs3EdcaParameterSet_Type);
    
    py_copy->obj = new ns3::EdcaParameterSet(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3EdcaParameterSet_methods[] = {
    {(char *) "GetVoCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetVoCWmin, METH_NOARGS, "GetVoCWmin()\n\n" },
    {(char *) "GetViAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetViAifsn, METH_NOARGS, "GetViAifsn()\n\n" },
    {(char *) "SetBkCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBkCWmax, METH_KEYWORDS|METH_VARARGS, "SetBkCWmax(cwMax)\n\ntype: cwMax: uint32_t" },
    {(char *) "SetBeAci", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBeAci, METH_KEYWORDS|METH_VARARGS, "SetBeAci(aci)\n\ntype: aci: uint8_t" },
    {(char *) "SetVoAci", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetVoAci, METH_KEYWORDS|METH_VARARGS, "SetVoAci(aci)\n\ntype: aci: uint8_t" },
    {(char *) "GetQosInfo", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetQosInfo, METH_NOARGS, "GetQosInfo()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetViTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetViTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetViTxopLimit(txop)\n\ntype: txop: uint16_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3EdcaParameterSet_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetBeCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBeCWmin, METH_KEYWORDS|METH_VARARGS, "SetBeCWmin(cwMin)\n\ntype: cwMin: uint32_t" },
    {(char *) "SetViCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetViCWmax, METH_KEYWORDS|METH_VARARGS, "SetViCWmax(cwMax)\n\ntype: cwMax: uint32_t" },
    {(char *) "SetBkAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBkAifsn, METH_KEYWORDS|METH_VARARGS, "SetBkAifsn(aifsn)\n\ntype: aifsn: uint8_t" },
    {(char *) "SetViAci", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetViAci, METH_KEYWORDS|METH_VARARGS, "SetViAci(aci)\n\ntype: aci: uint8_t" },
    {(char *) "SetVoCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetVoCWmax, METH_KEYWORDS|METH_VARARGS, "SetVoCWmax(cwMax)\n\ntype: cwMax: uint32_t" },
    {(char *) "SetBkTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBkTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetBkTxopLimit(txop)\n\ntype: txop: uint16_t" },
    {(char *) "GetViTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetViTxopLimit, METH_NOARGS, "GetViTxopLimit()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetVoCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetVoCWmax, METH_NOARGS, "GetVoCWmax()\n\n" },
    {(char *) "SetQosInfo", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetQosInfo, METH_KEYWORDS|METH_VARARGS, "SetQosInfo(qosInfo)\n\ntype: qosInfo: uint8_t" },
    {(char *) "GetBeCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBeCWmax, METH_NOARGS, "GetBeCWmax()\n\n" },
    {(char *) "GetBeTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBeTxopLimit, METH_NOARGS, "GetBeTxopLimit()\n\n" },
    {(char *) "IsQosSupported", (PyCFunction) _wrap_PyNs3EdcaParameterSet_IsQosSupported, METH_NOARGS, "IsQosSupported()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3EdcaParameterSet_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetBkTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBkTxopLimit, METH_NOARGS, "GetBkTxopLimit()\n\n" },
    {(char *) "SetQosSupported", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetQosSupported, METH_KEYWORDS|METH_VARARGS, "SetQosSupported(qosSupported)\n\ntype: qosSupported: uint8_t" },
    {(char *) "SetVoTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetVoTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetVoTxopLimit(txop)\n\ntype: txop: uint16_t" },
    {(char *) "GetBeCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBeCWmin, METH_NOARGS, "GetBeCWmin()\n\n" },
    {(char *) "GetBkAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBkAifsn, METH_NOARGS, "GetBkAifsn()\n\n" },
    {(char *) "SetBkCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBkCWmin, METH_KEYWORDS|METH_VARARGS, "SetBkCWmin(cwMin)\n\ntype: cwMin: uint32_t" },
    {(char *) "GetVoTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetVoTxopLimit, METH_NOARGS, "GetVoTxopLimit()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetBkCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBkCWmax, METH_NOARGS, "GetBkCWmax()\n\n" },
    {(char *) "GetViCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetViCWmax, METH_NOARGS, "GetViCWmax()\n\n" },
    {(char *) "SetViCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetViCWmin, METH_KEYWORDS|METH_VARARGS, "SetViCWmin(cwMin)\n\ntype: cwMin: uint32_t" },
    {(char *) "SetBeAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBeAifsn, METH_KEYWORDS|METH_VARARGS, "SetBeAifsn(aifsn)\n\ntype: aifsn: uint8_t" },
    {(char *) "SetVoAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetVoAifsn, METH_KEYWORDS|METH_VARARGS, "SetVoAifsn(aifsn)\n\ntype: aifsn: uint8_t" },
    {(char *) "SetViAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetViAifsn, METH_KEYWORDS|METH_VARARGS, "SetViAifsn(aifsn)\n\ntype: aifsn: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3EdcaParameterSet_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetBkAci", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBkAci, METH_KEYWORDS|METH_VARARGS, "SetBkAci(aci)\n\ntype: aci: uint8_t" },
    {(char *) "GetVoAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetVoAifsn, METH_NOARGS, "GetVoAifsn()\n\n" },
    {(char *) "SetVoCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetVoCWmin, METH_KEYWORDS|METH_VARARGS, "SetVoCWmin(cwMin)\n\ntype: cwMin: uint32_t" },
    {(char *) "GetBeAifsn", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBeAifsn, METH_NOARGS, "GetBeAifsn()\n\n" },
    {(char *) "SetBeTxopLimit", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBeTxopLimit, METH_KEYWORDS|METH_VARARGS, "SetBeTxopLimit(txop)\n\ntype: txop: uint16_t" },
    {(char *) "GetBkCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetBkCWmin, METH_NOARGS, "GetBkCWmin()\n\n" },
    {(char *) "GetViCWmin", (PyCFunction) _wrap_PyNs3EdcaParameterSet_GetViCWmin, METH_NOARGS, "GetViCWmin()\n\n" },
    {(char *) "SetBeCWmax", (PyCFunction) _wrap_PyNs3EdcaParameterSet_SetBeCWmax, METH_KEYWORDS|METH_VARARGS, "SetBeCWmax(cwMax)\n\ntype: cwMax: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3EdcaParameterSet__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3EdcaParameterSet__tp_dealloc(PyNs3EdcaParameterSet *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::EdcaParameterSet *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3EdcaParameterSet__tp_richcompare (PyNs3EdcaParameterSet *PYBINDGEN_UNUSED(self), PyNs3EdcaParameterSet *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3EdcaParameterSet_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3EdcaParameterSet_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.EdcaParameterSet",            /* tp_name */
    sizeof(PyNs3EdcaParameterSet),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3EdcaParameterSet__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "EdcaParameterSet(arg0)\nEdcaParameterSet()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3EdcaParameterSet__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3EdcaParameterSet_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3EdcaParameterSet__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ErpInformation__tp_init__0(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ErpInformation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErpInformation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ErpInformation(*((PyNs3ErpInformation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ErpInformation__tp_init__1(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ErpInformation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ErpInformation__tp_init(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ErpInformation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ErpInformation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ErpInformation_GetBarkerPreambleMode(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBarkerPreambleMode();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_SetErpSupported(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int erpSupported;
    const char *keywords[] = {"erpSupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &erpSupported)) {
        return NULL;
    }
    if (erpSupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetErpSupported(erpSupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_Serialize(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_DeserializeInformationField(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_GetUseProtection(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUseProtection();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_GetInformationFieldSize(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_GetNonErpPresent(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNonErpPresent();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_SetUseProtection(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int useProtection;
    const char *keywords[] = {"useProtection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &useProtection)) {
        return NULL;
    }
    if (useProtection > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUseProtection(useProtection);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_GetSerializedSize(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_SetNonErpPresent(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nonErpPresent;
    const char *keywords[] = {"nonErpPresent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nonErpPresent)) {
        return NULL;
    }
    if (nonErpPresent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNonErpPresent(nonErpPresent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_SetBarkerPreambleMode(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int barkerPreambleMode;
    const char *keywords[] = {"barkerPreambleMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &barkerPreambleMode)) {
        return NULL;
    }
    if (barkerPreambleMode > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBarkerPreambleMode(barkerPreambleMode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_ElementId(PyNs3ErpInformation *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErpInformation_SerializeInformationField(PyNs3ErpInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ErpInformation__copy__(PyNs3ErpInformation *self)
{

    PyNs3ErpInformation *py_copy;
    py_copy = PyObject_New(PyNs3ErpInformation, &PyNs3ErpInformation_Type);
    
    py_copy->obj = new ns3::ErpInformation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ErpInformation_methods[] = {
    {(char *) "GetBarkerPreambleMode", (PyCFunction) _wrap_PyNs3ErpInformation_GetBarkerPreambleMode, METH_NOARGS, "GetBarkerPreambleMode()\n\n" },
    {(char *) "SetErpSupported", (PyCFunction) _wrap_PyNs3ErpInformation_SetErpSupported, METH_KEYWORDS|METH_VARARGS, "SetErpSupported(erpSupported)\n\ntype: erpSupported: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3ErpInformation_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3ErpInformation_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetUseProtection", (PyCFunction) _wrap_PyNs3ErpInformation_GetUseProtection, METH_NOARGS, "GetUseProtection()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3ErpInformation_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetNonErpPresent", (PyCFunction) _wrap_PyNs3ErpInformation_GetNonErpPresent, METH_NOARGS, "GetNonErpPresent()\n\n" },
    {(char *) "SetUseProtection", (PyCFunction) _wrap_PyNs3ErpInformation_SetUseProtection, METH_KEYWORDS|METH_VARARGS, "SetUseProtection(useProtection)\n\ntype: useProtection: uint8_t" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3ErpInformation_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetNonErpPresent", (PyCFunction) _wrap_PyNs3ErpInformation_SetNonErpPresent, METH_KEYWORDS|METH_VARARGS, "SetNonErpPresent(nonErpPresent)\n\ntype: nonErpPresent: uint8_t" },
    {(char *) "SetBarkerPreambleMode", (PyCFunction) _wrap_PyNs3ErpInformation_SetBarkerPreambleMode, METH_KEYWORDS|METH_VARARGS, "SetBarkerPreambleMode(barkerPreambleMode)\n\ntype: barkerPreambleMode: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3ErpInformation_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3ErpInformation_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ErpInformation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ErpInformation__tp_dealloc(PyNs3ErpInformation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ErpInformation *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3ErpInformation__tp_str(PyNs3ErpInformation *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3ErpInformation__tp_richcompare (PyNs3ErpInformation *PYBINDGEN_UNUSED(self), PyNs3ErpInformation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ErpInformation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ErpInformation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ErpInformation",            /* tp_name */
    sizeof(PyNs3ErpInformation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ErpInformation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3ErpInformation__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ErpInformation(arg0)\nErpInformation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ErpInformation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ErpInformation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ErpInformation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_DoInitialize(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3ErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = const_cast< ns3::ErrorRateModel* >((const ns3::ErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NNdK", py_WifiMode, py_WifiTxVector, snr, nbits);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3ErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3ErrorRateModel__tp_init__0(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ErrorRateModel_Type)
    {
        self->obj = new PyNs3ErrorRateModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ErrorRateModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3ErrorRateModel__tp_init__1(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ErrorRateModel_Type)
    {
        self->obj = new PyNs3ErrorRateModel__PythonHelper(*((PyNs3ErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ErrorRateModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3ErrorRateModel__tp_init(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ErrorRateModel_GetChunkSuccessRate(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    PyNs3WifiTxVector *txVector;
    double snr;
    uint64_t nbits;
    const char *keywords[] = {"mode", "txVector", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dK", (char **) keywords, &PyNs3WifiMode_Type, &mode, &PyNs3WifiTxVector_Type, &txVector, &snr, &nbits)) {
        return NULL;
    }
    retval = self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, *((PyNs3WifiTxVector *) txVector)->obj, snr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErrorRateModel_CalculateSnr(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiTxVector *txVector;
    double ber;
    const char *keywords[] = {"txVector", "ber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector, &ber)) {
        return NULL;
    }
    retval = self->obj->CalculateSnr(*((PyNs3WifiTxVector *) txVector)->obj, ber);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

static PyMethodDef PyNs3ErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3ErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, "GetChunkSuccessRate(mode, txVector, snr, nbits)\n\ntype: mode: ns3::WifiMode\ntype: txVector: ns3::WifiTxVector\ntype: snr: double\ntype: nbits: uint64_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "CalculateSnr", (PyCFunction) _wrap_PyNs3ErrorRateModel_CalculateSnr, METH_KEYWORDS|METH_VARARGS, "CalculateSnr(txVector, ber)\n\ntype: txVector: ns3::WifiTxVector\ntype: ber: double" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ErrorRateModel__tp_clear(PyNs3ErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ErrorRateModel__tp_traverse(PyNs3ErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3ErrorRateModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ErrorRateModel__tp_dealloc(PyNs3ErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ErrorRateModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ErrorRateModel__tp_richcompare (PyNs3ErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3ErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ErrorRateModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ErrorRateModel",            /* tp_name */
    sizeof(PyNs3ErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ErrorRateModel(arg0)\nErrorRateModel()",                        /* Documentation string */
    (traverseproc)PyNs3ErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Event__tp_init__0(PyNs3Event *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Event *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Event_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Event(*((PyNs3Event *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Event__tp_init__1(PyNs3Event *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    PyNs3Time *duration;
    double rxPower;
    const char *keywords[] = {"packet", "txVector", "duration", "rxPower", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &PyNs3Time_Type, &duration, &rxPower)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj = new ns3::Event(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) duration)->obj, rxPower);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Event__tp_init(PyNs3Event *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Event__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Event__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Event_GetPayloadMode(PyNs3Event *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetPayloadMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3Event_GetTxVector(PyNs3Event *self)
{
    PyObject *py_retval;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    ns3::WifiTxVector retval = self->obj->GetTxVector();
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3Event_GetEndTime(PyNs3Event *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEndTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3Event_GetPacket(PyNs3Event *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3Event_GetRxPowerW(PyNs3Event *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxPowerW();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Event_GetStartTime(PyNs3Event *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Event__copy__(PyNs3Event *self)
{

    PyNs3Event *py_copy;
    py_copy = PyObject_New(PyNs3Event, &PyNs3Event_Type);
    
    py_copy->obj = new ns3::Event(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Event_methods[] = {
    {(char *) "GetPayloadMode", (PyCFunction) _wrap_PyNs3Event_GetPayloadMode, METH_NOARGS, "GetPayloadMode()\n\n" },
    {(char *) "GetTxVector", (PyCFunction) _wrap_PyNs3Event_GetTxVector, METH_NOARGS, "GetTxVector()\n\n" },
    {(char *) "GetEndTime", (PyCFunction) _wrap_PyNs3Event_GetEndTime, METH_NOARGS, "GetEndTime()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3Event_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "GetRxPowerW", (PyCFunction) _wrap_PyNs3Event_GetRxPowerW, METH_NOARGS, "GetRxPowerW()\n\n" },
    {(char *) "GetStartTime", (PyCFunction) _wrap_PyNs3Event_GetStartTime, METH_NOARGS, "GetStartTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Event__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Event__tp_dealloc(PyNs3Event *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::Event *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Event__tp_richcompare (PyNs3Event *PYBINDGEN_UNUSED(self), PyNs3Event *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Event_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Event_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Event",            /* tp_name */
    sizeof(PyNs3Event),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Event__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Event(packet, txVector, duration, rxPower)\nEvent(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Event__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Event_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Event__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ExtendedCapabilities__tp_init__0(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ExtendedCapabilities *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedCapabilities_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ExtendedCapabilities(*((PyNs3ExtendedCapabilities *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ExtendedCapabilities__tp_init__1(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ExtendedCapabilities();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ExtendedCapabilities__tp_init(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ExtendedCapabilities__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ExtendedCapabilities__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_DeserializeInformationField(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetSerializedSize(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetVhtSupported(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int vhtsupported;
    const char *keywords[] = {"vhtsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &vhtsupported)) {
        return NULL;
    }
    if (vhtsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVhtSupported(vhtsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SerializeInformationField(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_ElementId(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetInformationFieldSize(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetHtSupported(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int htsupported;
    const char *keywords[] = {"htsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &htsupported)) {
        return NULL;
    }
    if (htsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHtSupported(htsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte8(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte8(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte5(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte5(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte4(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte4(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte7(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte7(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte6(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte6(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte1(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte1(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte3(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte3(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte2(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedCapabilitiesByte2(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte1(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte1();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte3(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte3();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte2(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte2();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte5(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte5();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte4(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte4();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte7(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte7();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte6(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte6();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte8(PyNs3ExtendedCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetExtendedCapabilitiesByte8();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedCapabilities_Serialize(PyNs3ExtendedCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ExtendedCapabilities__copy__(PyNs3ExtendedCapabilities *self)
{

    PyNs3ExtendedCapabilities *py_copy;
    py_copy = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_copy->obj = new ns3::ExtendedCapabilities(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ExtendedCapabilities_methods[] = {
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(vhtsupported)\n\ntype: vhtsupported: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(htsupported)\n\ntype: htsupported: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte8", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte8, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte8(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte5", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte5, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte5(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte4", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte4, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte4(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte7", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte7, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte7(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte6", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte6, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte6(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte1", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte1, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte1(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte3", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte3, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte3(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetExtendedCapabilitiesByte2", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_SetExtendedCapabilitiesByte2, METH_KEYWORDS|METH_VARARGS, "SetExtendedCapabilitiesByte2(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "GetExtendedCapabilitiesByte1", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte1, METH_NOARGS, "GetExtendedCapabilitiesByte1()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte3", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte3, METH_NOARGS, "GetExtendedCapabilitiesByte3()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte2", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte2, METH_NOARGS, "GetExtendedCapabilitiesByte2()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte5", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte5, METH_NOARGS, "GetExtendedCapabilitiesByte5()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte4", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte4, METH_NOARGS, "GetExtendedCapabilitiesByte4()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte7", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte7, METH_NOARGS, "GetExtendedCapabilitiesByte7()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte6", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte6, METH_NOARGS, "GetExtendedCapabilitiesByte6()\n\n" },
    {(char *) "GetExtendedCapabilitiesByte8", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_GetExtendedCapabilitiesByte8, METH_NOARGS, "GetExtendedCapabilitiesByte8()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3ExtendedCapabilities_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ExtendedCapabilities__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ExtendedCapabilities__tp_dealloc(PyNs3ExtendedCapabilities *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ExtendedCapabilities *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3ExtendedCapabilities__tp_str(PyNs3ExtendedCapabilities *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3ExtendedCapabilities__tp_richcompare (PyNs3ExtendedCapabilities *PYBINDGEN_UNUSED(self), PyNs3ExtendedCapabilities *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ExtendedCapabilities_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ExtendedCapabilities_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ExtendedCapabilities",            /* tp_name */
    sizeof(PyNs3ExtendedCapabilities),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ExtendedCapabilities__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3ExtendedCapabilities__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ExtendedCapabilities(arg0)\nExtendedCapabilities()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ExtendedCapabilities__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ExtendedCapabilities_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ExtendedCapabilities__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ExtendedSupportedRatesIE__tp_init__0(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ExtendedSupportedRatesIE *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ExtendedSupportedRatesIE_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ExtendedSupportedRatesIE(*((PyNs3ExtendedSupportedRatesIE *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ExtendedSupportedRatesIE__tp_init__1(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ExtendedSupportedRatesIE();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ExtendedSupportedRatesIE__tp_init(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ExtendedSupportedRatesIE__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ExtendedSupportedRatesIE__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_Serialize(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_DeserializeInformationField(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_GetInformationFieldSize(PyNs3ExtendedSupportedRatesIE *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_SerializeInformationField(PyNs3ExtendedSupportedRatesIE *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_GetSerializedSize(PyNs3ExtendedSupportedRatesIE *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ExtendedSupportedRatesIE_ElementId(PyNs3ExtendedSupportedRatesIE *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ExtendedSupportedRatesIE__copy__(PyNs3ExtendedSupportedRatesIE *self)
{

    PyNs3ExtendedSupportedRatesIE *py_copy;
    py_copy = PyObject_New(PyNs3ExtendedSupportedRatesIE, &PyNs3ExtendedSupportedRatesIE_Type);
    
    py_copy->obj = new ns3::ExtendedSupportedRatesIE(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ExtendedSupportedRatesIE_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ExtendedSupportedRatesIE__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ExtendedSupportedRatesIE__tp_dealloc(PyNs3ExtendedSupportedRatesIE *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ExtendedSupportedRatesIE *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ExtendedSupportedRatesIE__tp_richcompare (PyNs3ExtendedSupportedRatesIE *PYBINDGEN_UNUSED(self), PyNs3ExtendedSupportedRatesIE *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ExtendedSupportedRatesIE_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ExtendedSupportedRatesIE_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ExtendedSupportedRatesIE",            /* tp_name */
    sizeof(PyNs3ExtendedSupportedRatesIE),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ExtendedSupportedRatesIE__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ExtendedSupportedRatesIE(arg0)\nExtendedSupportedRatesIE()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ExtendedSupportedRatesIE__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ExtendedSupportedRatesIE_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ExtendedSupportedRatesIE__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3FrameCaptureModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3FrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3FrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3FrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FrameCaptureModel__PythonHelper::_wrap_DoInitialize(PyNs3FrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3FrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3FrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FrameCaptureModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3FrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3FrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3FrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FrameCaptureModel__PythonHelper::_wrap_DoDispose(PyNs3FrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3FrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3FrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3FrameCaptureModel__PythonHelper::CaptureNewFrame(ns3::Ptr< ns3::Event > currentEvent, ns3::Ptr< ns3::Event > newEvent) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::FrameCaptureModel *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Event *py_Event;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Event *py_Event2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CaptureNewFrame"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3FrameCaptureModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3FrameCaptureModel* >(m_pyself)->obj = const_cast< ns3::FrameCaptureModel* >((const ns3::FrameCaptureModel*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Event = NULL;
    } else {
        py_Event = (PyNs3Event *) wrapper_lookup_iter->second;
        Py_INCREF(py_Event);
    }
    
    if (py_Event == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent))), &PyNs3Event_Type);
        py_Event = PyObject_New(PyNs3Event, wrapper_type);
    
        py_Event->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent))->Ref();
        py_Event->obj = const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent));
        PyNs3Empty_wrapper_registry[(void *) py_Event->obj] = (PyObject *) py_Event;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Event *> (ns3::PeekPointer (newEvent)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Event2 = NULL;
    } else {
        py_Event2 = (PyNs3Event *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Event2);
    }
    
    if (py_Event2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Event *> (ns3::PeekPointer (newEvent))), &PyNs3Event_Type);
        py_Event2 = PyObject_New(PyNs3Event, wrapper_type2);
    
        py_Event2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Event *> (ns3::PeekPointer (newEvent))->Ref();
        py_Event2->obj = const_cast<ns3::Event *> (ns3::PeekPointer (newEvent));
        PyNs3Empty_wrapper_registry[(void *) py_Event2->obj] = (PyObject *) py_Event2;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CaptureNewFrame", (char *) "NN", py_Event, py_Event2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3FrameCaptureModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3FrameCaptureModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3FrameCaptureModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3FrameCaptureModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3FrameCaptureModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FrameCaptureModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FrameCaptureModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FrameCaptureModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3FrameCaptureModel__tp_init__0(PyNs3FrameCaptureModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3FrameCaptureModel_Type)
    {
        self->obj = new PyNs3FrameCaptureModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3FrameCaptureModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'FrameCaptureModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3FrameCaptureModel__tp_init__1(PyNs3FrameCaptureModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FrameCaptureModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FrameCaptureModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3FrameCaptureModel_Type)
    {
        self->obj = new PyNs3FrameCaptureModel__PythonHelper(*((PyNs3FrameCaptureModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3FrameCaptureModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'FrameCaptureModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3FrameCaptureModel__tp_init(PyNs3FrameCaptureModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FrameCaptureModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FrameCaptureModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FrameCaptureModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::FrameCaptureModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FrameCaptureModel_CaptureNewFrame(PyNs3FrameCaptureModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Event *currentEvent;
    ns3::Event *currentEvent_ptr;
    PyNs3Event *newEvent;
    ns3::Event *newEvent_ptr;
    const char *keywords[] = {"currentEvent", "newEvent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Event_Type, &currentEvent, &PyNs3Event_Type, &newEvent)) {
        return NULL;
    }
    currentEvent_ptr = (currentEvent ? currentEvent->obj : NULL);
    newEvent_ptr = (newEvent ? newEvent->obj : NULL);
    retval = self->obj->CaptureNewFrame(ns3::Ptr< ns3::Event  > (currentEvent_ptr), ns3::Ptr< ns3::Event  > (newEvent_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3FrameCaptureModel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FrameCaptureModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "CaptureNewFrame", (PyCFunction) _wrap_PyNs3FrameCaptureModel_CaptureNewFrame, METH_KEYWORDS|METH_VARARGS, "CaptureNewFrame(currentEvent, newEvent)\n\ntype: currentEvent: ns3::Ptr< ns3::Event >\ntype: newEvent: ns3::Ptr< ns3::Event >" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3FrameCaptureModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3FrameCaptureModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3FrameCaptureModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3FrameCaptureModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FrameCaptureModel__tp_clear(PyNs3FrameCaptureModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::FrameCaptureModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3FrameCaptureModel__tp_traverse(PyNs3FrameCaptureModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3FrameCaptureModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3FrameCaptureModel__tp_dealloc(PyNs3FrameCaptureModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FrameCaptureModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FrameCaptureModel__tp_richcompare (PyNs3FrameCaptureModel *PYBINDGEN_UNUSED(self), PyNs3FrameCaptureModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FrameCaptureModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FrameCaptureModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.FrameCaptureModel",            /* tp_name */
    sizeof(PyNs3FrameCaptureModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FrameCaptureModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FrameCaptureModel(arg0)\nFrameCaptureModel()",                        /* Documentation string */
    (traverseproc)PyNs3FrameCaptureModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FrameCaptureModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FrameCaptureModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FrameCaptureModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FrameCaptureModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FrameCaptureModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3HeCapabilities__tp_init__0(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3HeCapabilities *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeCapabilities_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HeCapabilities(*((PyNs3HeCapabilities *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3HeCapabilities__tp_init__1(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HeCapabilities();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3HeCapabilities__tp_init(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3HeCapabilities__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3HeCapabilities__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3HeCapabilities_DeserializeInformationField(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SerializeInformationField(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetChannelWidthSet(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelWidthSet;
    const char *keywords[] = {"channelWidthSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelWidthSet)) {
        return NULL;
    }
    if (channelWidthSet > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelWidthSet(channelWidthSet);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHighestNssSupported(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHighestNssSupported();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHighestMcsSupported(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHighestMcsSupported();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_ElementId(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHePhyCapabilitiesInfo2(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHePhyCapabilitiesInfo2();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHighestNssSupported(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nss;
    const char *keywords[] = {"nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nss)) {
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHighestNssSupported(nss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_IsSupportedRxMcs(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedRxMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetSupportedMcsAndNss(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSupportedMcsAndNss(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHePhyCapabilitiesInfo1(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetHePhyCapabilitiesInfo1();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetMaxAmpduLengthExponent(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int exponent;
    const char *keywords[] = {"exponent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &exponent)) {
        return NULL;
    }
    if (exponent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmpduLengthExponent(exponent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHighestMcsSupported(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHighestMcsSupported(mcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetInformationFieldSize(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHeMacCapabilitiesInfo1(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetHeMacCapabilitiesInfo1();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHeMacCapabilitiesInfo2(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHeMacCapabilitiesInfo2();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHeLtfAndGiForHePpdus(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int heLtfAndGiForHePpdus;
    const char *keywords[] = {"heLtfAndGiForHePpdus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &heLtfAndGiForHePpdus)) {
        return NULL;
    }
    if (heLtfAndGiForHePpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHeLtfAndGiForHePpdus(heLtfAndGiForHePpdus);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHePhyCapabilitiesInfo(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t ctrl1;
    int ctrl2;
    const char *keywords[] = {"ctrl1", "ctrl2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ki", (char **) keywords, &ctrl1, &ctrl2)) {
        return NULL;
    }
    if (ctrl2 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHePhyCapabilitiesInfo(ctrl1, ctrl2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetSupportedMcsAndNss(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSupportedMcsAndNss();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetSerializedSize(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetChannelWidthSet(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelWidthSet();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_GetHeLtfAndGiForHePpdus(PyNs3HeCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHeLtfAndGiForHePpdus();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_Serialize(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHeMacCapabilitiesInfo(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int ctrl1;
    int ctrl2;
    const char *keywords[] = {"ctrl1", "ctrl2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ii", (char **) keywords, &ctrl1, &ctrl2)) {
        return NULL;
    }
    if (ctrl2 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHeMacCapabilitiesInfo(ctrl1, ctrl2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_IsSupportedTxMcs(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedTxMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HeCapabilities_SetHeSupported(PyNs3HeCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hesupported;
    const char *keywords[] = {"hesupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hesupported)) {
        return NULL;
    }
    if (hesupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHeSupported(hesupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3HeCapabilities__copy__(PyNs3HeCapabilities *self)
{

    PyNs3HeCapabilities *py_copy;
    py_copy = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_copy->obj = new ns3::HeCapabilities(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3HeCapabilities_methods[] = {
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3HeCapabilities_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3HeCapabilities_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetChannelWidthSet", (PyCFunction) _wrap_PyNs3HeCapabilities_SetChannelWidthSet, METH_KEYWORDS|METH_VARARGS, "SetChannelWidthSet(channelWidthSet)\n\ntype: channelWidthSet: uint8_t" },
    {(char *) "GetHighestNssSupported", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHighestNssSupported, METH_NOARGS, "GetHighestNssSupported()\n\n" },
    {(char *) "GetHighestMcsSupported", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHighestMcsSupported, METH_NOARGS, "GetHighestMcsSupported()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3HeCapabilities_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "GetHePhyCapabilitiesInfo2", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHePhyCapabilitiesInfo2, METH_NOARGS, "GetHePhyCapabilitiesInfo2()\n\n" },
    {(char *) "SetHighestNssSupported", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHighestNssSupported, METH_KEYWORDS|METH_VARARGS, "SetHighestNssSupported(nss)\n\ntype: nss: uint8_t" },
    {(char *) "IsSupportedRxMcs", (PyCFunction) _wrap_PyNs3HeCapabilities_IsSupportedRxMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedRxMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetSupportedMcsAndNss", (PyCFunction) _wrap_PyNs3HeCapabilities_SetSupportedMcsAndNss, METH_KEYWORDS|METH_VARARGS, "SetSupportedMcsAndNss(ctrl)\n\ntype: ctrl: uint16_t" },
    {(char *) "GetHePhyCapabilitiesInfo1", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHePhyCapabilitiesInfo1, METH_NOARGS, "GetHePhyCapabilitiesInfo1()\n\n" },
    {(char *) "SetMaxAmpduLengthExponent", (PyCFunction) _wrap_PyNs3HeCapabilities_SetMaxAmpduLengthExponent, METH_KEYWORDS|METH_VARARGS, "SetMaxAmpduLengthExponent(exponent)\n\ntype: exponent: uint8_t" },
    {(char *) "SetHighestMcsSupported", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHighestMcsSupported, METH_KEYWORDS|METH_VARARGS, "SetHighestMcsSupported(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3HeCapabilities_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetHeMacCapabilitiesInfo1", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHeMacCapabilitiesInfo1, METH_NOARGS, "GetHeMacCapabilitiesInfo1()\n\n" },
    {(char *) "GetHeMacCapabilitiesInfo2", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHeMacCapabilitiesInfo2, METH_NOARGS, "GetHeMacCapabilitiesInfo2()\n\n" },
    {(char *) "SetHeLtfAndGiForHePpdus", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHeLtfAndGiForHePpdus, METH_KEYWORDS|METH_VARARGS, "SetHeLtfAndGiForHePpdus(heLtfAndGiForHePpdus)\n\ntype: heLtfAndGiForHePpdus: uint8_t" },
    {(char *) "SetHePhyCapabilitiesInfo", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHePhyCapabilitiesInfo, METH_KEYWORDS|METH_VARARGS, "SetHePhyCapabilitiesInfo(ctrl1, ctrl2)\n\ntype: ctrl1: uint64_t\ntype: ctrl2: uint8_t" },
    {(char *) "GetSupportedMcsAndNss", (PyCFunction) _wrap_PyNs3HeCapabilities_GetSupportedMcsAndNss, METH_NOARGS, "GetSupportedMcsAndNss()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3HeCapabilities_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetChannelWidthSet", (PyCFunction) _wrap_PyNs3HeCapabilities_GetChannelWidthSet, METH_NOARGS, "GetChannelWidthSet()\n\n" },
    {(char *) "GetHeLtfAndGiForHePpdus", (PyCFunction) _wrap_PyNs3HeCapabilities_GetHeLtfAndGiForHePpdus, METH_NOARGS, "GetHeLtfAndGiForHePpdus()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3HeCapabilities_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHeMacCapabilitiesInfo", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHeMacCapabilitiesInfo, METH_KEYWORDS|METH_VARARGS, "SetHeMacCapabilitiesInfo(ctrl1, ctrl2)\n\ntype: ctrl1: uint32_t\ntype: ctrl2: uint8_t" },
    {(char *) "IsSupportedTxMcs", (PyCFunction) _wrap_PyNs3HeCapabilities_IsSupportedTxMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedTxMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3HeCapabilities_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(hesupported)\n\ntype: hesupported: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3HeCapabilities__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3HeCapabilities__tp_dealloc(PyNs3HeCapabilities *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::HeCapabilities *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3HeCapabilities__tp_str(PyNs3HeCapabilities *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3HeCapabilities__tp_richcompare (PyNs3HeCapabilities *PYBINDGEN_UNUSED(self), PyNs3HeCapabilities *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3HeCapabilities_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3HeCapabilities_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.HeCapabilities",            /* tp_name */
    sizeof(PyNs3HeCapabilities),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3HeCapabilities__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3HeCapabilities__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "HeCapabilities(arg0)\nHeCapabilities()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3HeCapabilities__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3HeCapabilities_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3HeCapabilities__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3HeOperation__tp_init__0(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3HeOperation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HeOperation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HeOperation(*((PyNs3HeOperation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3HeOperation__tp_init__1(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HeOperation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3HeOperation__tp_init(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3HeOperation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3HeOperation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3HeOperation_SetHeOperationParameters(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &ctrl)) {
        return NULL;
    }
    self->obj->SetHeOperationParameters(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_Serialize(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_DeserializeInformationField(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_GetInformationFieldSize(PyNs3HeOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_SetMaxHeMcsPerNss(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nss;
    int maxHeMcs;
    const char *keywords[] = {"nss", "maxHeMcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &nss, &maxHeMcs)) {
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (maxHeMcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxHeMcsPerNss(nss, maxHeMcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_SerializeInformationField(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_GetBasicHeMcsAndNssSet(PyNs3HeOperation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBasicHeMcsAndNssSet();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_GetSerializedSize(PyNs3HeOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_GetHeOperationParameters(PyNs3HeOperation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetHeOperationParameters();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_ElementId(PyNs3HeOperation *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HeOperation_SetHeSupported(PyNs3HeOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hesupported;
    const char *keywords[] = {"hesupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hesupported)) {
        return NULL;
    }
    if (hesupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHeSupported(hesupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3HeOperation__copy__(PyNs3HeOperation *self)
{

    PyNs3HeOperation *py_copy;
    py_copy = PyObject_New(PyNs3HeOperation, &PyNs3HeOperation_Type);
    
    py_copy->obj = new ns3::HeOperation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3HeOperation_methods[] = {
    {(char *) "SetHeOperationParameters", (PyCFunction) _wrap_PyNs3HeOperation_SetHeOperationParameters, METH_KEYWORDS|METH_VARARGS, "SetHeOperationParameters(ctrl)\n\ntype: ctrl: uint32_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3HeOperation_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3HeOperation_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3HeOperation_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetMaxHeMcsPerNss", (PyCFunction) _wrap_PyNs3HeOperation_SetMaxHeMcsPerNss, METH_KEYWORDS|METH_VARARGS, "SetMaxHeMcsPerNss(nss, maxHeMcs)\n\ntype: nss: uint8_t\ntype: maxHeMcs: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3HeOperation_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetBasicHeMcsAndNssSet", (PyCFunction) _wrap_PyNs3HeOperation_GetBasicHeMcsAndNssSet, METH_NOARGS, "GetBasicHeMcsAndNssSet()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3HeOperation_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetHeOperationParameters", (PyCFunction) _wrap_PyNs3HeOperation_GetHeOperationParameters, METH_NOARGS, "GetHeOperationParameters()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3HeOperation_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3HeOperation_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(hesupported)\n\ntype: hesupported: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3HeOperation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3HeOperation__tp_dealloc(PyNs3HeOperation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::HeOperation *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3HeOperation__tp_str(PyNs3HeOperation *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3HeOperation__tp_richcompare (PyNs3HeOperation *PYBINDGEN_UNUSED(self), PyNs3HeOperation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3HeOperation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3HeOperation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.HeOperation",            /* tp_name */
    sizeof(PyNs3HeOperation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3HeOperation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3HeOperation__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "HeOperation(arg0)\nHeOperation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3HeOperation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3HeOperation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3HeOperation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3HtCapabilities__tp_init__0(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3HtCapabilities *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtCapabilities_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtCapabilities(*((PyNs3HtCapabilities *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3HtCapabilities__tp_init__1(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtCapabilities();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3HtCapabilities__tp_init(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3HtCapabilities__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3HtCapabilities__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetTxBfCapabilities(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetTxBfCapabilities();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetGreenfield(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int greenfield;
    const char *keywords[] = {"greenfield", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &greenfield)) {
        return NULL;
    }
    if (greenfield > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetGreenfield(greenfield);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_Serialize(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetAmpduParameters(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAmpduParameters(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetMaxAmsduLength(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxamsdulength;
    const char *keywords[] = {"maxamsdulength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxamsdulength)) {
        return NULL;
    }
    if (maxamsdulength > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmsduLength(maxamsdulength);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetShortGuardInterval20(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int shortguardinterval;
    const char *keywords[] = {"shortguardinterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &shortguardinterval)) {
        return NULL;
    }
    if (shortguardinterval > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetShortGuardInterval20(shortguardinterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_DeserializeInformationField(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetLdpc(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLdpc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetExtendedHtCapabilities(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetExtendedHtCapabilities(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SerializeInformationField(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetLSigProtectionSupport(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int lsigprotection;
    const char *keywords[] = {"lsigprotection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &lsigprotection)) {
        return NULL;
    }
    if (lsigprotection > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLSigProtectionSupport(lsigprotection);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetTxMaxNSpatialStreams(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxtxspatialstreams;
    const char *keywords[] = {"maxtxspatialstreams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxtxspatialstreams)) {
        return NULL;
    }
    if (maxtxspatialstreams > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxMaxNSpatialStreams(maxtxspatialstreams);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetTxUnequalModulation(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txunequalmodulation;
    const char *keywords[] = {"txunequalmodulation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txunequalmodulation)) {
        return NULL;
    }
    if (txunequalmodulation > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxUnequalModulation(txunequalmodulation);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_ElementId(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetSupportedChannelWidth(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int supportedchannelwidth;
    const char *keywords[] = {"supportedchannelwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &supportedchannelwidth)) {
        return NULL;
    }
    if (supportedchannelwidth > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSupportedChannelWidth(supportedchannelwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetTxBfCapabilities(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &ctrl)) {
        return NULL;
    }
    self->obj->SetTxBfCapabilities(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetAmpduParameters(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAmpduParameters();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetInformationFieldSize(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_IsSupportedMcs(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetSupportedMcsSet(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t ctrl1;
    uint64_t ctrl2;
    const char *keywords[] = {"ctrl1", "ctrl2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "KK", (char **) keywords, &ctrl1, &ctrl2)) {
        return NULL;
    }
    self->obj->SetSupportedMcsSet(ctrl1, ctrl2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetGreenfield(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetGreenfield();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetAntennaSelectionCapabilities(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAntennaSelectionCapabilities(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetLdpc(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ldpc;
    const char *keywords[] = {"ldpc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ldpc)) {
        return NULL;
    }
    if (ldpc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLdpc(ldpc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetSerializedSize(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetTxMcsSetDefined(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txmcssetdefined;
    const char *keywords[] = {"txmcssetdefined", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txmcssetdefined)) {
        return NULL;
    }
    if (txmcssetdefined > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxMcsSetDefined(txmcssetdefined);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetHtCapabilitiesInfo(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHtCapabilitiesInfo(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetShortGuardInterval40(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int shortguardinterval;
    const char *keywords[] = {"shortguardinterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &shortguardinterval)) {
        return NULL;
    }
    if (shortguardinterval > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetShortGuardInterval40(shortguardinterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetHtSupported(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int htsupported;
    const char *keywords[] = {"htsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &htsupported)) {
        return NULL;
    }
    if (htsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHtSupported(htsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetExtendedHtCapabilities(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetExtendedHtCapabilities();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetShortGuardInterval20(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetShortGuardInterval20();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetRxMcsBitmask(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxMcsBitmask(index);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetSupportedMcsSet2(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetSupportedMcsSet2();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetRxHighestSupportedAntennas(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRxHighestSupportedAntennas();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetSupportedMcsSet1(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetSupportedMcsSet1();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetAntennaSelectionCapabilities(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAntennaSelectionCapabilities();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetTxRxMcsSetUnequal(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txrxmcssetunequal;
    const char *keywords[] = {"txrxmcssetunequal", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txrxmcssetunequal)) {
        return NULL;
    }
    if (txrxmcssetunequal > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxRxMcsSetUnequal(txrxmcssetunequal);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetMaxAmpduLength(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxampdulength;
    const char *keywords[] = {"maxampdulength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxampdulength)) {
        return NULL;
    }
    if (maxampdulength > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmpduLength(maxampdulength);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_SetRxHighestSupportedDataRate(PyNs3HtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxsupportedrate;
    const char *keywords[] = {"maxsupportedrate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxsupportedrate)) {
        return NULL;
    }
    if (maxsupportedrate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxHighestSupportedDataRate(maxsupportedrate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetSupportedChannelWidth(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSupportedChannelWidth();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtCapabilities_GetHtCapabilitiesInfo(PyNs3HtCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetHtCapabilitiesInfo();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3HtCapabilities__copy__(PyNs3HtCapabilities *self)
{

    PyNs3HtCapabilities *py_copy;
    py_copy = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_copy->obj = new ns3::HtCapabilities(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3HtCapabilities_methods[] = {
    {(char *) "GetTxBfCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_GetTxBfCapabilities, METH_NOARGS, "GetTxBfCapabilities()\n\n" },
    {(char *) "SetGreenfield", (PyCFunction) _wrap_PyNs3HtCapabilities_SetGreenfield, METH_KEYWORDS|METH_VARARGS, "SetGreenfield(greenfield)\n\ntype: greenfield: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3HtCapabilities_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetAmpduParameters", (PyCFunction) _wrap_PyNs3HtCapabilities_SetAmpduParameters, METH_KEYWORDS|METH_VARARGS, "SetAmpduParameters(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetMaxAmsduLength", (PyCFunction) _wrap_PyNs3HtCapabilities_SetMaxAmsduLength, METH_KEYWORDS|METH_VARARGS, "SetMaxAmsduLength(maxamsdulength)\n\ntype: maxamsdulength: uint8_t" },
    {(char *) "SetShortGuardInterval20", (PyCFunction) _wrap_PyNs3HtCapabilities_SetShortGuardInterval20, METH_KEYWORDS|METH_VARARGS, "SetShortGuardInterval20(shortguardinterval)\n\ntype: shortguardinterval: uint8_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3HtCapabilities_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetLdpc", (PyCFunction) _wrap_PyNs3HtCapabilities_GetLdpc, METH_NOARGS, "GetLdpc()\n\n" },
    {(char *) "SetExtendedHtCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_SetExtendedHtCapabilities, METH_KEYWORDS|METH_VARARGS, "SetExtendedHtCapabilities(ctrl)\n\ntype: ctrl: uint16_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3HtCapabilities_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetLSigProtectionSupport", (PyCFunction) _wrap_PyNs3HtCapabilities_SetLSigProtectionSupport, METH_KEYWORDS|METH_VARARGS, "SetLSigProtectionSupport(lsigprotection)\n\ntype: lsigprotection: uint8_t" },
    {(char *) "SetTxMaxNSpatialStreams", (PyCFunction) _wrap_PyNs3HtCapabilities_SetTxMaxNSpatialStreams, METH_KEYWORDS|METH_VARARGS, "SetTxMaxNSpatialStreams(maxtxspatialstreams)\n\ntype: maxtxspatialstreams: uint8_t" },
    {(char *) "SetTxUnequalModulation", (PyCFunction) _wrap_PyNs3HtCapabilities_SetTxUnequalModulation, METH_KEYWORDS|METH_VARARGS, "SetTxUnequalModulation(txunequalmodulation)\n\ntype: txunequalmodulation: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3HtCapabilities_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetSupportedChannelWidth", (PyCFunction) _wrap_PyNs3HtCapabilities_SetSupportedChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetSupportedChannelWidth(supportedchannelwidth)\n\ntype: supportedchannelwidth: uint8_t" },
    {(char *) "SetTxBfCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_SetTxBfCapabilities, METH_KEYWORDS|METH_VARARGS, "SetTxBfCapabilities(ctrl)\n\ntype: ctrl: uint32_t" },
    {(char *) "GetAmpduParameters", (PyCFunction) _wrap_PyNs3HtCapabilities_GetAmpduParameters, METH_NOARGS, "GetAmpduParameters()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3HtCapabilities_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "IsSupportedMcs", (PyCFunction) _wrap_PyNs3HtCapabilities_IsSupportedMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetSupportedMcsSet", (PyCFunction) _wrap_PyNs3HtCapabilities_SetSupportedMcsSet, METH_KEYWORDS|METH_VARARGS, "SetSupportedMcsSet(ctrl1, ctrl2)\n\ntype: ctrl1: uint64_t\ntype: ctrl2: uint64_t" },
    {(char *) "GetGreenfield", (PyCFunction) _wrap_PyNs3HtCapabilities_GetGreenfield, METH_NOARGS, "GetGreenfield()\n\n" },
    {(char *) "SetAntennaSelectionCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_SetAntennaSelectionCapabilities, METH_KEYWORDS|METH_VARARGS, "SetAntennaSelectionCapabilities(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetLdpc", (PyCFunction) _wrap_PyNs3HtCapabilities_SetLdpc, METH_KEYWORDS|METH_VARARGS, "SetLdpc(ldpc)\n\ntype: ldpc: uint8_t" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3HtCapabilities_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetTxMcsSetDefined", (PyCFunction) _wrap_PyNs3HtCapabilities_SetTxMcsSetDefined, METH_KEYWORDS|METH_VARARGS, "SetTxMcsSetDefined(txmcssetdefined)\n\ntype: txmcssetdefined: uint8_t" },
    {(char *) "SetHtCapabilitiesInfo", (PyCFunction) _wrap_PyNs3HtCapabilities_SetHtCapabilitiesInfo, METH_KEYWORDS|METH_VARARGS, "SetHtCapabilitiesInfo(ctrl)\n\ntype: ctrl: uint16_t" },
    {(char *) "SetShortGuardInterval40", (PyCFunction) _wrap_PyNs3HtCapabilities_SetShortGuardInterval40, METH_KEYWORDS|METH_VARARGS, "SetShortGuardInterval40(shortguardinterval)\n\ntype: shortguardinterval: uint8_t" },
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3HtCapabilities_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(htsupported)\n\ntype: htsupported: uint8_t" },
    {(char *) "GetExtendedHtCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_GetExtendedHtCapabilities, METH_NOARGS, "GetExtendedHtCapabilities()\n\n" },
    {(char *) "GetShortGuardInterval20", (PyCFunction) _wrap_PyNs3HtCapabilities_GetShortGuardInterval20, METH_NOARGS, "GetShortGuardInterval20()\n\n" },
    {(char *) "SetRxMcsBitmask", (PyCFunction) _wrap_PyNs3HtCapabilities_SetRxMcsBitmask, METH_KEYWORDS|METH_VARARGS, "SetRxMcsBitmask(index)\n\ntype: index: uint8_t" },
    {(char *) "GetSupportedMcsSet2", (PyCFunction) _wrap_PyNs3HtCapabilities_GetSupportedMcsSet2, METH_NOARGS, "GetSupportedMcsSet2()\n\n" },
    {(char *) "GetRxHighestSupportedAntennas", (PyCFunction) _wrap_PyNs3HtCapabilities_GetRxHighestSupportedAntennas, METH_NOARGS, "GetRxHighestSupportedAntennas()\n\n" },
    {(char *) "GetSupportedMcsSet1", (PyCFunction) _wrap_PyNs3HtCapabilities_GetSupportedMcsSet1, METH_NOARGS, "GetSupportedMcsSet1()\n\n" },
    {(char *) "GetAntennaSelectionCapabilities", (PyCFunction) _wrap_PyNs3HtCapabilities_GetAntennaSelectionCapabilities, METH_NOARGS, "GetAntennaSelectionCapabilities()\n\n" },
    {(char *) "SetTxRxMcsSetUnequal", (PyCFunction) _wrap_PyNs3HtCapabilities_SetTxRxMcsSetUnequal, METH_KEYWORDS|METH_VARARGS, "SetTxRxMcsSetUnequal(txrxmcssetunequal)\n\ntype: txrxmcssetunequal: uint8_t" },
    {(char *) "SetMaxAmpduLength", (PyCFunction) _wrap_PyNs3HtCapabilities_SetMaxAmpduLength, METH_KEYWORDS|METH_VARARGS, "SetMaxAmpduLength(maxampdulength)\n\ntype: maxampdulength: uint8_t" },
    {(char *) "SetRxHighestSupportedDataRate", (PyCFunction) _wrap_PyNs3HtCapabilities_SetRxHighestSupportedDataRate, METH_KEYWORDS|METH_VARARGS, "SetRxHighestSupportedDataRate(maxsupportedrate)\n\ntype: maxsupportedrate: uint16_t" },
    {(char *) "GetSupportedChannelWidth", (PyCFunction) _wrap_PyNs3HtCapabilities_GetSupportedChannelWidth, METH_NOARGS, "GetSupportedChannelWidth()\n\n" },
    {(char *) "GetHtCapabilitiesInfo", (PyCFunction) _wrap_PyNs3HtCapabilities_GetHtCapabilitiesInfo, METH_NOARGS, "GetHtCapabilitiesInfo()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3HtCapabilities__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3HtCapabilities__tp_dealloc(PyNs3HtCapabilities *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::HtCapabilities *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3HtCapabilities__tp_str(PyNs3HtCapabilities *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3HtCapabilities__tp_richcompare (PyNs3HtCapabilities *PYBINDGEN_UNUSED(self), PyNs3HtCapabilities *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3HtCapabilities_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3HtCapabilities_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.HtCapabilities",            /* tp_name */
    sizeof(PyNs3HtCapabilities),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3HtCapabilities__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3HtCapabilities__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "HtCapabilities(arg0)\nHtCapabilities()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3HtCapabilities__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3HtCapabilities_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3HtCapabilities__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3HtOperation__tp_init__0(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3HtOperation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3HtOperation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtOperation(*((PyNs3HtOperation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3HtOperation__tp_init__1(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::HtOperation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3HtOperation__tp_init(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3HtOperation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3HtOperation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3HtOperation_SetInformationSubset1(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetInformationSubset1(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetInformationSubset3(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetInformationSubset3(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetDualBeacon(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dualbeacon;
    const char *keywords[] = {"dualbeacon", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dualbeacon)) {
        return NULL;
    }
    if (dualbeacon > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDualBeacon(dualbeacon);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetHtProtection(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int htprotection;
    const char *keywords[] = {"htprotection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &htprotection)) {
        return NULL;
    }
    if (htprotection > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHtProtection(htprotection);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetDualBeacon(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDualBeacon();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_DeserializeInformationField(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetNonGfHtStasPresent(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNonGfHtStasPresent();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetTxMaxNSpatialStreams(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxtxspatialstreams;
    const char *keywords[] = {"maxtxspatialstreams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxtxspatialstreams)) {
        return NULL;
    }
    if (maxtxspatialstreams > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxMaxNSpatialStreams(maxtxspatialstreams);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetDualCtsProtection(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dualctsprotection;
    const char *keywords[] = {"dualctsprotection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dualctsprotection)) {
        return NULL;
    }
    if (dualctsprotection > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDualCtsProtection(dualctsprotection);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SerializeInformationField(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetDualCtsProtection(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDualCtsProtection();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetInformationSubset2(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetInformationSubset2(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetStaChannelWidth(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int stachannelwidth;
    const char *keywords[] = {"stachannelwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &stachannelwidth)) {
        return NULL;
    }
    if (stachannelwidth > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStaChannelWidth(stachannelwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetTxUnequalModulation(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txunequalmodulation;
    const char *keywords[] = {"txunequalmodulation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txunequalmodulation)) {
        return NULL;
    }
    if (txunequalmodulation > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxUnequalModulation(txunequalmodulation);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_ElementId(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetObssNonHtStasPresent(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int obssnonhtstaspresent;
    const char *keywords[] = {"obssnonhtstaspresent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &obssnonhtstaspresent)) {
        return NULL;
    }
    if (obssnonhtstaspresent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetObssNonHtStasPresent(obssnonhtstaspresent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetStbcBeacon(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int stbcbeacon;
    const char *keywords[] = {"stbcbeacon", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &stbcbeacon)) {
        return NULL;
    }
    if (stbcbeacon > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStbcBeacon(stbcbeacon);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetSecondaryChannelOffset(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int secondarychanneloffset;
    const char *keywords[] = {"secondarychanneloffset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &secondarychanneloffset)) {
        return NULL;
    }
    if (secondarychanneloffset > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSecondaryChannelOffset(secondarychanneloffset);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetLSigTxopProtectionFullSupport(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLSigTxopProtectionFullSupport();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetPcoActive(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int pcoactive;
    const char *keywords[] = {"pcoactive", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &pcoactive)) {
        return NULL;
    }
    if (pcoactive > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPcoActive(pcoactive);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetInformationFieldSize(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetTxUnequalModulation(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxUnequalModulation();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetPrimaryChannel(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPrimaryChannel();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetTxMaxNSpatialStreams(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxMaxNSpatialStreams();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetInformationSubset1(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationSubset1();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetInformationSubset3(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetInformationSubset3();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetInformationSubset2(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetInformationSubset2();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetStaChannelWidth(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetStaChannelWidth();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetBasicMcsSet(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t ctrl1;
    uint64_t ctrl2;
    const char *keywords[] = {"ctrl1", "ctrl2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "KK", (char **) keywords, &ctrl1, &ctrl2)) {
        return NULL;
    }
    self->obj->SetBasicMcsSet(ctrl1, ctrl2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetStbcBeacon(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetStbcBeacon();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetPrimaryChannel(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ctrl)) {
        return NULL;
    }
    if (ctrl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPrimaryChannel(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetPhase(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int pcophase;
    const char *keywords[] = {"pcophase", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &pcophase)) {
        return NULL;
    }
    if (pcophase > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPhase(pcophase);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetRxHighestSupportedDataRate(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRxHighestSupportedDataRate();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetSerializedSize(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetTxMcsSetDefined(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txmcssetdefined;
    const char *keywords[] = {"txmcssetdefined", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txmcssetdefined)) {
        return NULL;
    }
    if (txmcssetdefined > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxMcsSetDefined(txmcssetdefined);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetBasicMcsSet2(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetBasicMcsSet2();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetHtProtection(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHtProtection();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetBasicMcsSet1(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetBasicMcsSet1();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetHtSupported(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int htsupported;
    const char *keywords[] = {"htsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &htsupported)) {
        return NULL;
    }
    if (htsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHtSupported(htsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetRxHighestSupportedDataRate(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxsupportedrate;
    const char *keywords[] = {"maxsupportedrate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxsupportedrate)) {
        return NULL;
    }
    if (maxsupportedrate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxHighestSupportedDataRate(maxsupportedrate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetRifsMode(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rifsmode;
    const char *keywords[] = {"rifsmode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rifsmode)) {
        return NULL;
    }
    if (rifsmode > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRifsMode(rifsmode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetRxMcsBitmask(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxMcsBitmask(index);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetTxMcsSetDefined(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxMcsSetDefined();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetNonGfHtStasPresent(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nongfhtstaspresent;
    const char *keywords[] = {"nongfhtstaspresent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nongfhtstaspresent)) {
        return NULL;
    }
    if (nongfhtstaspresent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNonGfHtStasPresent(nongfhtstaspresent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetTxRxMcsSetUnequal(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxRxMcsSetUnequal();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_Serialize(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetTxRxMcsSetUnequal(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txrxmcssetunequal;
    const char *keywords[] = {"txrxmcssetunequal", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txrxmcssetunequal)) {
        return NULL;
    }
    if (txrxmcssetunequal > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxRxMcsSetUnequal(txrxmcssetunequal);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetRifsMode(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRifsMode();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetSecondaryChannelOffset(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSecondaryChannelOffset();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetPcoActive(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPcoActive();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetPhase(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPhase();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_GetObssNonHtStasPresent(PyNs3HtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetObssNonHtStasPresent();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_IsSupportedMcs(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3HtOperation_SetLSigTxopProtectionFullSupport(PyNs3HtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int lsigtxopprotectionfullsupport;
    const char *keywords[] = {"lsigtxopprotectionfullsupport", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &lsigtxopprotectionfullsupport)) {
        return NULL;
    }
    if (lsigtxopprotectionfullsupport > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLSigTxopProtectionFullSupport(lsigtxopprotectionfullsupport);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3HtOperation__copy__(PyNs3HtOperation *self)
{

    PyNs3HtOperation *py_copy;
    py_copy = PyObject_New(PyNs3HtOperation, &PyNs3HtOperation_Type);
    
    py_copy->obj = new ns3::HtOperation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3HtOperation_methods[] = {
    {(char *) "SetInformationSubset1", (PyCFunction) _wrap_PyNs3HtOperation_SetInformationSubset1, METH_KEYWORDS|METH_VARARGS, "SetInformationSubset1(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetInformationSubset3", (PyCFunction) _wrap_PyNs3HtOperation_SetInformationSubset3, METH_KEYWORDS|METH_VARARGS, "SetInformationSubset3(ctrl)\n\ntype: ctrl: uint16_t" },
    {(char *) "SetDualBeacon", (PyCFunction) _wrap_PyNs3HtOperation_SetDualBeacon, METH_KEYWORDS|METH_VARARGS, "SetDualBeacon(dualbeacon)\n\ntype: dualbeacon: uint8_t" },
    {(char *) "SetHtProtection", (PyCFunction) _wrap_PyNs3HtOperation_SetHtProtection, METH_KEYWORDS|METH_VARARGS, "SetHtProtection(htprotection)\n\ntype: htprotection: uint8_t" },
    {(char *) "GetDualBeacon", (PyCFunction) _wrap_PyNs3HtOperation_GetDualBeacon, METH_NOARGS, "GetDualBeacon()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3HtOperation_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetNonGfHtStasPresent", (PyCFunction) _wrap_PyNs3HtOperation_GetNonGfHtStasPresent, METH_NOARGS, "GetNonGfHtStasPresent()\n\n" },
    {(char *) "SetTxMaxNSpatialStreams", (PyCFunction) _wrap_PyNs3HtOperation_SetTxMaxNSpatialStreams, METH_KEYWORDS|METH_VARARGS, "SetTxMaxNSpatialStreams(maxtxspatialstreams)\n\ntype: maxtxspatialstreams: uint8_t" },
    {(char *) "SetDualCtsProtection", (PyCFunction) _wrap_PyNs3HtOperation_SetDualCtsProtection, METH_KEYWORDS|METH_VARARGS, "SetDualCtsProtection(dualctsprotection)\n\ntype: dualctsprotection: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3HtOperation_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetDualCtsProtection", (PyCFunction) _wrap_PyNs3HtOperation_GetDualCtsProtection, METH_NOARGS, "GetDualCtsProtection()\n\n" },
    {(char *) "SetInformationSubset2", (PyCFunction) _wrap_PyNs3HtOperation_SetInformationSubset2, METH_KEYWORDS|METH_VARARGS, "SetInformationSubset2(ctrl)\n\ntype: ctrl: uint16_t" },
    {(char *) "SetStaChannelWidth", (PyCFunction) _wrap_PyNs3HtOperation_SetStaChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetStaChannelWidth(stachannelwidth)\n\ntype: stachannelwidth: uint8_t" },
    {(char *) "SetTxUnequalModulation", (PyCFunction) _wrap_PyNs3HtOperation_SetTxUnequalModulation, METH_KEYWORDS|METH_VARARGS, "SetTxUnequalModulation(txunequalmodulation)\n\ntype: txunequalmodulation: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3HtOperation_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetObssNonHtStasPresent", (PyCFunction) _wrap_PyNs3HtOperation_SetObssNonHtStasPresent, METH_KEYWORDS|METH_VARARGS, "SetObssNonHtStasPresent(obssnonhtstaspresent)\n\ntype: obssnonhtstaspresent: uint8_t" },
    {(char *) "SetStbcBeacon", (PyCFunction) _wrap_PyNs3HtOperation_SetStbcBeacon, METH_KEYWORDS|METH_VARARGS, "SetStbcBeacon(stbcbeacon)\n\ntype: stbcbeacon: uint8_t" },
    {(char *) "SetSecondaryChannelOffset", (PyCFunction) _wrap_PyNs3HtOperation_SetSecondaryChannelOffset, METH_KEYWORDS|METH_VARARGS, "SetSecondaryChannelOffset(secondarychanneloffset)\n\ntype: secondarychanneloffset: uint8_t" },
    {(char *) "GetLSigTxopProtectionFullSupport", (PyCFunction) _wrap_PyNs3HtOperation_GetLSigTxopProtectionFullSupport, METH_NOARGS, "GetLSigTxopProtectionFullSupport()\n\n" },
    {(char *) "SetPcoActive", (PyCFunction) _wrap_PyNs3HtOperation_SetPcoActive, METH_KEYWORDS|METH_VARARGS, "SetPcoActive(pcoactive)\n\ntype: pcoactive: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3HtOperation_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetTxUnequalModulation", (PyCFunction) _wrap_PyNs3HtOperation_GetTxUnequalModulation, METH_NOARGS, "GetTxUnequalModulation()\n\n" },
    {(char *) "GetPrimaryChannel", (PyCFunction) _wrap_PyNs3HtOperation_GetPrimaryChannel, METH_NOARGS, "GetPrimaryChannel()\n\n" },
    {(char *) "GetTxMaxNSpatialStreams", (PyCFunction) _wrap_PyNs3HtOperation_GetTxMaxNSpatialStreams, METH_NOARGS, "GetTxMaxNSpatialStreams()\n\n" },
    {(char *) "GetInformationSubset1", (PyCFunction) _wrap_PyNs3HtOperation_GetInformationSubset1, METH_NOARGS, "GetInformationSubset1()\n\n" },
    {(char *) "GetInformationSubset3", (PyCFunction) _wrap_PyNs3HtOperation_GetInformationSubset3, METH_NOARGS, "GetInformationSubset3()\n\n" },
    {(char *) "GetInformationSubset2", (PyCFunction) _wrap_PyNs3HtOperation_GetInformationSubset2, METH_NOARGS, "GetInformationSubset2()\n\n" },
    {(char *) "GetStaChannelWidth", (PyCFunction) _wrap_PyNs3HtOperation_GetStaChannelWidth, METH_NOARGS, "GetStaChannelWidth()\n\n" },
    {(char *) "SetBasicMcsSet", (PyCFunction) _wrap_PyNs3HtOperation_SetBasicMcsSet, METH_KEYWORDS|METH_VARARGS, "SetBasicMcsSet(ctrl1, ctrl2)\n\ntype: ctrl1: uint64_t\ntype: ctrl2: uint64_t" },
    {(char *) "GetStbcBeacon", (PyCFunction) _wrap_PyNs3HtOperation_GetStbcBeacon, METH_NOARGS, "GetStbcBeacon()\n\n" },
    {(char *) "SetPrimaryChannel", (PyCFunction) _wrap_PyNs3HtOperation_SetPrimaryChannel, METH_KEYWORDS|METH_VARARGS, "SetPrimaryChannel(ctrl)\n\ntype: ctrl: uint8_t" },
    {(char *) "SetPhase", (PyCFunction) _wrap_PyNs3HtOperation_SetPhase, METH_KEYWORDS|METH_VARARGS, "SetPhase(pcophase)\n\ntype: pcophase: uint8_t" },
    {(char *) "GetRxHighestSupportedDataRate", (PyCFunction) _wrap_PyNs3HtOperation_GetRxHighestSupportedDataRate, METH_NOARGS, "GetRxHighestSupportedDataRate()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3HtOperation_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetTxMcsSetDefined", (PyCFunction) _wrap_PyNs3HtOperation_SetTxMcsSetDefined, METH_KEYWORDS|METH_VARARGS, "SetTxMcsSetDefined(txmcssetdefined)\n\ntype: txmcssetdefined: uint8_t" },
    {(char *) "GetBasicMcsSet2", (PyCFunction) _wrap_PyNs3HtOperation_GetBasicMcsSet2, METH_NOARGS, "GetBasicMcsSet2()\n\n" },
    {(char *) "GetHtProtection", (PyCFunction) _wrap_PyNs3HtOperation_GetHtProtection, METH_NOARGS, "GetHtProtection()\n\n" },
    {(char *) "GetBasicMcsSet1", (PyCFunction) _wrap_PyNs3HtOperation_GetBasicMcsSet1, METH_NOARGS, "GetBasicMcsSet1()\n\n" },
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3HtOperation_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(htsupported)\n\ntype: htsupported: uint8_t" },
    {(char *) "SetRxHighestSupportedDataRate", (PyCFunction) _wrap_PyNs3HtOperation_SetRxHighestSupportedDataRate, METH_KEYWORDS|METH_VARARGS, "SetRxHighestSupportedDataRate(maxsupportedrate)\n\ntype: maxsupportedrate: uint16_t" },
    {(char *) "SetRifsMode", (PyCFunction) _wrap_PyNs3HtOperation_SetRifsMode, METH_KEYWORDS|METH_VARARGS, "SetRifsMode(rifsmode)\n\ntype: rifsmode: uint8_t" },
    {(char *) "SetRxMcsBitmask", (PyCFunction) _wrap_PyNs3HtOperation_SetRxMcsBitmask, METH_KEYWORDS|METH_VARARGS, "SetRxMcsBitmask(index)\n\ntype: index: uint8_t" },
    {(char *) "GetTxMcsSetDefined", (PyCFunction) _wrap_PyNs3HtOperation_GetTxMcsSetDefined, METH_NOARGS, "GetTxMcsSetDefined()\n\n" },
    {(char *) "SetNonGfHtStasPresent", (PyCFunction) _wrap_PyNs3HtOperation_SetNonGfHtStasPresent, METH_KEYWORDS|METH_VARARGS, "SetNonGfHtStasPresent(nongfhtstaspresent)\n\ntype: nongfhtstaspresent: uint8_t" },
    {(char *) "GetTxRxMcsSetUnequal", (PyCFunction) _wrap_PyNs3HtOperation_GetTxRxMcsSetUnequal, METH_NOARGS, "GetTxRxMcsSetUnequal()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3HtOperation_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetTxRxMcsSetUnequal", (PyCFunction) _wrap_PyNs3HtOperation_SetTxRxMcsSetUnequal, METH_KEYWORDS|METH_VARARGS, "SetTxRxMcsSetUnequal(txrxmcssetunequal)\n\ntype: txrxmcssetunequal: uint8_t" },
    {(char *) "GetRifsMode", (PyCFunction) _wrap_PyNs3HtOperation_GetRifsMode, METH_NOARGS, "GetRifsMode()\n\n" },
    {(char *) "GetSecondaryChannelOffset", (PyCFunction) _wrap_PyNs3HtOperation_GetSecondaryChannelOffset, METH_NOARGS, "GetSecondaryChannelOffset()\n\n" },
    {(char *) "GetPcoActive", (PyCFunction) _wrap_PyNs3HtOperation_GetPcoActive, METH_NOARGS, "GetPcoActive()\n\n" },
    {(char *) "GetPhase", (PyCFunction) _wrap_PyNs3HtOperation_GetPhase, METH_NOARGS, "GetPhase()\n\n" },
    {(char *) "GetObssNonHtStasPresent", (PyCFunction) _wrap_PyNs3HtOperation_GetObssNonHtStasPresent, METH_NOARGS, "GetObssNonHtStasPresent()\n\n" },
    {(char *) "IsSupportedMcs", (PyCFunction) _wrap_PyNs3HtOperation_IsSupportedMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetLSigTxopProtectionFullSupport", (PyCFunction) _wrap_PyNs3HtOperation_SetLSigTxopProtectionFullSupport, METH_KEYWORDS|METH_VARARGS, "SetLSigTxopProtectionFullSupport(lsigtxopprotectionfullsupport)\n\ntype: lsigtxopprotectionfullsupport: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3HtOperation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3HtOperation__tp_dealloc(PyNs3HtOperation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::HtOperation *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3HtOperation__tp_str(PyNs3HtOperation *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3HtOperation__tp_richcompare (PyNs3HtOperation *PYBINDGEN_UNUSED(self), PyNs3HtOperation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3HtOperation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3HtOperation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.HtOperation",            /* tp_name */
    sizeof(PyNs3HtOperation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3HtOperation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3HtOperation__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "HtOperation(arg0)\nHtOperation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3HtOperation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3HtOperation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3HtOperation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3IdealWifiManager__tp_init__0(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3IdealWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IdealWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IdealWifiManager(*((PyNs3IdealWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3IdealWifiManager__tp_init__1(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IdealWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3IdealWifiManager__tp_init(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3IdealWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3IdealWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3IdealWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::IdealWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3IdealWifiManager__copy__(PyNs3IdealWifiManager *self)
{

    PyNs3IdealWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3IdealWifiManager, &PyNs3IdealWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::IdealWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3IdealWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3IdealWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3IdealWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3IdealWifiManager__tp_clear(PyNs3IdealWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::IdealWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3IdealWifiManager__tp_traverse(PyNs3IdealWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3IdealWifiManager__tp_dealloc(PyNs3IdealWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3IdealWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3IdealWifiManager__tp_richcompare (PyNs3IdealWifiManager *PYBINDGEN_UNUSED(self), PyNs3IdealWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3IdealWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3IdealWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.IdealWifiManager",            /* tp_name */
    sizeof(PyNs3IdealWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3IdealWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "IdealWifiManager(arg0)\nIdealWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3IdealWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3IdealWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3IdealWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3IdealWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3IdealWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3IdealWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3LinearWifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3LinearWifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3LinearWifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_DoInitialize(PyNs3LinearWifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3LinearWifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3LinearWifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3LinearWifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3LinearWifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3LinearWifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_DoDispose(PyNs3LinearWifiTxCurrentModel *self)
{
    PyObject *py_retval;
    PyNs3LinearWifiTxCurrentModel__PythonHelper *helper = dynamic_cast< PyNs3LinearWifiTxCurrentModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3LinearWifiTxCurrentModel__PythonHelper::CalcTxCurrent(double txPowerDbm) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::LinearWifiTxCurrentModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcTxCurrent"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::LinearWifiTxCurrentModel::CalcTxCurrent(txPowerDbm);
    }
    self_obj_before = reinterpret_cast< PyNs3LinearWifiTxCurrentModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3LinearWifiTxCurrentModel* >(m_pyself)->obj = const_cast< ns3::LinearWifiTxCurrentModel* >((const ns3::LinearWifiTxCurrentModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcTxCurrent", (char *) "d", txPowerDbm);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3LinearWifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::LinearWifiTxCurrentModel::CalcTxCurrent(txPowerDbm);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3LinearWifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::LinearWifiTxCurrentModel::CalcTxCurrent(txPowerDbm);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3LinearWifiTxCurrentModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3LinearWifiTxCurrentModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3LinearWifiTxCurrentModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3LinearWifiTxCurrentModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3LinearWifiTxCurrentModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3LinearWifiTxCurrentModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3LinearWifiTxCurrentModel__tp_init__0(PyNs3LinearWifiTxCurrentModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3LinearWifiTxCurrentModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3LinearWifiTxCurrentModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3LinearWifiTxCurrentModel_Type)
    {
        self->obj = new PyNs3LinearWifiTxCurrentModel__PythonHelper(*((PyNs3LinearWifiTxCurrentModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3LinearWifiTxCurrentModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::LinearWifiTxCurrentModel(*((PyNs3LinearWifiTxCurrentModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3LinearWifiTxCurrentModel__tp_init__1(PyNs3LinearWifiTxCurrentModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3LinearWifiTxCurrentModel_Type)
    {
        self->obj = new PyNs3LinearWifiTxCurrentModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3LinearWifiTxCurrentModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::LinearWifiTxCurrentModel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3LinearWifiTxCurrentModel__tp_init(PyNs3LinearWifiTxCurrentModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3LinearWifiTxCurrentModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3LinearWifiTxCurrentModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3LinearWifiTxCurrentModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::LinearWifiTxCurrentModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3LinearWifiTxCurrentModel_CalcTxCurrent(PyNs3LinearWifiTxCurrentModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double txPowerDbm;
    PyNs3LinearWifiTxCurrentModel__PythonHelper *helper_class = dynamic_cast<PyNs3LinearWifiTxCurrentModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"txPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txPowerDbm)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->CalcTxCurrent(txPowerDbm)) : (self->obj->ns3::LinearWifiTxCurrentModel::CalcTxCurrent(txPowerDbm));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3LinearWifiTxCurrentModel__copy__(PyNs3LinearWifiTxCurrentModel *self)
{

    PyNs3LinearWifiTxCurrentModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3LinearWifiTxCurrentModel, &PyNs3LinearWifiTxCurrentModel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::LinearWifiTxCurrentModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3LinearWifiTxCurrentModel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3LinearWifiTxCurrentModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "CalcTxCurrent", (PyCFunction) _wrap_PyNs3LinearWifiTxCurrentModel_CalcTxCurrent, METH_KEYWORDS|METH_VARARGS, "CalcTxCurrent(txPowerDbm)\n\ntype: txPowerDbm: double" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3LinearWifiTxCurrentModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3LinearWifiTxCurrentModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3LinearWifiTxCurrentModel__tp_clear(PyNs3LinearWifiTxCurrentModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::LinearWifiTxCurrentModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3LinearWifiTxCurrentModel__tp_traverse(PyNs3LinearWifiTxCurrentModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3LinearWifiTxCurrentModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3LinearWifiTxCurrentModel__tp_dealloc(PyNs3LinearWifiTxCurrentModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3LinearWifiTxCurrentModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3LinearWifiTxCurrentModel__tp_richcompare (PyNs3LinearWifiTxCurrentModel *PYBINDGEN_UNUSED(self), PyNs3LinearWifiTxCurrentModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3LinearWifiTxCurrentModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3LinearWifiTxCurrentModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.LinearWifiTxCurrentModel",            /* tp_name */
    sizeof(PyNs3LinearWifiTxCurrentModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3LinearWifiTxCurrentModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "LinearWifiTxCurrentModel(arg0)\nLinearWifiTxCurrentModel()",                        /* Documentation string */
    (traverseproc)PyNs3LinearWifiTxCurrentModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3LinearWifiTxCurrentModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3LinearWifiTxCurrentModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3LinearWifiTxCurrentModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3LinearWifiTxCurrentModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3LinearWifiTxCurrentModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MacLow__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MacLow__PythonHelper::_wrap_DoInitialize(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MacLow__PythonHelper::_wrap_NotifyNewAggregate(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::WifiTxVector
PyNs3MacLow__PythonHelper::GetDataTxVector(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const *hdr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLow *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyNs3WifiTxVector *tmp_WifiTxVector;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDataTxVector"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::GetDataTxVector(packet, hdr);
    }
    self_obj_before = reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = const_cast< ns3::MacLow* >((const ns3::MacLow*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDataTxVector", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::GetDataTxVector(packet, hdr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiTxVector_Type, &tmp_WifiTxVector)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::GetDataTxVector(packet, hdr);
    }
    ns3::WifiTxVector retval = *tmp_WifiTxVector->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MacLow__PythonHelper::IsCfPeriod() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLow *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsCfPeriod"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::IsCfPeriod();
    }
    self_obj_before = reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = const_cast< ns3::MacLow* >((const ns3::MacLow*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsCfPeriod", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::IsCfPeriod();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MacLow::IsCfPeriod();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MacLow__PythonHelper::StartTransmission(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const *hdr, ns3::MacLowTransmissionParameters parameters, ns3::Ptr< ns3::Txop > txop)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLow *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyNs3MacLowTransmissionParameters *py_MacLowTransmissionParameters;
    PyNs3Txop *py_Txop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartTransmission"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MacLow::StartTransmission(packet, hdr, parameters, txop);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = (ns3::MacLow*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_MacLowTransmissionParameters = PyObject_New(PyNs3MacLowTransmissionParameters, &PyNs3MacLowTransmissionParameters_Type);
    py_MacLowTransmissionParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MacLowTransmissionParameters->obj = new ns3::MacLowTransmissionParameters(parameters);
    PyNs3MacLowTransmissionParameters_wrapper_registry[(void *) py_MacLowTransmissionParameters->obj] = (PyObject *) py_MacLowTransmissionParameters;
    if (typeid(*(const_cast<ns3::Txop *> (ns3::PeekPointer (txop)))).name() == typeid(PyNs3Txop__PythonHelper).name())
    {
        py_Txop = (PyNs3Txop*) (((PyNs3Txop__PythonHelper*) const_cast<ns3::Txop *> (ns3::PeekPointer (txop)))->m_pyself);
        py_Txop->obj = const_cast<ns3::Txop *> (ns3::PeekPointer (txop));
        Py_INCREF(py_Txop);
    } else {
        wrapper_lookup_iter3 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Txop *> (ns3::PeekPointer (txop)));
        if (wrapper_lookup_iter3 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Txop = NULL;
        } else {
            py_Txop = (PyNs3Txop *) wrapper_lookup_iter3->second;
            Py_INCREF(py_Txop);
        }
    
        if (py_Txop == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Txop *> (ns3::PeekPointer (txop))), &PyNs3Txop_Type);
            py_Txop = PyObject_GC_New(PyNs3Txop, wrapper_type2);
            py_Txop->inst_dict = NULL;
    
            py_Txop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Txop *> (ns3::PeekPointer (txop))->Ref();
            py_Txop->obj = const_cast<ns3::Txop *> (ns3::PeekPointer (txop));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Txop->obj] = (PyObject *) py_Txop;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartTransmission", (char *) "NNNN", py_Packet, py_WifiMacHeader, py_MacLowTransmissionParameters, py_Txop);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLow__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLow *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = (ns3::MacLow*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3MacLow__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MacLow__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLow__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLow__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MacLow__tp_init__0(PyNs3MacLow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLow *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3MacLow_Type)
    {
        self->obj = new PyNs3MacLow__PythonHelper(*((PyNs3MacLow *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3MacLow__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MacLow(*((PyNs3MacLow *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MacLow__tp_init__1(PyNs3MacLow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3MacLow_Type)
    {
        self->obj = new PyNs3MacLow__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3MacLow__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MacLow();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3MacLow__tp_init(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLow__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLow__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLow_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MacLow::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetBssid(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *ad;
    const char *keywords[] = {"ad", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &ad)) {
        return NULL;
    }
    self->obj->SetBssid(*((PyNs3Mac48Address *) ad)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_NotifySwitchingStartNow(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->NotifySwitchingStartNow(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetBssid(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBssid();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CalculateTransmissionTime(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MacLowTransmissionParameters *parameters;
    const char *keywords[] = {"packet", "hdr", "parameters", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3MacLowTransmissionParameters_Type, &parameters)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    ns3::Time retval = self->obj->CalculateTransmissionTime(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, *((PyNs3MacLowTransmissionParameters *) parameters)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_FlushAggregateQueue(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->FlushAggregateQueue(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetBeaconInterval(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval)) {
        return NULL;
    }
    self->obj->SetBeaconInterval(*((PyNs3Time *) interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetBeaconInterval(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_DestroyBlockAckAgreement(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator;
    int tid;
    const char *keywords[] = {"originator", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &originator, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->DestroyBlockAckAgreement(*((PyNs3Mac48Address *) originator)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetRemainingCfpDuration(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRemainingCfpDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetPromisc(PyNs3MacLow *self)
{
    PyObject *py_retval;
    
    self->obj->SetPromisc();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_RegisterEdcaForAc(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::AcIndex ac;
    PyNs3QosTxop *edca;
    ns3::QosTxop *edca_ptr;
    const char *keywords[] = {"ac", "edca", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &ac, &PyNs3QosTxop_Type, &edca)) {
        return NULL;
    }
    edca_ptr = (edca ? edca->obj : NULL);
    self->obj->RegisterEdcaForAc(ac, ns3::Ptr< ns3::QosTxop  > (edca_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_RegisterDcf(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ChannelAccessManager *dcf;
    ns3::ChannelAccessManager *dcf_ptr;
    const char *keywords[] = {"dcf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ChannelAccessManager_Type, &dcf)) {
        return NULL;
    }
    dcf_ptr = (dcf ? dcf->obj : NULL);
    self->obj->RegisterDcf(ns3::Ptr< ns3::ChannelAccessManager  > (dcf_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetSlotTime(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *slotTime;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &slotTime)) {
        return NULL;
    }
    self->obj->SetSlotTime(*((PyNs3Time *) slotTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetBasicBlockAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBasicBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetPifs(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetRifs(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CreateBlockAckAgreement(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *originator;
    int startingSeq;
    const char *keywords[] = {"respHdr", "originator", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &originator, &startingSeq)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CreateBlockAckAgreement(respHdr_ptr, *((PyNs3Mac48Address *) originator)->obj, startingSeq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_ResetPhy(PyNs3MacLow *self)
{
    PyObject *py_retval;
    
    self->obj->ResetPhy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_StartTransmission(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MacLowTransmissionParameters *parameters;
    PyNs3Txop *txop;
    ns3::Txop *txop_ptr;
    PyNs3MacLow__PythonHelper *helper_class = dynamic_cast<PyNs3MacLow__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "hdr", "parameters", "txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3MacLowTransmissionParameters_Type, &parameters, &PyNs3Txop_Type, &txop)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    txop_ptr = (txop ? txop->obj : NULL);
    (helper_class == NULL)? (self->obj->StartTransmission(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, *((PyNs3MacLowTransmissionParameters *) parameters)->obj, ns3::Ptr< ns3::Txop  > (txop_ptr))) : (self->obj->ns3::MacLow::StartTransmission(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, *((PyNs3MacLowTransmissionParameters *) parameters)->obj, ns3::Ptr< ns3::Txop  > (txop_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCompressedBlockAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    self->obj->SetCompressedBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_IsPromisc(PyNs3MacLow *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPromisc();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_DoNavStartNow(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    retval = self->obj->DoNavStartNow(*((PyNs3Time *) duration)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetSlotTime(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSlotTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetBasicBlockAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    self->obj->SetBasicBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCtsTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ctsTimeout;
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ctsTimeout)) {
        return NULL;
    }
    self->obj->SetCtsTimeout(*((PyNs3Time *) ctsTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_NotifySleepNow(PyNs3MacLow *self)
{
    PyObject *py_retval;
    
    self->obj->NotifySleepNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCtsTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCtsTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_IsCfPeriod(PyNs3MacLow *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MacLow__PythonHelper *helper_class = dynamic_cast<PyNs3MacLow__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsCfPeriod()) : (self->obj->ns3::MacLow::IsCfPeriod());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCtsToSelfSupported(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetCtsToSelfSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_StopMpduAggregation(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *peekedPacket;
    ns3::Packet *peekedPacket_ptr;
    PyNs3WifiMacHeader *peekedHdr;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    int blockAckSize;
    const char *keywords[] = {"peekedPacket", "peekedHdr", "aggregatedPacket", "blockAckSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &peekedPacket, &PyNs3WifiMacHeader_Type, &peekedHdr, &PyNs3Packet_Type, &aggregatedPacket, &blockAckSize)) {
        return NULL;
    }
    peekedPacket_ptr = (peekedPacket ? peekedPacket->obj : NULL);
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    if (blockAckSize > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->StopMpduAggregation(ns3::Ptr< ns3::Packet  > (peekedPacket_ptr), *((PyNs3WifiMacHeader *) peekedHdr)->obj, ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), blockAckSize);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetAddress(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCfpMaxDuration(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCfpMaxDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetSifs(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *sifs;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &sifs)) {
        return NULL;
    }
    self->obj->SetSifs(*((PyNs3Time *) sifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_AggregateToAmpdu(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->AggregateToAmpdu(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetAddress(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *ad;
    const char *keywords[] = {"ad", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &ad)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3Mac48Address *) ad)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_ReceiveOk(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxSnr;
    PyNs3WifiTxVector *txVector;
    bool ampduSubframe;
    PyObject *py_ampduSubframe;
    const char *keywords[] = {"packet", "rxSnr", "txVector", "ampduSubframe", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O", (char **) keywords, &PyNs3Packet_Type, &packet, &rxSnr, &PyNs3WifiTxVector_Type, &txVector, &py_ampduSubframe)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    ampduSubframe = (bool) PyObject_IsTrue(py_ampduSubframe);
    self->obj->ReceiveOk(ns3::Ptr< ns3::Packet  > (packet_ptr), rxSnr, *((PyNs3WifiTxVector *) txVector)->obj, ampduSubframe);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_DeaggregateAmpduAndReceive(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    double rxSnr;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"aggregatedPacket", "rxSnr", "txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &rxSnr, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    self->obj->DeaggregateAmpduAndReceive(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), rxSnr, *((PyNs3WifiTxVector *) txVector)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCompressedBlockAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCompressedBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetRifs(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rifs;
    const char *keywords[] = {"rifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rifs)) {
        return NULL;
    }
    self->obj->SetRifs(*((PyNs3Time *) rifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_NotifyOffNow(PyNs3MacLow *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyOffNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCtsToSelfSupported(PyNs3MacLow *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetCtsToSelfSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ackTimeout;
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ackTimeout)) {
        return NULL;
    }
    self->obj->SetAckTimeout(*((PyNs3Time *) ackTimeout)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetPhy(PyNs3MacLow *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy();
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = reinterpret_cast< PyNs3WifiPhy* >(reinterpret_cast< PyNs3WifiPhy__PythonHelper* >(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->inst_dict = NULL;
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetRxCallback(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl13> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl13> (callback);
    self->obj->SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::WifiMacHeader *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCfpMaxDuration(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SetCfpMaxDuration(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetDataTxVector(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MacLow__PythonHelper *helper_class = dynamic_cast<PyNs3MacLow__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    PyNs3WifiTxVector *py_WifiTxVector;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    ns3::WifiTxVector retval = (helper_class == NULL)? (self->obj->GetDataTxVector(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr)) : (self->obj->ns3::MacLow::GetDataTxVector(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr));
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(retval);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = Py_BuildValue((char *) "N", py_WifiTxVector);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetPifs(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *pifs;
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &pifs)) {
        return NULL;
    }
    self->obj->SetPifs(*((PyNs3Time *) pifs)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CanTransmitNextCfFrame(PyNs3MacLow *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->CanTransmitNextCfFrame();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetSifs(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CalculateOverallTxTime(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MacLowTransmissionParameters *params;
    unsigned int fragmentSize = 0;
    const char *keywords[] = {"packet", "hdr", "params", "fragmentSize", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!|I", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3MacLowTransmissionParameters_Type, &params, &fragmentSize)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    ns3::Time retval = self->obj->CalculateOverallTxTime(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, *((PyNs3MacLowTransmissionParameters *) params)->obj, fragmentSize);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_ReceiveError(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxSnr;
    const char *keywords[] = {"packet", "rxSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &rxSnr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->ReceiveError(ns3::Ptr< ns3::Packet  > (packet_ptr), rxSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacLow__copy__(PyNs3MacLow *self)
{

    PyNs3MacLow *py_copy;
    py_copy = PyObject_GC_New(PyNs3MacLow, &PyNs3MacLow_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MacLow(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacLow_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MacLow_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetBssid", (PyCFunction) _wrap_PyNs3MacLow_SetBssid, METH_KEYWORDS|METH_VARARGS, "SetBssid(ad)\n\ntype: ad: ns3::Mac48Address" },
    {(char *) "NotifySwitchingStartNow", (PyCFunction) _wrap_PyNs3MacLow_NotifySwitchingStartNow, METH_KEYWORDS|METH_VARARGS, "NotifySwitchingStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3MacLow_GetBssid, METH_NOARGS, "GetBssid()\n\n" },
    {(char *) "CalculateTransmissionTime", (PyCFunction) _wrap_PyNs3MacLow_CalculateTransmissionTime, METH_KEYWORDS|METH_VARARGS, "CalculateTransmissionTime(packet, hdr, parameters)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const *\ntype: parameters: ns3::MacLowTransmissionParameters const &" },
    {(char *) "FlushAggregateQueue", (PyCFunction) _wrap_PyNs3MacLow_FlushAggregateQueue, METH_KEYWORDS|METH_VARARGS, "FlushAggregateQueue(tid)\n\ntype: tid: uint8_t" },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3MacLow_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, "SetBeaconInterval(interval)\n\ntype: interval: ns3::Time" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3MacLow_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "DestroyBlockAckAgreement", (PyCFunction) _wrap_PyNs3MacLow_DestroyBlockAckAgreement, METH_KEYWORDS|METH_VARARGS, "DestroyBlockAckAgreement(originator, tid)\n\ntype: originator: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "GetRemainingCfpDuration", (PyCFunction) _wrap_PyNs3MacLow_GetRemainingCfpDuration, METH_NOARGS, "GetRemainingCfpDuration()\n\n" },
    {(char *) "SetPromisc", (PyCFunction) _wrap_PyNs3MacLow_SetPromisc, METH_NOARGS, "SetPromisc()\n\n" },
    {(char *) "RegisterEdcaForAc", (PyCFunction) _wrap_PyNs3MacLow_RegisterEdcaForAc, METH_KEYWORDS|METH_VARARGS, "RegisterEdcaForAc(ac, edca)\n\ntype: ac: ns3::AcIndex\ntype: edca: ns3::Ptr< ns3::QosTxop >" },
    {(char *) "RegisterDcf", (PyCFunction) _wrap_PyNs3MacLow_RegisterDcf, METH_KEYWORDS|METH_VARARGS, "RegisterDcf(dcf)\n\ntype: dcf: ns3::Ptr< ns3::ChannelAccessManager >" },
    {(char *) "SetSlotTime", (PyCFunction) _wrap_PyNs3MacLow_SetSlotTime, METH_KEYWORDS|METH_VARARGS, "SetSlotTime(slotTime)\n\ntype: slotTime: ns3::Time" },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetBasicBlockAckTimeout, METH_NOARGS, "GetBasicBlockAckTimeout()\n\n" },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3MacLow_GetPifs, METH_NOARGS, "GetPifs()\n\n" },
    {(char *) "GetRifs", (PyCFunction) _wrap_PyNs3MacLow_GetRifs, METH_NOARGS, "GetRifs()\n\n" },
    {(char *) "CreateBlockAckAgreement", (PyCFunction) _wrap_PyNs3MacLow_CreateBlockAckAgreement, METH_KEYWORDS|METH_VARARGS, "CreateBlockAckAgreement(respHdr, originator, startingSeq)\n\ntype: respHdr: ns3::MgtAddBaResponseHeader const *\ntype: originator: ns3::Mac48Address\ntype: startingSeq: uint16_t" },
    {(char *) "ResetPhy", (PyCFunction) _wrap_PyNs3MacLow_ResetPhy, METH_NOARGS, "ResetPhy()\n\n" },
    {(char *) "StartTransmission", (PyCFunction) _wrap_PyNs3MacLow_StartTransmission, METH_KEYWORDS|METH_VARARGS, "StartTransmission(packet, hdr, parameters, txop)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const *\ntype: parameters: ns3::MacLowTransmissionParameters\ntype: txop: ns3::Ptr< ns3::Txop >" },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetCompressedBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "IsPromisc", (PyCFunction) _wrap_PyNs3MacLow_IsPromisc, METH_NOARGS, "IsPromisc()\n\n" },
    {(char *) "DoNavStartNow", (PyCFunction) _wrap_PyNs3MacLow_DoNavStartNow, METH_KEYWORDS|METH_VARARGS, "DoNavStartNow(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "GetSlotTime", (PyCFunction) _wrap_PyNs3MacLow_GetSlotTime, METH_NOARGS, "GetSlotTime()\n\n" },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetBasicBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, "SetCtsTimeout(ctsTimeout)\n\ntype: ctsTimeout: ns3::Time" },
    {(char *) "NotifySleepNow", (PyCFunction) _wrap_PyNs3MacLow_NotifySleepNow, METH_NOARGS, "NotifySleepNow()\n\n" },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetCtsTimeout, METH_NOARGS, "GetCtsTimeout()\n\n" },
    {(char *) "IsCfPeriod", (PyCFunction) _wrap_PyNs3MacLow_IsCfPeriod, METH_NOARGS, "IsCfPeriod()\n\n" },
    {(char *) "SetCtsToSelfSupported", (PyCFunction) _wrap_PyNs3MacLow_SetCtsToSelfSupported, METH_KEYWORDS|METH_VARARGS, "SetCtsToSelfSupported(enable)\n\ntype: enable: bool" },
    {(char *) "StopMpduAggregation", (PyCFunction) _wrap_PyNs3MacLow_StopMpduAggregation, METH_KEYWORDS|METH_VARARGS, "StopMpduAggregation(peekedPacket, peekedHdr, aggregatedPacket, blockAckSize)\n\ntype: peekedPacket: ns3::Ptr< ns3::Packet const >\ntype: peekedHdr: ns3::WifiMacHeader\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >\ntype: blockAckSize: uint8_t" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3MacLow_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "GetCfpMaxDuration", (PyCFunction) _wrap_PyNs3MacLow_GetCfpMaxDuration, METH_NOARGS, "GetCfpMaxDuration()\n\n" },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3MacLow_SetSifs, METH_KEYWORDS|METH_VARARGS, "SetSifs(sifs)\n\ntype: sifs: ns3::Time" },
    {(char *) "AggregateToAmpdu", (PyCFunction) _wrap_PyNs3MacLow_AggregateToAmpdu, METH_KEYWORDS|METH_VARARGS, "AggregateToAmpdu(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3MacLow_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(ad)\n\ntype: ad: ns3::Mac48Address" },
    {(char *) "ReceiveOk", (PyCFunction) _wrap_PyNs3MacLow_ReceiveOk, METH_KEYWORDS|METH_VARARGS, "ReceiveOk(packet, rxSnr, txVector, ampduSubframe)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: rxSnr: double\ntype: txVector: ns3::WifiTxVector\ntype: ampduSubframe: bool" },
    {(char *) "DeaggregateAmpduAndReceive", (PyCFunction) _wrap_PyNs3MacLow_DeaggregateAmpduAndReceive, METH_KEYWORDS|METH_VARARGS, "DeaggregateAmpduAndReceive(aggregatedPacket, rxSnr, txVector)\n\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >\ntype: rxSnr: double\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetCompressedBlockAckTimeout, METH_NOARGS, "GetCompressedBlockAckTimeout()\n\n" },
    {(char *) "SetRifs", (PyCFunction) _wrap_PyNs3MacLow_SetRifs, METH_KEYWORDS|METH_VARARGS, "SetRifs(rifs)\n\ntype: rifs: ns3::Time" },
    {(char *) "NotifyOffNow", (PyCFunction) _wrap_PyNs3MacLow_NotifyOffNow, METH_NOARGS, "NotifyOffNow()\n\n" },
    {(char *) "GetCtsToSelfSupported", (PyCFunction) _wrap_PyNs3MacLow_GetCtsToSelfSupported, METH_NOARGS, "GetCtsToSelfSupported()\n\n" },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetAckTimeout(ackTimeout)\n\ntype: ackTimeout: ns3::Time" },
    {(char *) "GetPhy", (PyCFunction) _wrap_PyNs3MacLow_GetPhy, METH_NOARGS, "GetPhy()\n\n" },
    {(char *) "SetRxCallback", (PyCFunction) _wrap_PyNs3MacLow_SetRxCallback, METH_KEYWORDS|METH_VARARGS, "SetRxCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::WifiMacHeader const *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetCfpMaxDuration", (PyCFunction) _wrap_PyNs3MacLow_SetCfpMaxDuration, METH_KEYWORDS|METH_VARARGS, "SetCfpMaxDuration(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "GetDataTxVector", (PyCFunction) _wrap_PyNs3MacLow_GetDataTxVector, METH_KEYWORDS|METH_VARARGS, "GetDataTxVector(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const *" },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3MacLow_SetPifs, METH_KEYWORDS|METH_VARARGS, "SetPifs(pifs)\n\ntype: pifs: ns3::Time" },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetAckTimeout, METH_NOARGS, "GetAckTimeout()\n\n" },
    {(char *) "CanTransmitNextCfFrame", (PyCFunction) _wrap_PyNs3MacLow_CanTransmitNextCfFrame, METH_NOARGS, "CanTransmitNextCfFrame()\n\n" },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3MacLow_GetSifs, METH_NOARGS, "GetSifs()\n\n" },
    {(char *) "CalculateOverallTxTime", (PyCFunction) _wrap_PyNs3MacLow_CalculateOverallTxTime, METH_KEYWORDS|METH_VARARGS, "CalculateOverallTxTime(packet, hdr, params, fragmentSize)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const *\ntype: params: ns3::MacLowTransmissionParameters const &\ntype: fragmentSize: uint32_t" },
    {(char *) "ReceiveError", (PyCFunction) _wrap_PyNs3MacLow_ReceiveError, METH_KEYWORDS|METH_VARARGS, "ReceiveError(packet, rxSnr)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: rxSnr: double" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacLow__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacLow__tp_clear(PyNs3MacLow *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MacLow *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MacLow__tp_traverse(PyNs3MacLow *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3MacLow__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MacLow__tp_dealloc(PyNs3MacLow *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacLow__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacLow__tp_richcompare (PyNs3MacLow *PYBINDGEN_UNUSED(self), PyNs3MacLow *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLow_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLow_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MacLow",            /* tp_name */
    sizeof(PyNs3MacLow),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLow__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MacLow(arg0)\nMacLow()",                        /* Documentation string */
    (traverseproc)PyNs3MacLow__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacLow__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLow__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacLow, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLow__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MacRxMiddle__tp_init__0(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacRxMiddle *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacRxMiddle_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacRxMiddle(*((PyNs3MacRxMiddle *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MacRxMiddle__tp_init__1(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacRxMiddle();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MacRxMiddle__tp_init(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacRxMiddle__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacRxMiddle__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacRxMiddle_Receive(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacRxMiddle_SetForwardCallback(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl13> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl13> (callback);
    self->obj->SetForwardCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, const ns3::WifiMacHeader *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacRxMiddle_SetPcfCallback(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetPcfCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacRxMiddle__copy__(PyNs3MacRxMiddle *self)
{

    PyNs3MacRxMiddle *py_copy;
    py_copy = PyObject_New(PyNs3MacRxMiddle, &PyNs3MacRxMiddle_Type);
    
    py_copy->obj = new ns3::MacRxMiddle(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacRxMiddle_methods[] = {
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3MacRxMiddle_Receive, METH_KEYWORDS|METH_VARARGS, "Receive(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdr: ns3::WifiMacHeader const *" },
    {(char *) "SetForwardCallback", (PyCFunction) _wrap_PyNs3MacRxMiddle_SetForwardCallback, METH_KEYWORDS|METH_VARARGS, "SetForwardCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::WifiMacHeader const *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetPcfCallback", (PyCFunction) _wrap_PyNs3MacRxMiddle_SetPcfCallback, METH_KEYWORDS|METH_VARARGS, "SetPcfCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacRxMiddle__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MacRxMiddle__tp_dealloc(PyNs3MacRxMiddle *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::MacRxMiddle *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacRxMiddle__tp_richcompare (PyNs3MacRxMiddle *PYBINDGEN_UNUSED(self), PyNs3MacRxMiddle *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacRxMiddle_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacRxMiddle_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MacRxMiddle",            /* tp_name */
    sizeof(PyNs3MacRxMiddle),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacRxMiddle__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MacRxMiddle(arg0)\nMacRxMiddle()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacRxMiddle__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacRxMiddle_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacRxMiddle__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MacTxMiddle__tp_init__0(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacTxMiddle *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacTxMiddle_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacTxMiddle(*((PyNs3MacTxMiddle *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MacTxMiddle__tp_init__1(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacTxMiddle();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MacTxMiddle__tp_init(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacTxMiddle__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacTxMiddle__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacTxMiddle_GetNextSequenceNumberFor(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    hdr_ptr = (hdr ? hdr->obj : NULL);
    retval = self->obj->GetNextSequenceNumberFor(hdr_ptr);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacTxMiddle_GetNextSeqNumberByTidAndAddress(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    int tid;
    PyNs3Mac48Address *addr;
    const char *keywords[] = {"tid", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &addr)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNextSeqNumberByTidAndAddress(tid, *((PyNs3Mac48Address *) addr)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacTxMiddle_PeekNextSequenceNumberFor(PyNs3MacTxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    hdr_ptr = (hdr ? hdr->obj : NULL);
    retval = self->obj->PeekNextSequenceNumberFor(hdr_ptr);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacTxMiddle__copy__(PyNs3MacTxMiddle *self)
{

    PyNs3MacTxMiddle *py_copy;
    py_copy = PyObject_New(PyNs3MacTxMiddle, &PyNs3MacTxMiddle_Type);
    
    py_copy->obj = new ns3::MacTxMiddle(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacTxMiddle_methods[] = {
    {(char *) "GetNextSequenceNumberFor", (PyCFunction) _wrap_PyNs3MacTxMiddle_GetNextSequenceNumberFor, METH_KEYWORDS|METH_VARARGS, "GetNextSequenceNumberFor(hdr)\n\ntype: hdr: ns3::WifiMacHeader const *" },
    {(char *) "GetNextSeqNumberByTidAndAddress", (PyCFunction) _wrap_PyNs3MacTxMiddle_GetNextSeqNumberByTidAndAddress, METH_KEYWORDS|METH_VARARGS, "GetNextSeqNumberByTidAndAddress(tid, addr)\n\ntype: tid: uint8_t\ntype: addr: ns3::Mac48Address" },
    {(char *) "PeekNextSequenceNumberFor", (PyCFunction) _wrap_PyNs3MacTxMiddle_PeekNextSequenceNumberFor, METH_KEYWORDS|METH_VARARGS, "PeekNextSequenceNumberFor(hdr)\n\ntype: hdr: ns3::WifiMacHeader const *" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacTxMiddle__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MacTxMiddle__tp_dealloc(PyNs3MacTxMiddle *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::MacTxMiddle *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacTxMiddle__tp_richcompare (PyNs3MacTxMiddle *PYBINDGEN_UNUSED(self), PyNs3MacTxMiddle *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacTxMiddle_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacTxMiddle_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MacTxMiddle",            /* tp_name */
    sizeof(PyNs3MacTxMiddle),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacTxMiddle__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MacTxMiddle(arg0)\nMacTxMiddle()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacTxMiddle__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacTxMiddle_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacTxMiddle__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtBeaconHeader__tp_init__0(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtBeaconHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MgtBeaconHeader__tp_init__1(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtBeaconHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtBeaconHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtBeaconHeader(*((PyNs3MgtBeaconHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MgtBeaconHeader__tp_init(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtBeaconHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtBeaconHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtBeaconHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtBeaconHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtBeaconHeader__copy__(PyNs3MgtBeaconHeader *self)
{

    PyNs3MgtBeaconHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtBeaconHeader, &PyNs3MgtBeaconHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MgtBeaconHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtBeaconHeader_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtBeaconHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtBeaconHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtBeaconHeader__tp_clear(PyNs3MgtBeaconHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtBeaconHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtBeaconHeader__tp_traverse(PyNs3MgtBeaconHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtBeaconHeader__tp_dealloc(PyNs3MgtBeaconHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtBeaconHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtBeaconHeader__tp_richcompare (PyNs3MgtBeaconHeader *PYBINDGEN_UNUSED(self), PyNs3MgtBeaconHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtBeaconHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtBeaconHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MgtBeaconHeader",            /* tp_name */
    sizeof(PyNs3MgtBeaconHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtBeaconHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MgtBeaconHeader(arg0)\nMgtBeaconHeader()",                        /* Documentation string */
    (traverseproc)PyNs3MgtBeaconHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtBeaconHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtBeaconHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtBeaconHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtBeaconHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtBeaconHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MinstrelHtWifiManager__tp_init__0(PyNs3MinstrelHtWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MinstrelHtWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MinstrelHtWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelHtWifiManager(*((PyNs3MinstrelHtWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MinstrelHtWifiManager__tp_init__1(PyNs3MinstrelHtWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelHtWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MinstrelHtWifiManager__tp_init(PyNs3MinstrelHtWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MinstrelHtWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MinstrelHtWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MinstrelHtWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MinstrelHtWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelHtWifiManager_SetHeSupported(PyNs3MinstrelHtWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelHtWifiManager_AssignStreams(PyNs3MinstrelHtWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MinstrelHtWifiManager__copy__(PyNs3MinstrelHtWifiManager *self)
{

    PyNs3MinstrelHtWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3MinstrelHtWifiManager, &PyNs3MinstrelHtWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MinstrelHtWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MinstrelHtWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MinstrelHtWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3MinstrelHtWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3MinstrelHtWifiManager_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MinstrelHtWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MinstrelHtWifiManager__tp_clear(PyNs3MinstrelHtWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MinstrelHtWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MinstrelHtWifiManager__tp_traverse(PyNs3MinstrelHtWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MinstrelHtWifiManager__tp_dealloc(PyNs3MinstrelHtWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MinstrelHtWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MinstrelHtWifiManager__tp_richcompare (PyNs3MinstrelHtWifiManager *PYBINDGEN_UNUSED(self), PyNs3MinstrelHtWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MinstrelHtWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MinstrelHtWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MinstrelHtWifiManager",            /* tp_name */
    sizeof(PyNs3MinstrelHtWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MinstrelHtWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MinstrelHtWifiManager(arg0)\nMinstrelHtWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3MinstrelHtWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MinstrelHtWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MinstrelHtWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MinstrelHtWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MinstrelHtWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MinstrelHtWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MinstrelWifiManager__tp_init__0(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MinstrelWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MinstrelWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelWifiManager(*((PyNs3MinstrelWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MinstrelWifiManager__tp_init__1(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MinstrelWifiManager__tp_init(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MinstrelWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MinstrelWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_SetHtSupported(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MinstrelWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_SetHeSupported(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_SetVhtSupported(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_AssignStreams(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MinstrelWifiManager__copy__(PyNs3MinstrelWifiManager *self)
{

    PyNs3MinstrelWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3MinstrelWifiManager, &PyNs3MinstrelWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MinstrelWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MinstrelWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MinstrelWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MinstrelWifiManager__tp_clear(PyNs3MinstrelWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MinstrelWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MinstrelWifiManager__tp_traverse(PyNs3MinstrelWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MinstrelWifiManager__tp_dealloc(PyNs3MinstrelWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MinstrelWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MinstrelWifiManager__tp_richcompare (PyNs3MinstrelWifiManager *PYBINDGEN_UNUSED(self), PyNs3MinstrelWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MinstrelWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MinstrelWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MinstrelWifiManager",            /* tp_name */
    sizeof(PyNs3MinstrelWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MinstrelWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MinstrelWifiManager(arg0)\nMinstrelWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3MinstrelWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MinstrelWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MinstrelWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MinstrelWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MinstrelWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MinstrelWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MpduAggregator__tp_init__0(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MpduAggregator *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MpduAggregator_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MpduAggregator(*((PyNs3MpduAggregator *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MpduAggregator__tp_init__1(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MpduAggregator();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MpduAggregator__tp_init(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MpduAggregator__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MpduAggregator__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MpduAggregator_SetMaxAmpduSize(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxSize;
    const char *keywords[] = {"maxSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxSize)) {
        return NULL;
    }
    if (maxSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmpduSize(maxSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_AddHeaderAndPad(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    bool last;
    PyObject *py_last;
    bool isSingleMpdu;
    PyObject *py_isSingleMpdu;
    const char *keywords[] = {"packet", "last", "isSingleMpdu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OO", (char **) keywords, &PyNs3Packet_Type, &packet, &py_last, &py_isSingleMpdu)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    last = (bool) PyObject_IsTrue(py_last);
    isSingleMpdu = (bool) PyObject_IsTrue(py_isSingleMpdu);
    self->obj->AddHeaderAndPad(ns3::Ptr< ns3::Packet  > (packet_ptr), last, isSingleMpdu);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_GetMaxAmpduSize(PyNs3MpduAggregator *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetMaxAmpduSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MpduAggregator::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_AggregateSingleMpdu(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    const char *keywords[] = {"packet", "aggregatedPacket", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &aggregatedPacket)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    self->obj->AggregateSingleMpdu(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_CanBeAggregated(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int packetSize;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    int blockAckSize;
    const char *keywords[] = {"packetSize", "aggregatedPacket", "blockAckSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &packetSize, &PyNs3Packet_Type, &aggregatedPacket, &blockAckSize)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    if (blockAckSize > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->CanBeAggregated(packetSize, ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), blockAckSize);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MpduAggregator_Aggregate(PyNs3MpduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    const char *keywords[] = {"packet", "aggregatedPacket", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &aggregatedPacket)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    retval = self->obj->Aggregate(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MpduAggregator__copy__(PyNs3MpduAggregator *self)
{

    PyNs3MpduAggregator *py_copy;
    py_copy = PyObject_GC_New(PyNs3MpduAggregator, &PyNs3MpduAggregator_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MpduAggregator(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MpduAggregator_methods[] = {
    {(char *) "SetMaxAmpduSize", (PyCFunction) _wrap_PyNs3MpduAggregator_SetMaxAmpduSize, METH_KEYWORDS|METH_VARARGS, "SetMaxAmpduSize(maxSize)\n\ntype: maxSize: uint16_t" },
    {(char *) "AddHeaderAndPad", (PyCFunction) _wrap_PyNs3MpduAggregator_AddHeaderAndPad, METH_KEYWORDS|METH_VARARGS, "AddHeaderAndPad(packet, last, isSingleMpdu)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: last: bool\ntype: isSingleMpdu: bool" },
    {(char *) "GetMaxAmpduSize", (PyCFunction) _wrap_PyNs3MpduAggregator_GetMaxAmpduSize, METH_NOARGS, "GetMaxAmpduSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MpduAggregator_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "AggregateSingleMpdu", (PyCFunction) _wrap_PyNs3MpduAggregator_AggregateSingleMpdu, METH_KEYWORDS|METH_VARARGS, "AggregateSingleMpdu(packet, aggregatedPacket)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >" },
    {(char *) "CanBeAggregated", (PyCFunction) _wrap_PyNs3MpduAggregator_CanBeAggregated, METH_KEYWORDS|METH_VARARGS, "CanBeAggregated(packetSize, aggregatedPacket, blockAckSize)\n\ntype: packetSize: uint32_t\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >\ntype: blockAckSize: uint8_t" },
    {(char *) "Aggregate", (PyCFunction) _wrap_PyNs3MpduAggregator_Aggregate, METH_KEYWORDS|METH_VARARGS, "Aggregate(packet, aggregatedPacket)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MpduAggregator__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MpduAggregator__tp_clear(PyNs3MpduAggregator *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MpduAggregator *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MpduAggregator__tp_traverse(PyNs3MpduAggregator *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MpduAggregator__tp_dealloc(PyNs3MpduAggregator *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MpduAggregator__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MpduAggregator__tp_richcompare (PyNs3MpduAggregator *PYBINDGEN_UNUSED(self), PyNs3MpduAggregator *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MpduAggregator_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MpduAggregator_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MpduAggregator",            /* tp_name */
    sizeof(PyNs3MpduAggregator),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MpduAggregator__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MpduAggregator(arg0)\nMpduAggregator()",                        /* Documentation string */
    (traverseproc)PyNs3MpduAggregator__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MpduAggregator__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MpduAggregator__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MpduAggregator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MpduAggregator, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MpduAggregator__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MsduAggregator__tp_init__0(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MsduAggregator *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MsduAggregator_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MsduAggregator(*((PyNs3MsduAggregator *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MsduAggregator__tp_init__1(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MsduAggregator();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MsduAggregator__tp_init(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MsduAggregator__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MsduAggregator__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MsduAggregator_Aggregate(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3Mac48Address *src;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"packet", "aggregatedPacket", "src", "dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3Mac48Address_Type, &src, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    retval = self->obj->Aggregate(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), *((PyNs3Mac48Address *) src)->obj, *((PyNs3Mac48Address *) dest)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MsduAggregator_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MsduAggregator::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MsduAggregator_SetMaxAmsduSize(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxSize;
    const char *keywords[] = {"maxSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxSize)) {
        return NULL;
    }
    if (maxSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmsduSize(maxSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MsduAggregator_GetMaxAmsduSize(PyNs3MsduAggregator *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetMaxAmsduSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MsduAggregator__copy__(PyNs3MsduAggregator *self)
{

    PyNs3MsduAggregator *py_copy;
    py_copy = PyObject_GC_New(PyNs3MsduAggregator, &PyNs3MsduAggregator_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MsduAggregator(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MsduAggregator_methods[] = {
    {(char *) "Aggregate", (PyCFunction) _wrap_PyNs3MsduAggregator_Aggregate, METH_KEYWORDS|METH_VARARGS, "Aggregate(packet, aggregatedPacket, src, dest)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: aggregatedPacket: ns3::Ptr< ns3::Packet >\ntype: src: ns3::Mac48Address\ntype: dest: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MsduAggregator_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMaxAmsduSize", (PyCFunction) _wrap_PyNs3MsduAggregator_SetMaxAmsduSize, METH_KEYWORDS|METH_VARARGS, "SetMaxAmsduSize(maxSize)\n\ntype: maxSize: uint16_t" },
    {(char *) "GetMaxAmsduSize", (PyCFunction) _wrap_PyNs3MsduAggregator_GetMaxAmsduSize, METH_NOARGS, "GetMaxAmsduSize()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MsduAggregator__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MsduAggregator__tp_clear(PyNs3MsduAggregator *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MsduAggregator *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MsduAggregator__tp_traverse(PyNs3MsduAggregator *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MsduAggregator__tp_dealloc(PyNs3MsduAggregator *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MsduAggregator__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MsduAggregator__tp_richcompare (PyNs3MsduAggregator *PYBINDGEN_UNUSED(self), PyNs3MsduAggregator *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MsduAggregator_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MsduAggregator_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.MsduAggregator",            /* tp_name */
    sizeof(PyNs3MsduAggregator),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MsduAggregator__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MsduAggregator(arg0)\nMsduAggregator()",                        /* Documentation string */
    (traverseproc)PyNs3MsduAggregator__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MsduAggregator__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MsduAggregator__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MsduAggregator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MsduAggregator, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MsduAggregator__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_DoInitialize(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3NistErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NistErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    self_obj_before = reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = const_cast< ns3::NistErrorRateModel* >((const ns3::NistErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NNdK", py_WifiMode, py_WifiTxVector, snr, nbits);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NistErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NistErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NistErrorRateModel__tp_init__0(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NistErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NistErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NistErrorRateModel_Type)
    {
        self->obj = new PyNs3NistErrorRateModel__PythonHelper(*((PyNs3NistErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NistErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NistErrorRateModel(*((PyNs3NistErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3NistErrorRateModel__tp_init__1(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NistErrorRateModel_Type)
    {
        self->obj = new PyNs3NistErrorRateModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NistErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NistErrorRateModel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3NistErrorRateModel__tp_init(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NistErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NistErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NistErrorRateModel_GetChunkSuccessRate(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    PyNs3WifiTxVector *txVector;
    double snr;
    uint64_t nbits;
    PyNs3NistErrorRateModel__PythonHelper *helper_class = dynamic_cast<PyNs3NistErrorRateModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"mode", "txVector", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dK", (char **) keywords, &PyNs3WifiMode_Type, &mode, &PyNs3WifiTxVector_Type, &txVector, &snr, &nbits)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, *((PyNs3WifiTxVector *) txVector)->obj, snr, nbits)) : (self->obj->ns3::NistErrorRateModel::GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, *((PyNs3WifiTxVector *) txVector)->obj, snr, nbits));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NistErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::NistErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NistErrorRateModel__copy__(PyNs3NistErrorRateModel *self)
{

    PyNs3NistErrorRateModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3NistErrorRateModel, &PyNs3NistErrorRateModel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::NistErrorRateModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NistErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3NistErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, "GetChunkSuccessRate(mode, txVector, snr, nbits)\n\ntype: mode: ns3::WifiMode\ntype: txVector: ns3::WifiTxVector\ntype: snr: double\ntype: nbits: uint64_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NistErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NistErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NistErrorRateModel__tp_clear(PyNs3NistErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::NistErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NistErrorRateModel__tp_traverse(PyNs3NistErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NistErrorRateModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NistErrorRateModel__tp_dealloc(PyNs3NistErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NistErrorRateModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NistErrorRateModel__tp_richcompare (PyNs3NistErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3NistErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NistErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NistErrorRateModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.NistErrorRateModel",            /* tp_name */
    sizeof(PyNs3NistErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NistErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "NistErrorRateModel(arg0)\nNistErrorRateModel()",                        /* Documentation string */
    (traverseproc)PyNs3NistErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NistErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NistErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NistErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NistErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NistErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3OnoeWifiManager__tp_init__0(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OnoeWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OnoeWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OnoeWifiManager(*((PyNs3OnoeWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OnoeWifiManager__tp_init__1(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OnoeWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OnoeWifiManager__tp_init(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OnoeWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OnoeWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OnoeWifiManager_SetHtSupported(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OnoeWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::OnoeWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3OnoeWifiManager_SetVhtSupported(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OnoeWifiManager_SetHeSupported(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3OnoeWifiManager__copy__(PyNs3OnoeWifiManager *self)
{

    PyNs3OnoeWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3OnoeWifiManager, &PyNs3OnoeWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::OnoeWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OnoeWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3OnoeWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3OnoeWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3OnoeWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3OnoeWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OnoeWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3OnoeWifiManager__tp_clear(PyNs3OnoeWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::OnoeWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3OnoeWifiManager__tp_traverse(PyNs3OnoeWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3OnoeWifiManager__tp_dealloc(PyNs3OnoeWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3OnoeWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OnoeWifiManager__tp_richcompare (PyNs3OnoeWifiManager *PYBINDGEN_UNUSED(self), PyNs3OnoeWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OnoeWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OnoeWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.OnoeWifiManager",            /* tp_name */
    sizeof(PyNs3OnoeWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OnoeWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "OnoeWifiManager(arg0)\nOnoeWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3OnoeWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3OnoeWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OnoeWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OnoeWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3OnoeWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OnoeWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ParfWifiManager__tp_init__0(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ParfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ParfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ParfWifiManager(*((PyNs3ParfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ParfWifiManager__tp_init__1(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ParfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ParfWifiManager__tp_init(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ParfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ParfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ParfWifiManager_SetHtSupported(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ParfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ParfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ParfWifiManager_SetVhtSupported(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ParfWifiManager_SetHeSupported(PyNs3ParfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ParfWifiManager__copy__(PyNs3ParfWifiManager *self)
{

    PyNs3ParfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ParfWifiManager, &PyNs3ParfWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ParfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ParfWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3ParfWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ParfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3ParfWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3ParfWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ParfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ParfWifiManager__tp_clear(PyNs3ParfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ParfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ParfWifiManager__tp_traverse(PyNs3ParfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ParfWifiManager__tp_dealloc(PyNs3ParfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ParfWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ParfWifiManager__tp_richcompare (PyNs3ParfWifiManager *PYBINDGEN_UNUSED(self), PyNs3ParfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ParfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ParfWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ParfWifiManager",            /* tp_name */
    sizeof(PyNs3ParfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ParfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ParfWifiManager(arg0)\nParfWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3ParfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ParfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ParfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ParfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ParfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ParfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3QosBlockedDestinations__tp_init__0(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3QosBlockedDestinations *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3QosBlockedDestinations_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::QosBlockedDestinations(*((PyNs3QosBlockedDestinations *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3QosBlockedDestinations__tp_init__1(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::QosBlockedDestinations();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3QosBlockedDestinations__tp_init(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3QosBlockedDestinations__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QosBlockedDestinations__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3QosBlockedDestinations_IsBlocked(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *dest;
    int tid;
    const char *keywords[] = {"dest", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &dest, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsBlocked(*((PyNs3Mac48Address *) dest)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosBlockedDestinations_Unblock(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest;
    int tid;
    const char *keywords[] = {"dest", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &dest, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Unblock(*((PyNs3Mac48Address *) dest)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosBlockedDestinations_Block(PyNs3QosBlockedDestinations *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest;
    int tid;
    const char *keywords[] = {"dest", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &dest, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Block(*((PyNs3Mac48Address *) dest)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3QosBlockedDestinations__copy__(PyNs3QosBlockedDestinations *self)
{

    PyNs3QosBlockedDestinations *py_copy;
    py_copy = PyObject_New(PyNs3QosBlockedDestinations, &PyNs3QosBlockedDestinations_Type);
    
    py_copy->obj = new ns3::QosBlockedDestinations(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3QosBlockedDestinations_methods[] = {
    {(char *) "IsBlocked", (PyCFunction) _wrap_PyNs3QosBlockedDestinations_IsBlocked, METH_KEYWORDS|METH_VARARGS, "IsBlocked(dest, tid)\n\ntype: dest: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "Unblock", (PyCFunction) _wrap_PyNs3QosBlockedDestinations_Unblock, METH_KEYWORDS|METH_VARARGS, "Unblock(dest, tid)\n\ntype: dest: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "Block", (PyCFunction) _wrap_PyNs3QosBlockedDestinations_Block, METH_KEYWORDS|METH_VARARGS, "Block(dest, tid)\n\ntype: dest: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3QosBlockedDestinations__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3QosBlockedDestinations__tp_dealloc(PyNs3QosBlockedDestinations *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::QosBlockedDestinations *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QosBlockedDestinations__tp_richcompare (PyNs3QosBlockedDestinations *PYBINDGEN_UNUSED(self), PyNs3QosBlockedDestinations *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QosBlockedDestinations_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QosBlockedDestinations_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.QosBlockedDestinations",            /* tp_name */
    sizeof(PyNs3QosBlockedDestinations),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QosBlockedDestinations__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "QosBlockedDestinations(arg0)\nQosBlockedDestinations()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QosBlockedDestinations__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QosBlockedDestinations_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QosBlockedDestinations__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3QosTxop__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper = dynamic_cast< PyNs3QosTxop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3QosTxop__PythonHelper::_wrap_NotifyNewAggregate(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper = dynamic_cast< PyNs3QosTxop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3QosTxop__PythonHelper::_wrap_NotifyAccessRequested(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper = dynamic_cast< PyNs3QosTxop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyAccessRequested of class Txop is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyAccessRequested__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3QosTxop__PythonHelper::EndTxNoAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EndTxNoAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::EndTxNoAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EndTxNoAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::GotAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::GotAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address recipient, double rxSnr, ns3::WifiMode txMode, double dataSnr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *py_CtrlBAckResponseHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotBlockAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::GotBlockAck(blockAck, recipient, rxSnr, txMode, dataSnr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) blockAck);
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_CtrlBAckResponseHeader = NULL;
    } else {
        py_CtrlBAckResponseHeader = (PyNs3CtrlBAckResponseHeader *) wrapper_lookup_iter->second;
        Py_INCREF(py_CtrlBAckResponseHeader);
    }
    
    if (py_CtrlBAckResponseHeader == NULL)
    {
        py_CtrlBAckResponseHeader = PyObject_GC_New(PyNs3CtrlBAckResponseHeader, &PyNs3CtrlBAckResponseHeader_Type);
        py_CtrlBAckResponseHeader->inst_dict = NULL;
        py_CtrlBAckResponseHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_CtrlBAckResponseHeader->obj = new ns3::CtrlBAckResponseHeader(*blockAck);
        PyNs3ObjectBase_wrapper_registry[(void *) py_CtrlBAckResponseHeader->obj] = (PyObject *) py_CtrlBAckResponseHeader;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(recipient);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(txMode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotBlockAck", (char *) "NNdNd", py_CtrlBAckResponseHeader, py_Mac48Address, rxSnr, py_WifiMode, dataSnr);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QosTxop__PythonHelper::IsQosTxop() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsQosTxop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::IsQosTxop();
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsQosTxop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::IsQosTxop();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::IsQosTxop();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QosTxop__PythonHelper::MissedAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::MissedAck();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::MissedBlockAck(uint8_t nMpdus)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedBlockAck"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::MissedBlockAck(nMpdus);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedBlockAck", (char *) "i", (int) nMpdus);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::MissedCts()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedCts"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::MissedCts();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedCts", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QosTxop__PythonHelper::NeedFragmentation() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedFragmentation"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::NeedFragmentation();
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedFragmentation", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::NeedFragmentation();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTxop::NeedFragmentation();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QosTxop__PythonHelper::NotifyAccessGranted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyAccessGranted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::NotifyAccessGranted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyAccessGranted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCollision"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::NotifyCollision();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyInternalCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyInternalCollision"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::NotifyInternalCollision();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyInternalCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::RestartAccessIfNeeded()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RestartAccessIfNeeded"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::RestartAccessIfNeeded();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RestartAccessIfNeeded", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::StartAccessIfNeeded()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartAccessIfNeeded"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::StartAccessIfNeeded();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartAccessIfNeeded", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::StartNextPacket()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartNextPacket"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::QosTxop::StartNextPacket();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartNextPacket", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = (ns3::QosTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3QosTxop__PythonHelper::GetFragmentOffset() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFragmentOffset"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFragmentOffset", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3QosTxop__PythonHelper::GetFragmentSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFragmentSize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFragmentSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3QosTxop__PythonHelper::GetNextFragmentSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNextFragmentSize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNextFragmentSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3QosTxop__PythonHelper::HasTxop() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HasTxop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HasTxop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3QosTxop__PythonHelper::IsLastFragment() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTxop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLastFragment"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = const_cast< ns3::QosTxop* >((const ns3::QosTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLastFragment", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QosTxop__PythonHelper::NotifyChannelSwitching()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyChannelSwitching"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyChannelSwitching();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyChannelSwitching", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QosTxop__PythonHelper::IsAccessRequested() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsAccessRequested"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = const_cast< ns3::Txop* >((const ns3::Txop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsAccessRequested", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Txop::IsAccessRequested();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QosTxop__PythonHelper::NotifyOff()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyOff();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOff", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::StartNextFragment()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartNextFragment"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::StartNextFragment();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartNextFragment", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyWakeUp()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyWakeUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyWakeUp();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyWakeUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifySleep()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySleep"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifySleep();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySleep", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::Queue(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Queue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::Queue(packet, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Queue", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyOn()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyOn"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyOn();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyOn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::Cancel()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Cancel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::Cancel();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Cancel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyAccessRequested()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Txop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyAccessRequested"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Txop::NotifyAccessRequested();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Txop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = (ns3::Txop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyAccessRequested", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Txop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3QosTxop__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QosTxop__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTxop__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3QosTxop__get_m_aMpduEnabled(PyNs3QosTxop *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::map< ns3::Mac48Address, bool > retval;
    Pystd__map__lt___ns3__Mac48Address__bool___gt__ *py_std__map__lt___ns3__Mac48Address__bool___gt__;
    
    py_std__map__lt___ns3__Mac48Address__bool___gt__ = PyObject_New(Pystd__map__lt___ns3__Mac48Address__bool___gt__, &Pystd__map__lt___ns3__Mac48Address__bool___gt___Type);
    py_std__map__lt___ns3__Mac48Address__bool___gt__->obj = new std::map< ns3::Mac48Address, bool >(self->obj->m_aMpduEnabled);
    py_retval = Py_BuildValue((char *) "N", py_std__map__lt___ns3__Mac48Address__bool___gt__);
    return py_retval;
}
static int _wrap_PyNs3QosTxop__set_m_aMpduEnabled(PyNs3QosTxop *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::map< ns3::Mac48Address, bool > retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__, &self->obj->m_aMpduEnabled)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3QosTxop__getsets[] = {
    {
        (char*) "m_aMpduEnabled", /* attribute name */
        (getter) _wrap_PyNs3QosTxop__get_m_aMpduEnabled, /* C function to get the attribute */
        (setter) _wrap_PyNs3QosTxop__set_m_aMpduEnabled, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3QosTxop__tp_init__0(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3QosTxop *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3QosTxop_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3QosTxop_Type)
    {
        self->obj = new PyNs3QosTxop__PythonHelper(*((PyNs3QosTxop *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3QosTxop__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QosTxop(*((PyNs3QosTxop *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3QosTxop__tp_init__1(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3QosTxop_Type)
    {
        self->obj = new PyNs3QosTxop__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3QosTxop__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QosTxop();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3QosTxop__tp_init(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3QosTxop__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QosTxop__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3QosTxop_BaTxFailed(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    self->obj->BaTxFailed(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_NotifyInternalCollision(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyInternalCollision()) : (self->obj->ns3::QosTxop::NotifyInternalCollision());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetMpduAggregator(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MpduAggregator > retval;
    PyNs3MpduAggregator *py_MpduAggregator;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMpduAggregator();
    if (!(const_cast<ns3::MpduAggregator *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MpduAggregator *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_MpduAggregator = NULL;
    } else {
        py_MpduAggregator = (PyNs3MpduAggregator *) wrapper_lookup_iter->second;
        Py_INCREF(py_MpduAggregator);
    }
    
    if (py_MpduAggregator == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MpduAggregator *> (ns3::PeekPointer (retval)))), &PyNs3MpduAggregator_Type);
        py_MpduAggregator = PyObject_GC_New(PyNs3MpduAggregator, wrapper_type);
        py_MpduAggregator->inst_dict = NULL;
    
        py_MpduAggregator->inst_dict = NULL;
        py_MpduAggregator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::MpduAggregator *> (ns3::PeekPointer (retval))->Ref();
        py_MpduAggregator->obj = const_cast<ns3::MpduAggregator *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_MpduAggregator->obj] = (PyObject *) py_MpduAggregator;
    }
    py_retval = Py_BuildValue((char *) "N", py_MpduAggregator);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_CompleteMpduTx(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyNs3Time *tstamp;
    const char *keywords[] = {"packet", "hdr", "tstamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3Time_Type, &tstamp)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->CompleteMpduTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj, *((PyNs3Time *) tstamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_MapSrcAddressForAggregation(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    PyNs3Mac48Address *py_Mac48Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    ns3::Mac48Address retval = self->obj->MapSrcAddressForAggregation(*((PyNs3WifiMacHeader *) hdr)->obj);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_MissedBlockAck(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nMpdus;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    const char *keywords[] = {"nMpdus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nMpdus)) {
        return NULL;
    }
    if (nMpdus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->MissedBlockAck(nMpdus)) : (self->obj->ns3::QosTxop::MissedBlockAck(nMpdus));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_StartNextPacket(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->StartNextPacket()) : (self->obj->ns3::QosTxop::StartNextPacket());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetBaAgreementExists(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    int tid;
    const char *keywords[] = {"address", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &address, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetBaAgreementExists(*((PyNs3Mac48Address *) address)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_StartAccessIfNeeded(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->StartAccessIfNeeded()) : (self->obj->ns3::QosTxop::StartAccessIfNeeded());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetAmpduExist(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    retval = self->obj->GetAmpduExist(*((PyNs3Mac48Address *) dest)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_PushFront(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PushFront(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SendDelbaFrame(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *addr;
    int tid;
    bool byOriginator;
    PyObject *py_byOriginator;
    const char *keywords[] = {"addr", "tid", "byOriginator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO", (char **) keywords, &PyNs3Mac48Address_Type, &addr, &tid, &py_byOriginator)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    byOriginator = (bool) PyObject_IsTrue(py_byOriginator);
    self->obj->SendDelbaFrame(*((PyNs3Mac48Address *) addr)->obj, tid, byOriginator);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetMsduAggregator(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MsduAggregator > retval;
    PyNs3MsduAggregator *py_MsduAggregator;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMsduAggregator();
    if (!(const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_MsduAggregator = NULL;
    } else {
        py_MsduAggregator = (PyNs3MsduAggregator *) wrapper_lookup_iter->second;
        Py_INCREF(py_MsduAggregator);
    }
    
    if (py_MsduAggregator == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))), &PyNs3MsduAggregator_Type);
        py_MsduAggregator = PyObject_GC_New(PyNs3MsduAggregator, wrapper_type);
        py_MsduAggregator->inst_dict = NULL;
    
        py_MsduAggregator->inst_dict = NULL;
        py_MsduAggregator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval))->Ref();
        py_MsduAggregator->obj = const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_MsduAggregator->obj] = (PyObject *) py_MsduAggregator;
    }
    py_retval = Py_BuildValue((char *) "N", py_MsduAggregator);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetTypeOfStation(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    ns3::TypeOfStation retval;
    
    retval = self->obj->GetTypeOfStation();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_EndTxNoAck(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->EndTxNoAck()) : (self->obj->ns3::QosTxop::EndTxNoAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SetBlockAckInactivityTimeout(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckInactivityTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GotBlockAck(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *recipient;
    double rxSnr;
    PyNs3WifiMode *txMode;
    double dataSnr;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAck", "recipient", "rxSnr", "txMode", "dataSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &recipient, &rxSnr, &PyNs3WifiMode_Type, &txMode, &dataSnr)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    (helper_class == NULL)? (self->obj->GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj, rxSnr, *((PyNs3WifiMode *) txMode)->obj, dataSnr)) : (self->obj->ns3::QosTxop::GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj, rxSnr, *((PyNs3WifiMode *) txMode)->obj, dataSnr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_CompleteAmpduTransfer(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CompleteAmpduTransfer(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SetBlockAckThreshold(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &threshold)) {
        return NULL;
    }
    if (threshold > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::QosTxop::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GotAddBaResponse(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"respHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    self->obj->GotAddBaResponse(respHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_MissedCts(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->MissedCts()) : (self->obj->ns3::QosTxop::MissedCts());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GotAck(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->GotAck()) : (self->obj->ns3::QosTxop::GotAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_RestartAccessIfNeeded(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->RestartAccessIfNeeded()) : (self->obj->ns3::QosTxop::RestartAccessIfNeeded());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_NeedBarRetransmission(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedBarRetransmission();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_MissedAck(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->MissedAck()) : (self->obj->ns3::QosTxop::MissedAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GotDelBaFrame(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtDelBaHeader *delBaHdr;
    ns3::MgtDelBaHeader *delBaHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"delBaHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtDelBaHeader_Type, &delBaHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    delBaHdr_ptr = (delBaHdr ? delBaHdr->obj : NULL);
    self->obj->GotDelBaFrame(delBaHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SetAccessCategory(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::AcIndex ac;
    const char *keywords[] = {"ac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ac)) {
        return NULL;
    }
    self->obj->SetAccessCategory(ac);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SetAmpduExist(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest;
    bool enableAmpdu;
    PyObject *py_enableAmpdu;
    const char *keywords[] = {"dest", "enableAmpdu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3Mac48Address_Type, &dest, &py_enableAmpdu)) {
        return NULL;
    }
    enableAmpdu = (bool) PyObject_IsTrue(py_enableAmpdu);
    self->obj->SetAmpduExist(*((PyNs3Mac48Address *) dest)->obj, enableAmpdu);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_NotifyAccessGranted(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyAccessGranted()) : (self->obj->ns3::QosTxop::NotifyAccessGranted());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_NeedFragmentation(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedFragmentation()) : (self->obj->ns3::QosTxop::NeedFragmentation());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_GetBlockAckThreshold(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBlockAckThreshold();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_MapDestAddressForAggregation(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    PyNs3Mac48Address *py_Mac48Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    ns3::Mac48Address retval = self->obj->MapDestAddressForAggregation(*((PyNs3WifiMacHeader *) hdr)->obj);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_NotifyCollision(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyCollision()) : (self->obj->ns3::QosTxop::NotifyCollision());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_BaTxOk(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    self->obj->BaTxOk(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_CompleteConfig(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    
    self->obj->CompleteConfig();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_IsQosTxop(PyNs3QosTxop *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3QosTxop__PythonHelper *helper_class = dynamic_cast<PyNs3QosTxop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsQosTxop()) : (self->obj->ns3::QosTxop::IsQosTxop());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_RemoveRetransmitPacket(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    PyNs3Mac48Address *recipient;
    int seqnumber;
    const char *keywords[] = {"tid", "recipient", "seqnumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!i", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &recipient, &seqnumber)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (seqnumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->RemoveRetransmitPacket(tid, *((PyNs3Mac48Address *) recipient)->obj, seqnumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTxop_SetTypeOfStation(PyNs3QosTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::TypeOfStation type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetTypeOfStation(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3QosTxop__copy__(PyNs3QosTxop *self)
{

    PyNs3QosTxop *py_copy;
    py_copy = PyObject_GC_New(PyNs3QosTxop, &PyNs3QosTxop_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::QosTxop(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3QosTxop_methods[] = {
    {(char *) "BaTxFailed", (PyCFunction) _wrap_PyNs3QosTxop_BaTxFailed, METH_KEYWORDS|METH_VARARGS, "BaTxFailed(hdr)\n\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "NotifyInternalCollision", (PyCFunction) _wrap_PyNs3QosTxop_NotifyInternalCollision, METH_NOARGS, "NotifyInternalCollision()\n\n" },
    {(char *) "GetMpduAggregator", (PyCFunction) _wrap_PyNs3QosTxop_GetMpduAggregator, METH_NOARGS, "GetMpduAggregator()\n\n" },
    {(char *) "CompleteMpduTx", (PyCFunction) _wrap_PyNs3QosTxop_CompleteMpduTx, METH_KEYWORDS|METH_VARARGS, "CompleteMpduTx(packet, hdr, tstamp)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader\ntype: tstamp: ns3::Time" },
    {(char *) "MapSrcAddressForAggregation", (PyCFunction) _wrap_PyNs3QosTxop_MapSrcAddressForAggregation, METH_KEYWORDS|METH_VARARGS, "MapSrcAddressForAggregation(hdr)\n\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "MissedBlockAck", (PyCFunction) _wrap_PyNs3QosTxop_MissedBlockAck, METH_KEYWORDS|METH_VARARGS, "MissedBlockAck(nMpdus)\n\ntype: nMpdus: uint8_t" },
    {(char *) "StartNextPacket", (PyCFunction) _wrap_PyNs3QosTxop_StartNextPacket, METH_NOARGS, "StartNextPacket()\n\n" },
    {(char *) "GetBaAgreementExists", (PyCFunction) _wrap_PyNs3QosTxop_GetBaAgreementExists, METH_KEYWORDS|METH_VARARGS, "GetBaAgreementExists(address, tid)\n\ntype: address: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "StartAccessIfNeeded", (PyCFunction) _wrap_PyNs3QosTxop_StartAccessIfNeeded, METH_NOARGS, "StartAccessIfNeeded()\n\n" },
    {(char *) "GetAmpduExist", (PyCFunction) _wrap_PyNs3QosTxop_GetAmpduExist, METH_KEYWORDS|METH_VARARGS, "GetAmpduExist(dest)\n\ntype: dest: ns3::Mac48Address" },
    {(char *) "PushFront", (PyCFunction) _wrap_PyNs3QosTxop_PushFront, METH_KEYWORDS|METH_VARARGS, "PushFront(packet, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "SendDelbaFrame", (PyCFunction) _wrap_PyNs3QosTxop_SendDelbaFrame, METH_KEYWORDS|METH_VARARGS, "SendDelbaFrame(addr, tid, byOriginator)\n\ntype: addr: ns3::Mac48Address\ntype: tid: uint8_t\ntype: byOriginator: bool" },
    {(char *) "GetMsduAggregator", (PyCFunction) _wrap_PyNs3QosTxop_GetMsduAggregator, METH_NOARGS, "GetMsduAggregator()\n\n" },
    {(char *) "GetTypeOfStation", (PyCFunction) _wrap_PyNs3QosTxop_GetTypeOfStation, METH_NOARGS, "GetTypeOfStation()\n\n" },
    {(char *) "EndTxNoAck", (PyCFunction) _wrap_PyNs3QosTxop_EndTxNoAck, METH_NOARGS, "EndTxNoAck()\n\n" },
    {(char *) "SetBlockAckInactivityTimeout", (PyCFunction) _wrap_PyNs3QosTxop_SetBlockAckInactivityTimeout, METH_KEYWORDS|METH_VARARGS, "SetBlockAckInactivityTimeout(timeout)\n\ntype: timeout: uint16_t" },
    {(char *) "GotBlockAck", (PyCFunction) _wrap_PyNs3QosTxop_GotBlockAck, METH_KEYWORDS|METH_VARARGS, "GotBlockAck(blockAck, recipient, rxSnr, txMode, dataSnr)\n\ntype: blockAck: ns3::CtrlBAckResponseHeader const *\ntype: recipient: ns3::Mac48Address\ntype: rxSnr: double\ntype: txMode: ns3::WifiMode\ntype: dataSnr: double" },
    {(char *) "CompleteAmpduTransfer", (PyCFunction) _wrap_PyNs3QosTxop_CompleteAmpduTransfer, METH_KEYWORDS|METH_VARARGS, "CompleteAmpduTransfer(recipient, tid)\n\ntype: recipient: ns3::Mac48Address\ntype: tid: uint8_t" },
    {(char *) "SetBlockAckThreshold", (PyCFunction) _wrap_PyNs3QosTxop_SetBlockAckThreshold, METH_KEYWORDS|METH_VARARGS, "SetBlockAckThreshold(threshold)\n\ntype: threshold: uint8_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3QosTxop_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GotAddBaResponse", (PyCFunction) _wrap_PyNs3QosTxop_GotAddBaResponse, METH_KEYWORDS|METH_VARARGS, "GotAddBaResponse(respHdr, recipient)\n\ntype: respHdr: ns3::MgtAddBaResponseHeader const *\ntype: recipient: ns3::Mac48Address" },
    {(char *) "MissedCts", (PyCFunction) _wrap_PyNs3QosTxop_MissedCts, METH_NOARGS, "MissedCts()\n\n" },
    {(char *) "GotAck", (PyCFunction) _wrap_PyNs3QosTxop_GotAck, METH_NOARGS, "GotAck()\n\n" },
    {(char *) "RestartAccessIfNeeded", (PyCFunction) _wrap_PyNs3QosTxop_RestartAccessIfNeeded, METH_NOARGS, "RestartAccessIfNeeded()\n\n" },
    {(char *) "NeedBarRetransmission", (PyCFunction) _wrap_PyNs3QosTxop_NeedBarRetransmission, METH_NOARGS, "NeedBarRetransmission()\n\n" },
    {(char *) "MissedAck", (PyCFunction) _wrap_PyNs3QosTxop_MissedAck, METH_NOARGS, "MissedAck()\n\n" },
    {(char *) "GotDelBaFrame", (PyCFunction) _wrap_PyNs3QosTxop_GotDelBaFrame, METH_KEYWORDS|METH_VARARGS, "GotDelBaFrame(delBaHdr, recipient)\n\ntype: delBaHdr: ns3::MgtDelBaHeader const *\ntype: recipient: ns3::Mac48Address" },
    {(char *) "SetAccessCategory", (PyCFunction) _wrap_PyNs3QosTxop_SetAccessCategory, METH_KEYWORDS|METH_VARARGS, "SetAccessCategory(ac)\n\ntype: ac: ns3::AcIndex" },
    {(char *) "SetAmpduExist", (PyCFunction) _wrap_PyNs3QosTxop_SetAmpduExist, METH_KEYWORDS|METH_VARARGS, "SetAmpduExist(dest, enableAmpdu)\n\ntype: dest: ns3::Mac48Address\ntype: enableAmpdu: bool" },
    {(char *) "NotifyAccessGranted", (PyCFunction) _wrap_PyNs3QosTxop_NotifyAccessGranted, METH_NOARGS, "NotifyAccessGranted()\n\n" },
    {(char *) "NeedFragmentation", (PyCFunction) _wrap_PyNs3QosTxop_NeedFragmentation, METH_NOARGS, "NeedFragmentation()\n\n" },
    {(char *) "GetBlockAckThreshold", (PyCFunction) _wrap_PyNs3QosTxop_GetBlockAckThreshold, METH_NOARGS, "GetBlockAckThreshold()\n\n" },
    {(char *) "MapDestAddressForAggregation", (PyCFunction) _wrap_PyNs3QosTxop_MapDestAddressForAggregation, METH_KEYWORDS|METH_VARARGS, "MapDestAddressForAggregation(hdr)\n\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "NotifyCollision", (PyCFunction) _wrap_PyNs3QosTxop_NotifyCollision, METH_NOARGS, "NotifyCollision()\n\n" },
    {(char *) "BaTxOk", (PyCFunction) _wrap_PyNs3QosTxop_BaTxOk, METH_KEYWORDS|METH_VARARGS, "BaTxOk(hdr)\n\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "CompleteConfig", (PyCFunction) _wrap_PyNs3QosTxop_CompleteConfig, METH_NOARGS, "CompleteConfig()\n\n" },
    {(char *) "IsQosTxop", (PyCFunction) _wrap_PyNs3QosTxop_IsQosTxop, METH_NOARGS, "IsQosTxop()\n\n" },
    {(char *) "RemoveRetransmitPacket", (PyCFunction) _wrap_PyNs3QosTxop_RemoveRetransmitPacket, METH_KEYWORDS|METH_VARARGS, "RemoveRetransmitPacket(tid, recipient, seqnumber)\n\ntype: tid: uint8_t\ntype: recipient: ns3::Mac48Address\ntype: seqnumber: uint16_t" },
    {(char *) "SetTypeOfStation", (PyCFunction) _wrap_PyNs3QosTxop_SetTypeOfStation, METH_KEYWORDS|METH_VARARGS, "SetTypeOfStation(type)\n\ntype: type: ns3::TypeOfStation" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3QosTxop__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3QosTxop__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "NotifyAccessRequested", (PyCFunction) PyNs3QosTxop__PythonHelper::_wrap_NotifyAccessRequested, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3QosTxop__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3QosTxop__tp_clear(PyNs3QosTxop *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::QosTxop *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3QosTxop__tp_traverse(PyNs3QosTxop *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3QosTxop__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3QosTxop__tp_dealloc(PyNs3QosTxop *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3QosTxop__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QosTxop__tp_richcompare (PyNs3QosTxop *PYBINDGEN_UNUSED(self), PyNs3QosTxop *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QosTxop_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QosTxop_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.QosTxop",            /* tp_name */
    sizeof(PyNs3QosTxop),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QosTxop__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "QosTxop(arg0)\nQosTxop()",                        /* Documentation string */
    (traverseproc)PyNs3QosTxop__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3QosTxop__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QosTxop__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QosTxop_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3QosTxop__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3QosTxop, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QosTxop__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DropAfterDequeue(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DropAfterDequeue of class Queue is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DropAfterDequeue__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DropBeforeEnqueue(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DropBeforeEnqueue of class Queue is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DropBeforeEnqueue__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DoDispose(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DoInitialize(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper *helper = dynamic_cast< PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::Enqueue(ns3::Ptr< ns3::WifiMacQueueItem > item)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Queue< ns3::WifiMacQueueItem > *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = (ns3::Queue< ns3::WifiMacQueueItem >*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "N", py_WifiMacQueueItem);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem >
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::Dequeue()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Queue< ns3::WifiMacQueueItem > *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Dequeue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = (ns3::Queue< ns3::WifiMacQueueItem >*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Dequeue", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem >
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::Remove()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Queue< ns3::WifiMacQueueItem > *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Remove"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = (ns3::Queue< ns3::WifiMacQueueItem >*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Remove", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem const >
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::Peek() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Queue< ns3::WifiMacQueueItem > *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem const > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Peek"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = const_cast< ns3::Queue< ns3::WifiMacQueueItem >* >((const ns3::Queue< ns3::WifiMacQueueItem >*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Peek", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Queue__Ns3WifiMacQueueItem* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init__0(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Queue__Ns3WifiMacQueueItem_Type)
    {
        self->obj = new PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Queue' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init__1(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Queue__Ns3WifiMacQueueItem *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Queue__Ns3WifiMacQueueItem_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Queue__Ns3WifiMacQueueItem_Type)
    {
        self->obj = new PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper(*((PyNs3Queue__Ns3WifiMacQueueItem *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Queue' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_Peek(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem const > retval;
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Peek();
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_Dequeue(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Dequeue();
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Queue< ns3::WifiMacQueueItem >::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_Remove(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Remove();
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_Enqueue(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    retval = self->obj->Enqueue(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Queue__Ns3WifiMacQueueItem_Flush(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    PyObject *py_retval;
    
    self->obj->Flush();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3Queue__Ns3WifiMacQueueItem_methods[] = {
    {(char *) "Peek", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_Peek, METH_NOARGS, "Peek()\n\n" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_Dequeue, METH_NOARGS, "Dequeue()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Remove", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_Remove, METH_NOARGS, "Remove()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(item)\n\ntype: item: ns3::Ptr< ns3::WifiMacQueueItem >" },
    {(char *) "Flush", (PyCFunction) _wrap_PyNs3Queue__Ns3WifiMacQueueItem_Flush, METH_NOARGS, "Flush()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DropAfterDequeue", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DropAfterDequeue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DropBeforeEnqueue", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DropBeforeEnqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Queue__Ns3WifiMacQueueItem__tp_clear(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::Queue< ns3::WifiMacQueueItem > *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Queue__Ns3WifiMacQueueItem__tp_traverse(PyNs3Queue__Ns3WifiMacQueueItem *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_dealloc(PyNs3Queue__Ns3WifiMacQueueItem *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Queue__Ns3WifiMacQueueItem__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_richcompare (PyNs3Queue__Ns3WifiMacQueueItem *PYBINDGEN_UNUSED(self), PyNs3Queue__Ns3WifiMacQueueItem *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Queue__Ns3WifiMacQueueItem_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Queue__Ns3WifiMacQueueItem_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Queue__Ns3WifiMacQueueItem",            /* tp_name */
    sizeof(PyNs3Queue__Ns3WifiMacQueueItem),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Queue__Ns3WifiMacQueueItem(arg0)\nQueue__Ns3WifiMacQueueItem()",                        /* Documentation string */
    (traverseproc)PyNs3Queue__Ns3WifiMacQueueItem__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Queue__Ns3WifiMacQueueItem__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Queue__Ns3WifiMacQueueItem_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Queue__Ns3WifiMacQueueItem, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Queue__Ns3WifiMacQueueItem__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetVIQueue(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::QosTxop > retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    PyNs3QosTxop *py_QosTxop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetVIQueue of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetVIQueue__parent_caller();
    if (!(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3QosTxop__PythonHelper).name())
    {
        py_QosTxop = reinterpret_cast< PyNs3QosTxop* >(reinterpret_cast< PyNs3QosTxop__PythonHelper* >(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))->m_pyself);
        py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
        Py_INCREF(py_QosTxop);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_QosTxop = NULL;
        } else {
            py_QosTxop = (PyNs3QosTxop *) wrapper_lookup_iter->second;
            Py_INCREF(py_QosTxop);
        }
    
        if (py_QosTxop == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))), &PyNs3QosTxop_Type);
            py_QosTxop = PyObject_GC_New(PyNs3QosTxop, wrapper_type);
            py_QosTxop->inst_dict = NULL;
    
            py_QosTxop->inst_dict = NULL;
            py_QosTxop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval))->Ref();
            py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_QosTxop->obj] = (PyObject *) py_QosTxop;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_QosTxop);
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetVhtSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetVhtSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetVhtSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetTypeOfStation(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::TypeOfStation type;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetTypeOfStation of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetTypeOfStation__parent_caller(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_ForwardUp(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *from;
    PyNs3Mac48Address *to;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "from", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &from, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method ForwardUp of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->ForwardUp__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) from)->obj, *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetDsssSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetDsssSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetDsssSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SendAddBaResponse(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader *reqHdr;
    ns3::MgtAddBaRequestHeader *reqHdr_ptr;
    PyNs3Mac48Address *originator;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"reqHdr", "originator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &reqHdr, &PyNs3Mac48Address_Type, &originator)) {
        return NULL;
    }
    reqHdr_ptr = (reqHdr ? reqHdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SendAddBaResponse of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SendAddBaResponse__parent_caller(reqHdr_ptr, *((PyNs3Mac48Address *) originator)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetErpSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetErpSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetErpSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetHeSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetHeSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetHeSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetVhtSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetVhtSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetVhtSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetQosSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetQosSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetQosSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetBEQueue(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::QosTxop > retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    PyNs3QosTxop *py_QosTxop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetBEQueue of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetBEQueue__parent_caller();
    if (!(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3QosTxop__PythonHelper).name())
    {
        py_QosTxop = reinterpret_cast< PyNs3QosTxop* >(reinterpret_cast< PyNs3QosTxop__PythonHelper* >(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))->m_pyself);
        py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
        Py_INCREF(py_QosTxop);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_QosTxop = NULL;
        } else {
            py_QosTxop = (PyNs3QosTxop *) wrapper_lookup_iter->second;
            Py_INCREF(py_QosTxop);
        }
    
        if (py_QosTxop == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))), &PyNs3QosTxop_Type);
            py_QosTxop = PyObject_GC_New(PyNs3QosTxop, wrapper_type);
            py_QosTxop->inst_dict = NULL;
    
            py_QosTxop->inst_dict = NULL;
            py_QosTxop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval))->Ref();
            py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_QosTxop->obj] = (PyObject *) py_QosTxop;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_QosTxop);
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_FinishConfigureStandard(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FinishConfigureStandard of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FinishConfigureStandard__parent_caller(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_Receive(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_DoDispose(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetQosSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetQosSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetQosSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetHtSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetHtSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetHtSupported__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetVOQueue(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::QosTxop > retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    PyNs3QosTxop *py_QosTxop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetVOQueue of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetVOQueue__parent_caller();
    if (!(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3QosTxop__PythonHelper).name())
    {
        py_QosTxop = reinterpret_cast< PyNs3QosTxop* >(reinterpret_cast< PyNs3QosTxop__PythonHelper* >(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))->m_pyself);
        py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
        Py_INCREF(py_QosTxop);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_QosTxop = NULL;
        } else {
            py_QosTxop = (PyNs3QosTxop *) wrapper_lookup_iter->second;
            Py_INCREF(py_QosTxop);
        }
    
        if (py_QosTxop == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))), &PyNs3QosTxop_Type);
            py_QosTxop = PyObject_GC_New(PyNs3QosTxop, wrapper_type);
            py_QosTxop->inst_dict = NULL;
    
            py_QosTxop->inst_dict = NULL;
            py_QosTxop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval))->Ref();
            py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_QosTxop->obj] = (PyObject *) py_QosTxop;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_QosTxop);
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetDsssSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetDsssSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetDsssSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetHtSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetHtSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetHtSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_ConfigureContentionWindow(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cwMin;
    unsigned int cwMax;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"cwMin", "cwMax", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "II", (char **) keywords, &cwMin, &cwMax)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method ConfigureContentionWindow of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->ConfigureContentionWindow__parent_caller(cwMin, cwMax);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_TxOk(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxOk of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxOk__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_DoInitialize(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetTxop(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Txop > retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    PyNs3Txop *py_Txop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetTxop of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetTxop__parent_caller();
    if (!(const_cast<ns3::Txop *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Txop *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Txop__PythonHelper).name())
    {
        py_Txop = reinterpret_cast< PyNs3Txop* >(reinterpret_cast< PyNs3Txop__PythonHelper* >(const_cast<ns3::Txop *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Txop->obj = const_cast<ns3::Txop *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Txop);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Txop *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Txop = NULL;
        } else {
            py_Txop = (PyNs3Txop *) wrapper_lookup_iter->second;
            Py_INCREF(py_Txop);
        }
    
        if (py_Txop == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Txop *> (ns3::PeekPointer (retval)))), &PyNs3Txop_Type);
            py_Txop = PyObject_GC_New(PyNs3Txop, wrapper_type);
            py_Txop->inst_dict = NULL;
    
            py_Txop->inst_dict = NULL;
            py_Txop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Txop *> (ns3::PeekPointer (retval))->Ref();
            py_Txop->obj = const_cast<ns3::Txop *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Txop->obj] = (PyObject *) py_Txop;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Txop);
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetErpSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetErpSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetErpSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_TxFailed(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxFailed of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxFailed__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"aggregatedPacket", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DeaggregateAmsduAndForward of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_GetBKQueue(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::QosTxop > retval;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    PyNs3QosTxop *py_QosTxop;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetBKQueue of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetBKQueue__parent_caller();
    if (!(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3QosTxop__PythonHelper).name())
    {
        py_QosTxop = reinterpret_cast< PyNs3QosTxop* >(reinterpret_cast< PyNs3QosTxop__PythonHelper* >(const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))->m_pyself);
        py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
        Py_INCREF(py_QosTxop);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_QosTxop = NULL;
        } else {
            py_QosTxop = (PyNs3QosTxop *) wrapper_lookup_iter->second;
            Py_INCREF(py_QosTxop);
        }
    
        if (py_QosTxop == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval)))), &PyNs3QosTxop_Type);
            py_QosTxop = PyObject_GC_New(PyNs3QosTxop, wrapper_type);
            py_QosTxop->inst_dict = NULL;
    
            py_QosTxop->inst_dict = NULL;
            py_QosTxop->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval))->Ref();
            py_QosTxop->obj = const_cast<ns3::QosTxop *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_QosTxop->obj] = (PyObject *) py_QosTxop;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_QosTxop);
    return py_retval;
}

PyObject *
PyNs3RegularWifiMac__PythonHelper::_wrap_SetHeSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper = dynamic_cast< PyNs3RegularWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetHeSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetHeSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3RegularWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3RegularWifiMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3RegularWifiMac__PythonHelper::GetRifsSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifsSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifsSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3RegularWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3RegularWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3RegularWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3RegularWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3RegularWifiMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3RegularWifiMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




void
PyNs3RegularWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3RegularWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Receive(packet, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxOk(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxFailed(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetQosSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetQosSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetQosSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetQosSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    if (typeid(*(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = (PyNs3WifiPhy*) (((PyNs3WifiPhy__PythonHelper*) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3RegularWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3RegularWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3RegularWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3RegularWifiMac__tp_init(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3RegularWifiMac_Type)
    {
        self->obj = new PyNs3RegularWifiMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3RegularWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'RegularWifiMac' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetBasicBlockAckTimeout(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetBasicBlockAckTimeout()) : (self->obj->ns3::RegularWifiMac::GetBasicBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetForwardUpCallback(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl3> upCallback_cb_impl;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl3> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::RegularWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RegularWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetBssid(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *bssid;
    const char *keywords[] = {"bssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &bssid)) {
        return NULL;
    }
    self->obj->SetBssid(*((PyNs3Mac48Address *) bssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetBssid(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::RegularWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SupportsSendFrom(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::RegularWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetPifs(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *pifs;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &pifs)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(*((PyNs3Time *) pifs)->obj)) : (self->obj->ns3::RegularWifiMac::SetPifs(*((PyNs3Time *) pifs)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetEifsNoDifs(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::RegularWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetCtsToSelfSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetCtsToSelfSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetShortSlotTimeSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetShortSlotTimeSupported()) : (self->obj->ns3::RegularWifiMac::GetShortSlotTimeSupported());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetPromisc(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->SetPromisc()) : (self->obj->ns3::RegularWifiMac::SetPromisc());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetShortSlotTimeSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    (helper_class == NULL)? (self->obj->SetShortSlotTimeSupported(enable)) : (self->obj->ns3::RegularWifiMac::SetShortSlotTimeSupported(enable));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetHeCapabilities(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3HeCapabilities *py_HeCapabilities;
    
    ns3::HeCapabilities retval = self->obj->GetHeCapabilities();
    py_HeCapabilities = PyObject_New(PyNs3HeCapabilities, &PyNs3HeCapabilities_Type);
    
    py_HeCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HeCapabilities->obj = new ns3::HeCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HeCapabilities->obj] = (PyObject *) py_HeCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HeCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetSlot(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *slotTime;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &slotTime)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(*((PyNs3Time *) slotTime)->obj)) : (self->obj->ns3::RegularWifiMac::SetSlot(*((PyNs3Time *) slotTime)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetRifsSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetRifsSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetSsid(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::RegularWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetPifs(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::RegularWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetRifs(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetRifs()) : (self->obj->ns3::RegularWifiMac::GetRifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}



PyObject *
_wrap_PyNs3RegularWifiMac_Enqueue__0(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::RegularWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3RegularWifiMac_Enqueue__1(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3RegularWifiMac_Enqueue(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RegularWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RegularWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetCompressedBlockAckTimeout(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCompressedBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj)) : (self->obj->ns3::RegularWifiMac::SetCompressedBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetWifiPhy(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetWifiPhy()) : (self->obj->ns3::RegularWifiMac::GetWifiPhy());
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = reinterpret_cast< PyNs3WifiPhy* >(reinterpret_cast< PyNs3WifiPhy__PythonHelper* >(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->inst_dict = NULL;
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetBasicBlockAckTimeout(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *blockAckTimeout;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &blockAckTimeout)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetBasicBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj)) : (self->obj->ns3::RegularWifiMac::SetBasicBlockAckTimeout(*((PyNs3Time *) blockAckTimeout)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetCtsTimeout(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ctsTimeout;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ctsTimeout)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(*((PyNs3Time *) ctsTimeout)->obj)) : (self->obj->ns3::RegularWifiMac::SetCtsTimeout(*((PyNs3Time *) ctsTimeout)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetHtCapabilities(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3HtCapabilities *py_HtCapabilities;
    
    ns3::HtCapabilities retval = self->obj->GetHtCapabilities();
    py_HtCapabilities = PyObject_New(PyNs3HtCapabilities, &PyNs3HtCapabilities_Type);
    
    py_HtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtCapabilities->obj = new ns3::HtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_HtCapabilities->obj] = (PyObject *) py_HtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_HtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetCtsTimeout(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::RegularWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetVhtCapabilities(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3VhtCapabilities *py_VhtCapabilities;
    
    ns3::VhtCapabilities retval = self->obj->GetVhtCapabilities();
    py_VhtCapabilities = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_VhtCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VhtCapabilities->obj = new ns3::VhtCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_VhtCapabilities->obj] = (PyObject *) py_VhtCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_VhtCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetAddress(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::RegularWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetRifsSupported(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetRifsSupported()) : (self->obj->ns3::RegularWifiMac::GetRifsSupported());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetSlot(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::RegularWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetExtendedCapabilities(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3ExtendedCapabilities *py_ExtendedCapabilities;
    
    ns3::ExtendedCapabilities retval = self->obj->GetExtendedCapabilities();
    py_ExtendedCapabilities = PyObject_New(PyNs3ExtendedCapabilities, &PyNs3ExtendedCapabilities_Type);
    
    py_ExtendedCapabilities->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedCapabilities->obj = new ns3::ExtendedCapabilities(retval);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedCapabilities->obj] = (PyObject *) py_ExtendedCapabilities;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedCapabilities);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetLinkDownCallback(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl4> linkDown_cb_impl;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl4> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::RegularWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetSifs(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *sifs;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &sifs)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(*((PyNs3Time *) sifs)->obj)) : (self->obj->ns3::RegularWifiMac::SetSifs(*((PyNs3Time *) sifs)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetAddress(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::RegularWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetCompressedBlockAckTimeout(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCompressedBlockAckTimeout()) : (self->obj->ns3::RegularWifiMac::GetCompressedBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_ResetWifiPhy(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->ResetWifiPhy()) : (self->obj->ns3::RegularWifiMac::ResetWifiPhy());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetRifs(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rifs;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"rifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rifs)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetRifs(*((PyNs3Time *) rifs)->obj)) : (self->obj->ns3::RegularWifiMac::SetRifs(*((PyNs3Time *) rifs)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetAckTimeout(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ackTimeout;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ackTimeout)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(*((PyNs3Time *) ackTimeout)->obj)) : (self->obj->ns3::RegularWifiMac::SetAckTimeout(*((PyNs3Time *) ackTimeout)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetSsid(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::RegularWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetEifsNoDifs(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *eifsNoDifs;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &eifsNoDifs)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(*((PyNs3Time *) eifsNoDifs)->obj)) : (self->obj->ns3::RegularWifiMac::SetEifsNoDifs(*((PyNs3Time *) eifsNoDifs)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetAckTimeout(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::RegularWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetSifs(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::RegularWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_SetLinkUpCallback(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl4> linkUp_cb_impl;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl4> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::RegularWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RegularWifiMac_GetWifiRemoteStationManager(PyNs3RegularWifiMac *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3RegularWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3RegularWifiMac__PythonHelper*> (self->obj);
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetWifiRemoteStationManager()) : (self->obj->ns3::RegularWifiMac::GetWifiRemoteStationManager());
    if (!(const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationManager);
    return py_retval;
}

static PyMethodDef PyNs3RegularWifiMac_methods[] = {
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetBasicBlockAckTimeout, METH_NOARGS, "GetBasicBlockAckTimeout()\n\n" },
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, "SetForwardUpCallback(upCallback)\n\ntype: upCallback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetBssid", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetBssid, METH_KEYWORDS|METH_VARARGS, "SetBssid(bssid)\n\ntype: bssid: ns3::Mac48Address" },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetBssid, METH_NOARGS, "GetBssid()\n\n" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3RegularWifiMac_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, "SetPifs(pifs)\n\ntype: pifs: ns3::Time" },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetEifsNoDifs, METH_NOARGS, "GetEifsNoDifs()\n\n" },
    {(char *) "SetCtsToSelfSupported", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetCtsToSelfSupported, METH_KEYWORDS|METH_VARARGS, "SetCtsToSelfSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetShortSlotTimeSupported", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetShortSlotTimeSupported, METH_NOARGS, "GetShortSlotTimeSupported()\n\n" },
    {(char *) "SetPromisc", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetPromisc, METH_NOARGS, "SetPromisc()\n\n" },
    {(char *) "SetShortSlotTimeSupported", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetShortSlotTimeSupported, METH_KEYWORDS|METH_VARARGS, "SetShortSlotTimeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetHeCapabilities", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetHeCapabilities, METH_NOARGS, "GetHeCapabilities()\n\n" },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, "SetSlot(slotTime)\n\ntype: slotTime: ns3::Time" },
    {(char *) "SetRifsSupported", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetRifsSupported, METH_KEYWORDS|METH_VARARGS, "SetRifsSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, "SetSsid(ssid)\n\ntype: ssid: ns3::Ssid" },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetPifs, METH_NOARGS, "GetPifs()\n\n" },
    {(char *) "GetRifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetRifs, METH_NOARGS, "GetRifs()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3RegularWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetCompressedBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "GetWifiPhy", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetWifiPhy, METH_NOARGS, "GetWifiPhy()\n\n" },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetBasicBlockAckTimeout(blockAckTimeout)\n\ntype: blockAckTimeout: ns3::Time" },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, "SetCtsTimeout(ctsTimeout)\n\ntype: ctsTimeout: ns3::Time" },
    {(char *) "GetHtCapabilities", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetHtCapabilities, METH_NOARGS, "GetHtCapabilities()\n\n" },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetCtsTimeout, METH_NOARGS, "GetCtsTimeout()\n\n" },
    {(char *) "GetVhtCapabilities", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetVhtCapabilities, METH_NOARGS, "GetVhtCapabilities()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "GetRifsSupported", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetRifsSupported, METH_NOARGS, "GetRifsSupported()\n\n" },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetSlot, METH_NOARGS, "GetSlot()\n\n" },
    {(char *) "GetExtendedCapabilities", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetExtendedCapabilities, METH_NOARGS, "GetExtendedCapabilities()\n\n" },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkDownCallback(linkDown)\n\ntype: linkDown: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, "SetSifs(sifs)\n\ntype: sifs: ns3::Time" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, "GetCompressedBlockAckTimeout()\n\n" },
    {(char *) "ResetWifiPhy", (PyCFunction) _wrap_PyNs3RegularWifiMac_ResetWifiPhy, METH_NOARGS, "ResetWifiPhy()\n\n" },
    {(char *) "SetRifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetRifs, METH_KEYWORDS|METH_VARARGS, "SetRifs(rifs)\n\ntype: rifs: ns3::Time" },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, "SetAckTimeout(ackTimeout)\n\ntype: ackTimeout: ns3::Time" },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetSsid, METH_NOARGS, "GetSsid()\n\n" },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, "SetEifsNoDifs(eifsNoDifs)\n\ntype: eifsNoDifs: ns3::Time" },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetAckTimeout, METH_NOARGS, "GetAckTimeout()\n\n" },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetSifs, METH_NOARGS, "GetSifs()\n\n" },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3RegularWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkUpCallback(linkUp)\n\ntype: linkUp: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3RegularWifiMac_GetWifiRemoteStationManager, METH_NOARGS, "GetWifiRemoteStationManager()\n\n" },
    {(char *) "GetVIQueue", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetVIQueue, METH_NOARGS, NULL },
    {(char *) "SetVhtSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTypeOfStation", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetTypeOfStation, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ForwardUp", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_ForwardUp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDsssSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetDsssSupported, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "SendAddBaResponse", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SendAddBaResponse, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetErpSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetErpSupported, METH_NOARGS, NULL },
    {(char *) "GetHeSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetHeSupported, METH_NOARGS, NULL },
    {(char *) "GetVhtSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetVhtSupported, METH_NOARGS, NULL },
    {(char *) "GetQosSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetQosSupported, METH_NOARGS, NULL },
    {(char *) "GetBEQueue", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetBEQueue, METH_NOARGS, NULL },
    {(char *) "FinishConfigureStandard", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "SetQosSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetQosSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetHtSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetHtSupported, METH_NOARGS, NULL },
    {(char *) "GetVOQueue", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetVOQueue, METH_NOARGS, NULL },
    {(char *) "SetDsssSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetDsssSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetHtSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetHtSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ConfigureContentionWindow", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_ConfigureContentionWindow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TxOk", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_TxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "GetTxop", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetTxop, METH_NOARGS, NULL },
    {(char *) "SetErpSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetErpSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TxFailed", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_TxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeaggregateAmsduAndForward", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBKQueue", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_GetBKQueue, METH_NOARGS, NULL },
    {(char *) "SetHeSupported", (PyCFunction) PyNs3RegularWifiMac__PythonHelper::_wrap_SetHeSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RegularWifiMac__tp_clear(PyNs3RegularWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::RegularWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3RegularWifiMac__tp_traverse(PyNs3RegularWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3RegularWifiMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3RegularWifiMac__tp_dealloc(PyNs3RegularWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RegularWifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RegularWifiMac__tp_richcompare (PyNs3RegularWifiMac *PYBINDGEN_UNUSED(self), PyNs3RegularWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RegularWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RegularWifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.RegularWifiMac",            /* tp_name */
    sizeof(PyNs3RegularWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RegularWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "RegularWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3RegularWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RegularWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RegularWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RegularWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RegularWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RegularWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3RraaWifiManager__tp_init__0(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RraaWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RraaWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RraaWifiManager(*((PyNs3RraaWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3RraaWifiManager__tp_init__1(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RraaWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3RraaWifiManager__tp_init(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RraaWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RraaWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3RraaWifiManager_SetHtSupported(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RraaWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RraaWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RraaWifiManager_SetVhtSupported(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RraaWifiManager_SetHeSupported(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3RraaWifiManager__copy__(PyNs3RraaWifiManager *self)
{

    PyNs3RraaWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3RraaWifiManager, &PyNs3RraaWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::RraaWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RraaWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3RraaWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RraaWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3RraaWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3RraaWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RraaWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RraaWifiManager__tp_clear(PyNs3RraaWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::RraaWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3RraaWifiManager__tp_traverse(PyNs3RraaWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3RraaWifiManager__tp_dealloc(PyNs3RraaWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RraaWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RraaWifiManager__tp_richcompare (PyNs3RraaWifiManager *PYBINDGEN_UNUSED(self), PyNs3RraaWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RraaWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RraaWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.RraaWifiManager",            /* tp_name */
    sizeof(PyNs3RraaWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RraaWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "RraaWifiManager(arg0)\nRraaWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3RraaWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RraaWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RraaWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RraaWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RraaWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RraaWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3RrpaaWifiManager__tp_init__0(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RrpaaWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RrpaaWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RrpaaWifiManager(*((PyNs3RrpaaWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3RrpaaWifiManager__tp_init__1(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RrpaaWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3RrpaaWifiManager__tp_init(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RrpaaWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RrpaaWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3RrpaaWifiManager_SetHtSupported(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RrpaaWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RrpaaWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RrpaaWifiManager_SetHeSupported(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetHeSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RrpaaWifiManager_SetVhtSupported(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetVhtSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RrpaaWifiManager_AssignStreams(PyNs3RrpaaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3RrpaaWifiManager__copy__(PyNs3RrpaaWifiManager *self)
{

    PyNs3RrpaaWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3RrpaaWifiManager, &PyNs3RrpaaWifiManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::RrpaaWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RrpaaWifiManager_methods[] = {
    {(char *) "SetHtSupported", (PyCFunction) _wrap_PyNs3RrpaaWifiManager_SetHtSupported, METH_KEYWORDS|METH_VARARGS, "SetHtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RrpaaWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetHeSupported", (PyCFunction) _wrap_PyNs3RrpaaWifiManager_SetHeSupported, METH_KEYWORDS|METH_VARARGS, "SetHeSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3RrpaaWifiManager_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(enable)\n\ntype: enable: bool" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3RrpaaWifiManager_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RrpaaWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RrpaaWifiManager__tp_clear(PyNs3RrpaaWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::RrpaaWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3RrpaaWifiManager__tp_traverse(PyNs3RrpaaWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3RrpaaWifiManager__tp_dealloc(PyNs3RrpaaWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RrpaaWifiManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RrpaaWifiManager__tp_richcompare (PyNs3RrpaaWifiManager *PYBINDGEN_UNUSED(self), PyNs3RrpaaWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RrpaaWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RrpaaWifiManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.RrpaaWifiManager",            /* tp_name */
    sizeof(PyNs3RrpaaWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RrpaaWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "RrpaaWifiManager(arg0)\nRrpaaWifiManager()",                        /* Documentation string */
    (traverseproc)PyNs3RrpaaWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RrpaaWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RrpaaWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RrpaaWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RrpaaWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RrpaaWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3SimpleFrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3SimpleFrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3SimpleFrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_DoInitialize(PyNs3SimpleFrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3SimpleFrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3SimpleFrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3SimpleFrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3SimpleFrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3SimpleFrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_DoDispose(PyNs3SimpleFrameCaptureModel *self)
{
    PyObject *py_retval;
    PyNs3SimpleFrameCaptureModel__PythonHelper *helper = dynamic_cast< PyNs3SimpleFrameCaptureModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3SimpleFrameCaptureModel__PythonHelper::CaptureNewFrame(ns3::Ptr< ns3::Event > currentEvent, ns3::Ptr< ns3::Event > newEvent) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SimpleFrameCaptureModel *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Event *py_Event;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Event *py_Event2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CaptureNewFrame"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleFrameCaptureModel::CaptureNewFrame(currentEvent, newEvent);
    }
    self_obj_before = reinterpret_cast< PyNs3SimpleFrameCaptureModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SimpleFrameCaptureModel* >(m_pyself)->obj = const_cast< ns3::SimpleFrameCaptureModel* >((const ns3::SimpleFrameCaptureModel*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Event = NULL;
    } else {
        py_Event = (PyNs3Event *) wrapper_lookup_iter->second;
        Py_INCREF(py_Event);
    }
    
    if (py_Event == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent))), &PyNs3Event_Type);
        py_Event = PyObject_New(PyNs3Event, wrapper_type);
    
        py_Event->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent))->Ref();
        py_Event->obj = const_cast<ns3::Event *> (ns3::PeekPointer (currentEvent));
        PyNs3Empty_wrapper_registry[(void *) py_Event->obj] = (PyObject *) py_Event;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Event *> (ns3::PeekPointer (newEvent)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Event2 = NULL;
    } else {
        py_Event2 = (PyNs3Event *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Event2);
    }
    
    if (py_Event2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Event *> (ns3::PeekPointer (newEvent))), &PyNs3Event_Type);
        py_Event2 = PyObject_New(PyNs3Event, wrapper_type2);
    
        py_Event2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Event *> (ns3::PeekPointer (newEvent))->Ref();
        py_Event2->obj = const_cast<ns3::Event *> (ns3::PeekPointer (newEvent));
        PyNs3Empty_wrapper_registry[(void *) py_Event2->obj] = (PyObject *) py_Event2;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CaptureNewFrame", (char *) "NN", py_Event, py_Event2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SimpleFrameCaptureModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleFrameCaptureModel::CaptureNewFrame(currentEvent, newEvent);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SimpleFrameCaptureModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleFrameCaptureModel::CaptureNewFrame(currentEvent, newEvent);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SimpleFrameCaptureModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3SimpleFrameCaptureModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SimpleFrameCaptureModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleFrameCaptureModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleFrameCaptureModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleFrameCaptureModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SimpleFrameCaptureModel__tp_init__0(PyNs3SimpleFrameCaptureModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleFrameCaptureModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleFrameCaptureModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SimpleFrameCaptureModel_Type)
    {
        self->obj = new PyNs3SimpleFrameCaptureModel__PythonHelper(*((PyNs3SimpleFrameCaptureModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SimpleFrameCaptureModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SimpleFrameCaptureModel(*((PyNs3SimpleFrameCaptureModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SimpleFrameCaptureModel__tp_init__1(PyNs3SimpleFrameCaptureModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SimpleFrameCaptureModel_Type)
    {
        self->obj = new PyNs3SimpleFrameCaptureModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SimpleFrameCaptureModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SimpleFrameCaptureModel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3SimpleFrameCaptureModel__tp_init(PyNs3SimpleFrameCaptureModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleFrameCaptureModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleFrameCaptureModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleFrameCaptureModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SimpleFrameCaptureModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleFrameCaptureModel_SetMargin(PyNs3SimpleFrameCaptureModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double margin;
    const char *keywords[] = {"margin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &margin)) {
        return NULL;
    }
    self->obj->SetMargin(margin);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleFrameCaptureModel_CaptureNewFrame(PyNs3SimpleFrameCaptureModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Event *currentEvent;
    ns3::Event *currentEvent_ptr;
    PyNs3Event *newEvent;
    ns3::Event *newEvent_ptr;
    PyNs3SimpleFrameCaptureModel__PythonHelper *helper_class = dynamic_cast<PyNs3SimpleFrameCaptureModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"currentEvent", "newEvent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Event_Type, &currentEvent, &PyNs3Event_Type, &newEvent)) {
        return NULL;
    }
    currentEvent_ptr = (currentEvent ? currentEvent->obj : NULL);
    newEvent_ptr = (newEvent ? newEvent->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->CaptureNewFrame(ns3::Ptr< ns3::Event  > (currentEvent_ptr), ns3::Ptr< ns3::Event  > (newEvent_ptr))) : (self->obj->ns3::SimpleFrameCaptureModel::CaptureNewFrame(ns3::Ptr< ns3::Event  > (currentEvent_ptr), ns3::Ptr< ns3::Event  > (newEvent_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleFrameCaptureModel_GetMargin(PyNs3SimpleFrameCaptureModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetMargin();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleFrameCaptureModel__copy__(PyNs3SimpleFrameCaptureModel *self)
{

    PyNs3SimpleFrameCaptureModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3SimpleFrameCaptureModel, &PyNs3SimpleFrameCaptureModel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SimpleFrameCaptureModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleFrameCaptureModel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SimpleFrameCaptureModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMargin", (PyCFunction) _wrap_PyNs3SimpleFrameCaptureModel_SetMargin, METH_KEYWORDS|METH_VARARGS, "SetMargin(margin)\n\ntype: margin: double" },
    {(char *) "CaptureNewFrame", (PyCFunction) _wrap_PyNs3SimpleFrameCaptureModel_CaptureNewFrame, METH_KEYWORDS|METH_VARARGS, "CaptureNewFrame(currentEvent, newEvent)\n\ntype: currentEvent: ns3::Ptr< ns3::Event >\ntype: newEvent: ns3::Ptr< ns3::Event >" },
    {(char *) "GetMargin", (PyCFunction) _wrap_PyNs3SimpleFrameCaptureModel_GetMargin, METH_NOARGS, "GetMargin()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3SimpleFrameCaptureModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleFrameCaptureModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SimpleFrameCaptureModel__tp_clear(PyNs3SimpleFrameCaptureModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SimpleFrameCaptureModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SimpleFrameCaptureModel__tp_traverse(PyNs3SimpleFrameCaptureModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SimpleFrameCaptureModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SimpleFrameCaptureModel__tp_dealloc(PyNs3SimpleFrameCaptureModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SimpleFrameCaptureModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleFrameCaptureModel__tp_richcompare (PyNs3SimpleFrameCaptureModel *PYBINDGEN_UNUSED(self), PyNs3SimpleFrameCaptureModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleFrameCaptureModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleFrameCaptureModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SimpleFrameCaptureModel",            /* tp_name */
    sizeof(PyNs3SimpleFrameCaptureModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleFrameCaptureModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SimpleFrameCaptureModel(arg0)\nSimpleFrameCaptureModel()",                        /* Documentation string */
    (traverseproc)PyNs3SimpleFrameCaptureModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SimpleFrameCaptureModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleFrameCaptureModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleFrameCaptureModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SimpleFrameCaptureModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleFrameCaptureModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3SpectrumWifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3SpectrumWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3SpectrumWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SpectrumWifiPhy__PythonHelper::_wrap_DoInitialize(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3SpectrumWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3SpectrumWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class SpectrumWifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SpectrumWifiPhy__PythonHelper::_wrap_NotifyNewAggregate(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3SpectrumWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3SpectrumWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SpectrumWifiPhy__PythonHelper::_wrap_DoDispose(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3SpectrumWifiPhy__PythonHelper *helper = dynamic_cast< PyNs3SpectrumWifiPhy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class SpectrumWifiPhy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::ConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::ConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::Channel >
PyNs3SpectrumWifiPhy__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SpectrumWifiPhy::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = const_cast< ns3::SpectrumWifiPhy* >((const ns3::SpectrumWifiPhy*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SpectrumWifiPhy::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SpectrumWifiPhy::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::SetChannelNumber(uint8_t id)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::SetChannelNumber(id);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelNumber", (char *) "i", (int) id);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::SetChannelWidth(uint16_t channelwidth)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetChannelWidth"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::SetChannelWidth(channelwidth);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetChannelWidth", (char *) "i", (int) channelwidth);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::SetFrequency(uint16_t freq)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetFrequency"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::SetFrequency(freq);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetFrequency", (char *) "i", (int) freq);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::StartTx(ns3::Ptr< ns3::Packet > packet, ns3::WifiTxVector txVector, ns3::Time txDuration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiTxVector *py_WifiTxVector;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartTx"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::StartTx(packet, txVector, txDuration);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(txDuration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartTx", (char *) "NNN", py_Packet, py_WifiTxVector, py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SpectrumWifiPhy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SpectrumWifiPhy::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = (ns3::SpectrumWifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SpectrumWifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

int64_t
PyNs3SpectrumWifiPhy__PythonHelper::AssignStreams(int64_t stream)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhy *self_obj_before;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AssignStreams"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = (ns3::WifiPhy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AssignStreams", (char *) "L", stream);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiPhy::AssignStreams(stream);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3SpectrumWifiPhy__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SpectrumWifiPhy__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SpectrumWifiPhy__tp_init__0(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SpectrumWifiPhy *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SpectrumWifiPhy_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SpectrumWifiPhy_Type)
    {
        self->obj = new PyNs3SpectrumWifiPhy__PythonHelper(*((PyNs3SpectrumWifiPhy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SpectrumWifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SpectrumWifiPhy(*((PyNs3SpectrumWifiPhy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SpectrumWifiPhy__tp_init__1(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SpectrumWifiPhy_Type)
    {
        self->obj = new PyNs3SpectrumWifiPhy__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SpectrumWifiPhy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SpectrumWifiPhy();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3SpectrumWifiPhy__tp_init(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SpectrumWifiPhy__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SpectrumWifiPhy__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetRxSpectrumModel(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::SpectrumModel const > retval;
    PyNs3SpectrumModel *py_SpectrumModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRxSpectrumModel();
    if (!(const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_SpectrumModel = NULL;
    } else {
        py_SpectrumModel = (PyNs3SpectrumModel *) wrapper_lookup_iter->second;
        Py_INCREF(py_SpectrumModel);
    }
    
    if (py_SpectrumModel == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval)))), &PyNs3SpectrumModel_Type);
        py_SpectrumModel = PyObject_New(PyNs3SpectrumModel, wrapper_type);
    
        py_SpectrumModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval))->Ref();
        py_SpectrumModel->obj = const_cast<ns3::SpectrumModel *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumModel->obj] = (PyObject *) py_SpectrumModel;
    }
    py_retval = Py_BuildValue((char *) "N", py_SpectrumModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_SetChannelWidth(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelwidth;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"channelwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelwidth)) {
        return NULL;
    }
    if (channelwidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetChannelWidth(channelwidth)) : (self->obj->ns3::SpectrumWifiPhy::SetChannelWidth(channelwidth));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_ConfigureStandard(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->ConfigureStandard(standard)) : (self->obj->ns3::SpectrumWifiPhy::ConfigureStandard(standard));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_StartTx(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiTxVector *txVector;
    PyNs3Time *txDuration;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "txVector", "txDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiTxVector_Type, &txVector, &PyNs3Time_Type, &txDuration)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->StartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) txDuration)->obj)) : (self->obj->ns3::SpectrumWifiPhy::StartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiTxVector *) txVector)->obj, *((PyNs3Time *) txDuration)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetOperationalChannelList(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    std::vector< unsigned char > retval;
    Pystd__vector__lt___unsigned_char___gt__ *py_std__vector__lt___unsigned_char___gt__;
    
    retval = self->obj->GetOperationalChannelList();
    py_std__vector__lt___unsigned_char___gt__ = PyObject_New(Pystd__vector__lt___unsigned_char___gt__, &Pystd__vector__lt___unsigned_char___gt___Type);
    py_std__vector__lt___unsigned_char___gt__->obj = new std::vector< unsigned char >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___unsigned_char___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SpectrumWifiPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_CreateWifiSpectrumPhyInterface(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NetDevice *device;
    ns3::NetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NetDevice_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->CreateWifiSpectrumPhyInterface(ns3::Ptr< ns3::NetDevice  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetChannel(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::SpectrumWifiPhy::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_AddOperationalChannel(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelNumber;
    const char *keywords[] = {"channelNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelNumber)) {
        return NULL;
    }
    if (channelNumber > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddOperationalChannel(channelNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetCenterFrequencyForChannelWidth(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiTxVector *txVector;
    const char *keywords[] = {"txVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiTxVector_Type, &txVector)) {
        return NULL;
    }
    retval = self->obj->GetCenterFrequencyForChannelWidth(*((PyNs3WifiTxVector *) txVector)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_SetChannelNumber(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetChannelNumber(id)) : (self->obj->ns3::SpectrumWifiPhy::SetChannelNumber(id));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_SetFrequency(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int freq;
    PyNs3SpectrumWifiPhy__PythonHelper *helper_class = dynamic_cast<PyNs3SpectrumWifiPhy__PythonHelper*> (self->obj);
    const char *keywords[] = {"freq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &freq)) {
        return NULL;
    }
    if (freq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetFrequency(freq)) : (self->obj->ns3::SpectrumWifiPhy::SetFrequency(freq));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetRxAntenna(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AntennaModel > retval;
    PyNs3AntennaModel *py_AntennaModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRxAntenna();
    if (!(const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3AntennaModel__PythonHelper).name())
    {
        py_AntennaModel = reinterpret_cast< PyNs3AntennaModel* >(reinterpret_cast< PyNs3AntennaModel__PythonHelper* >(const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_AntennaModel->obj = const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_AntennaModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_AntennaModel = NULL;
        } else {
            py_AntennaModel = (PyNs3AntennaModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_AntennaModel);
        }
    
        if (py_AntennaModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval)))), &PyNs3AntennaModel_Type);
            py_AntennaModel = PyObject_GC_New(PyNs3AntennaModel, wrapper_type);
            py_AntennaModel->inst_dict = NULL;
    
            py_AntennaModel->inst_dict = NULL;
            py_AntennaModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval))->Ref();
            py_AntennaModel->obj = const_cast<ns3::AntennaModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_AntennaModel->obj] = (PyObject *) py_AntennaModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_AntennaModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetBandBandwidth(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetBandBandwidth();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_ClearOperationalChannelList(PyNs3SpectrumWifiPhy *self)
{
    PyObject *py_retval;
    
    self->obj->ClearOperationalChannelList();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_GetGuardBandwidth(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    int currentChannelWidth;
    const char *keywords[] = {"currentChannelWidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &currentChannelWidth)) {
        return NULL;
    }
    if (currentChannelWidth > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetGuardBandwidth(currentChannelWidth);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SpectrumWifiPhy_StartRx(PyNs3SpectrumWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SpectrumSignalParameters *rxParams;
    ns3::SpectrumSignalParameters *rxParams_ptr;
    const char *keywords[] = {"rxParams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SpectrumSignalParameters_Type, &rxParams)) {
        return NULL;
    }
    rxParams_ptr = (rxParams ? rxParams->obj : NULL);
    self->obj->StartRx(ns3::Ptr< ns3::SpectrumSignalParameters  > (rxParams_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SpectrumWifiPhy__copy__(PyNs3SpectrumWifiPhy *self)
{

    PyNs3SpectrumWifiPhy *py_copy;
    py_copy = PyObject_GC_New(PyNs3SpectrumWifiPhy, &PyNs3SpectrumWifiPhy_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SpectrumWifiPhy(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SpectrumWifiPhy_methods[] = {
    {(char *) "GetRxSpectrumModel", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetRxSpectrumModel, METH_NOARGS, "GetRxSpectrumModel()\n\n" },
    {(char *) "SetChannelWidth", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_SetChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetChannelWidth(channelwidth)\n\ntype: channelwidth: uint16_t" },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, "ConfigureStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "StartTx", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_StartTx, METH_KEYWORDS|METH_VARARGS, "StartTx(packet, txVector, txDuration)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: txVector: ns3::WifiTxVector\ntype: txDuration: ns3::Time" },
    {(char *) "GetOperationalChannelList", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetOperationalChannelList, METH_NOARGS, "GetOperationalChannelList()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "CreateWifiSpectrumPhyInterface", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_CreateWifiSpectrumPhyInterface, METH_KEYWORDS|METH_VARARGS, "CreateWifiSpectrumPhyInterface(device)\n\ntype: device: ns3::Ptr< ns3::NetDevice >" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "AddOperationalChannel", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_AddOperationalChannel, METH_KEYWORDS|METH_VARARGS, "AddOperationalChannel(channelNumber)\n\ntype: channelNumber: uint8_t" },
    {(char *) "GetCenterFrequencyForChannelWidth", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetCenterFrequencyForChannelWidth, METH_KEYWORDS|METH_VARARGS, "GetCenterFrequencyForChannelWidth(txVector)\n\ntype: txVector: ns3::WifiTxVector" },
    {(char *) "SetChannelNumber", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_SetChannelNumber, METH_KEYWORDS|METH_VARARGS, "SetChannelNumber(id)\n\ntype: id: uint8_t" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(freq)\n\ntype: freq: uint16_t" },
    {(char *) "GetRxAntenna", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetRxAntenna, METH_NOARGS, "GetRxAntenna()\n\n" },
    {(char *) "GetBandBandwidth", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetBandBandwidth, METH_NOARGS, "GetBandBandwidth()\n\n" },
    {(char *) "ClearOperationalChannelList", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_ClearOperationalChannelList, METH_NOARGS, "ClearOperationalChannelList()\n\n" },
    {(char *) "GetGuardBandwidth", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_GetGuardBandwidth, METH_KEYWORDS|METH_VARARGS, "GetGuardBandwidth(currentChannelWidth)\n\ntype: currentChannelWidth: uint16_t" },
    {(char *) "StartRx", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy_StartRx, METH_KEYWORDS|METH_VARARGS, "StartRx(rxParams)\n\ntype: rxParams: ns3::Ptr< ns3::SpectrumSignalParameters >" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3SpectrumWifiPhy__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3SpectrumWifiPhy__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3SpectrumWifiPhy__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3SpectrumWifiPhy__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SpectrumWifiPhy__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SpectrumWifiPhy__tp_clear(PyNs3SpectrumWifiPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SpectrumWifiPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SpectrumWifiPhy__tp_traverse(PyNs3SpectrumWifiPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SpectrumWifiPhy__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SpectrumWifiPhy__tp_dealloc(PyNs3SpectrumWifiPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SpectrumWifiPhy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SpectrumWifiPhy__tp_richcompare (PyNs3SpectrumWifiPhy *PYBINDGEN_UNUSED(self), PyNs3SpectrumWifiPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SpectrumWifiPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SpectrumWifiPhy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SpectrumWifiPhy",            /* tp_name */
    sizeof(PyNs3SpectrumWifiPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SpectrumWifiPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SpectrumWifiPhy(arg0)\nSpectrumWifiPhy()",                        /* Documentation string */
    (traverseproc)PyNs3SpectrumWifiPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SpectrumWifiPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SpectrumWifiPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SpectrumWifiPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SpectrumWifiPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SpectrumWifiPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Ssid__tp_init__0(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ssid *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid(*((PyNs3Ssid *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ssid__tp_init__1(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ssid__tp_init__2(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *s;
    Py_ssize_t s_len;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &s, &s_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid(std::string(s, s_len));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Ssid__tp_init(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Ssid__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ssid__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Ssid__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Ssid_IsBroadcast(PyNs3Ssid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBroadcast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_DeserializeInformationField(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_GetInformationFieldSize(PyNs3Ssid *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_PeekString(PyNs3Ssid *self)
{
    PyObject *py_retval;
    char *retval;
    
    retval = self->obj->PeekString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_SerializeInformationField(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_IsEqual(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ssid *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &o)) {
        return NULL;
    }
    retval = self->obj->IsEqual(*((PyNs3Ssid *) o)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_ElementId(PyNs3Ssid *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Ssid__copy__(PyNs3Ssid *self)
{

    PyNs3Ssid *py_copy;
    py_copy = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_copy->obj = new ns3::Ssid(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ssid_methods[] = {
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3Ssid_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Ssid_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Ssid_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "PeekString", (PyCFunction) _wrap_PyNs3Ssid_PeekString, METH_NOARGS, "PeekString()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Ssid_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "IsEqual", (PyCFunction) _wrap_PyNs3Ssid_IsEqual, METH_KEYWORDS|METH_VARARGS, "IsEqual(o)\n\ntype: o: ns3::Ssid const &" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Ssid_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ssid__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Ssid__tp_dealloc(PyNs3Ssid *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::Ssid *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Ssid__tp_str(PyNs3Ssid *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Ssid__tp_richcompare (PyNs3Ssid *PYBINDGEN_UNUSED(self), PyNs3Ssid *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ssid_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ssid_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ssid",            /* tp_name */
    sizeof(PyNs3Ssid),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ssid__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Ssid__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Ssid(arg0)\nSsid(s)\nSsid()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ssid__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ssid_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ssid__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3SsidChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'SsidChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3SsidChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SsidChecker__tp_dealloc(PyNs3SsidChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SsidChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SsidChecker__tp_richcompare (PyNs3SsidChecker *PYBINDGEN_UNUSED(self), PyNs3SsidChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SsidChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SsidChecker_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SsidChecker",            /* tp_name */
    sizeof(PyNs3SsidChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SsidChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SsidChecker(arg0)\nSsidChecker()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SsidChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SsidChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SsidChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SsidValue__tp_init__0(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SsidValue__tp_init__1(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ssid *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue(*((PyNs3Ssid *) value)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SsidValue__tp_init__2(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SsidValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SsidValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue(*((PyNs3SsidValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SsidValue__tp_init(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3SsidValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SsidValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SsidValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SsidValue_Set(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3Ssid *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_Get(PyNs3SsidValue *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->Get();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_Copy(PyNs3SsidValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
    
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_SerializeToString(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_DeserializeFromString(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3SsidValue__copy__(PyNs3SsidValue *self)
{

    PyNs3SsidValue *py_copy;
    py_copy = PyObject_New(PyNs3SsidValue, &PyNs3SsidValue_Type);
    
    py_copy->obj = new ns3::SsidValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SsidValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3SsidValue_Set, METH_KEYWORDS|METH_VARARGS, "Set(value)\n\ntype: value: ns3::Ssid const &" },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3SsidValue_Get, METH_NOARGS, "Get()\n\n" },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3SsidValue_Copy, METH_NOARGS, "Copy()\n\n" },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3SsidValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, "SerializeToString(checker)\n\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3SsidValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, "DeserializeFromString(value, checker)\n\ntype: value: std::string\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SsidValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SsidValue__tp_dealloc(PyNs3SsidValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SsidValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SsidValue__tp_richcompare (PyNs3SsidValue *PYBINDGEN_UNUSED(self), PyNs3SsidValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SsidValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SsidValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SsidValue",            /* tp_name */
    sizeof(PyNs3SsidValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SsidValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SsidValue(value)\nSsidValue(arg0)\nSsidValue()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SsidValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SsidValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SsidValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3SupportedRates__get_extended(PyNs3SupportedRates *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3ExtendedSupportedRatesIE *py_ExtendedSupportedRatesIE;
    
    py_ExtendedSupportedRatesIE = PyObject_New(PyNs3ExtendedSupportedRatesIE, &PyNs3ExtendedSupportedRatesIE_Type);
    
    py_ExtendedSupportedRatesIE->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ExtendedSupportedRatesIE->obj = new ns3::ExtendedSupportedRatesIE(self->obj->extended);
    PyNs3Empty_wrapper_registry[(void *) py_ExtendedSupportedRatesIE->obj] = (PyObject *) py_ExtendedSupportedRatesIE;
    py_retval = Py_BuildValue((char *) "N", py_ExtendedSupportedRatesIE);
    return py_retval;
}
static int _wrap_PyNs3SupportedRates__set_extended(PyNs3SupportedRates *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3ExtendedSupportedRatesIE *tmp_ExtendedSupportedRatesIE;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ExtendedSupportedRatesIE_Type, &tmp_ExtendedSupportedRatesIE)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->extended = *tmp_ExtendedSupportedRatesIE->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3SupportedRates__getsets[] = {
    {
        (char*) "extended", /* attribute name */
        (getter) _wrap_PyNs3SupportedRates__get_extended, /* C function to get the attribute */
        (setter) _wrap_PyNs3SupportedRates__set_extended, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};
static PyObject* _wrap_PyNs3SupportedRates__get_MAX_SUPPORTED_RATES(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::SupportedRates::MAX_SUPPORTED_RATES);
    return py_retval;
}
static PyGetSetDef Ns3SupportedRatesMeta__getsets[] = {
    {
        (char*) "MAX_SUPPORTED_RATES", /* attribute name */
        (getter) _wrap_PyNs3SupportedRates__get_MAX_SUPPORTED_RATES, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3SupportedRatesMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3SupportedRatesMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3SupportedRatesMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3SupportedRates__tp_init__0(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SupportedRates();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SupportedRates__tp_init__1(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SupportedRates *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SupportedRates(*((PyNs3SupportedRates *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SupportedRates__tp_init(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SupportedRates__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SupportedRates__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SupportedRates_IsBssMembershipSelectorRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    retval = self->obj->IsBssMembershipSelectorRate(bs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_DeserializeInformationField(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetRate(i);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_AddBssMembershipSelectorRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    self->obj->AddBssMembershipSelectorRate(bs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_IsBasicRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    retval = self->obj->IsBasicRate(bs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_SetBasicRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    self->obj->SetBasicRate(bs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetInformationFieldSize(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_ElementId(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_AddSupportedRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    self->obj->AddSupportedRate(bs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_IsSupportedRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    uint64_t bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &bs)) {
        return NULL;
    }
    retval = self->obj->IsSupportedRate(bs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetNRates(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNRates();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_SerializeInformationField(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SupportedRates__copy__(PyNs3SupportedRates *self)
{

    PyNs3SupportedRates *py_copy;
    py_copy = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_copy->obj = new ns3::SupportedRates(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SupportedRates_methods[] = {
    {(char *) "IsBssMembershipSelectorRate", (PyCFunction) _wrap_PyNs3SupportedRates_IsBssMembershipSelectorRate, METH_KEYWORDS|METH_VARARGS, "IsBssMembershipSelectorRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3SupportedRates_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetRate", (PyCFunction) _wrap_PyNs3SupportedRates_GetRate, METH_KEYWORDS|METH_VARARGS, "GetRate(i)\n\ntype: i: uint8_t" },
    {(char *) "AddBssMembershipSelectorRate", (PyCFunction) _wrap_PyNs3SupportedRates_AddBssMembershipSelectorRate, METH_KEYWORDS|METH_VARARGS, "AddBssMembershipSelectorRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "IsBasicRate", (PyCFunction) _wrap_PyNs3SupportedRates_IsBasicRate, METH_KEYWORDS|METH_VARARGS, "IsBasicRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "SetBasicRate", (PyCFunction) _wrap_PyNs3SupportedRates_SetBasicRate, METH_KEYWORDS|METH_VARARGS, "SetBasicRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3SupportedRates_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3SupportedRates_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "AddSupportedRate", (PyCFunction) _wrap_PyNs3SupportedRates_AddSupportedRate, METH_KEYWORDS|METH_VARARGS, "AddSupportedRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "IsSupportedRate", (PyCFunction) _wrap_PyNs3SupportedRates_IsSupportedRate, METH_KEYWORDS|METH_VARARGS, "IsSupportedRate(bs)\n\ntype: bs: uint64_t" },
    {(char *) "GetNRates", (PyCFunction) _wrap_PyNs3SupportedRates_GetNRates, METH_NOARGS, "GetNRates()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3SupportedRates_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SupportedRates__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SupportedRates__tp_dealloc(PyNs3SupportedRates *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SupportedRates *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3SupportedRates__tp_str(PyNs3SupportedRates *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3SupportedRates__tp_richcompare (PyNs3SupportedRates *PYBINDGEN_UNUSED(self), PyNs3SupportedRates *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SupportedRates_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SupportedRates_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.SupportedRates",            /* tp_name */
    sizeof(PyNs3SupportedRates),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SupportedRates__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3SupportedRates__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SupportedRates(arg0)\nSupportedRates()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SupportedRates__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SupportedRates_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3SupportedRates__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SupportedRates__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3VhtCapabilities__tp_init__0(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3VhtCapabilities *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtCapabilities_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::VhtCapabilities(*((PyNs3VhtCapabilities *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3VhtCapabilities__tp_init__1(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::VhtCapabilities();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3VhtCapabilities__tp_init(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3VhtCapabilities__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3VhtCapabilities__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetTxStbc(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txstbc;
    const char *keywords[] = {"txstbc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txstbc)) {
        return NULL;
    }
    if (txstbc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxStbc(txstbc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_DeserializeInformationField(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetVhtSupported(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int vhtsupported;
    const char *keywords[] = {"vhtsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &vhtsupported)) {
        return NULL;
    }
    if (vhtsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVhtSupported(vhtsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SerializeInformationField(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_IsSupportedRxMcs(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedRxMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetRxLdpc(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rxldpc;
    const char *keywords[] = {"rxldpc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rxldpc)) {
        return NULL;
    }
    if (rxldpc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxLdpc(rxldpc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_ElementId(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetRxStbc(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRxStbc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetVhtCapabilitiesInfo(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetVhtCapabilitiesInfo();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetSupportedMcsAndNssSet(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &ctrl)) {
        return NULL;
    }
    self->obj->SetSupportedMcsAndNssSet(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetTxHighestSupportedLgiDataRate(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int supporteddatarate;
    const char *keywords[] = {"supporteddatarate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &supporteddatarate)) {
        return NULL;
    }
    if (supporteddatarate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxHighestSupportedLgiDataRate(supporteddatarate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetRxMcsMap(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int mcs;
    int nss;
    const char *keywords[] = {"mcs", "nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &mcs, &nss)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxMcsMap(mcs, nss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetTxMcsMap(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int mcs;
    int nss;
    const char *keywords[] = {"mcs", "nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &mcs, &nss)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTxMcsMap(mcs, nss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetShortGuardIntervalFor160Mhz(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int shortguardinterval;
    const char *keywords[] = {"shortguardinterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &shortguardinterval)) {
        return NULL;
    }
    if (shortguardinterval > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetShortGuardIntervalFor160Mhz(shortguardinterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetRxLdpc(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRxLdpc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetInformationFieldSize(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_IsSupportedMcs(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    int Nss;
    const char *keywords[] = {"mcs", "Nss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &mcs, &Nss)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (Nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedMcs(mcs, Nss);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetTxStbc(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTxStbc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetMaxMpduLength(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxMpduLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetVhtCapabilitiesInfo(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int ctrl;
    const char *keywords[] = {"ctrl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &ctrl)) {
        return NULL;
    }
    self->obj->SetVhtCapabilitiesInfo(ctrl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetShortGuardIntervalFor80Mhz(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int shortguardinterval;
    const char *keywords[] = {"shortguardinterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &shortguardinterval)) {
        return NULL;
    }
    if (shortguardinterval > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetShortGuardIntervalFor80Mhz(shortguardinterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetSupportedChannelWidthSet(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelwidthset;
    const char *keywords[] = {"channelwidthset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelwidthset)) {
        return NULL;
    }
    if (channelwidthset > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSupportedChannelWidthSet(channelwidthset);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetSupportedMcsAndNssSet(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetSupportedMcsAndNssSet();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetRxHighestSupportedLgiDataRate(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRxHighestSupportedLgiDataRate();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_IsSupportedTxMcs(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mcs;
    const char *keywords[] = {"mcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mcs)) {
        return NULL;
    }
    if (mcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsSupportedTxMcs(mcs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetSerializedSize(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_GetSupportedChannelWidthSet(PyNs3VhtCapabilities *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSupportedChannelWidthSet();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_Serialize(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetRxHighestSupportedLgiDataRate(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int supporteddatarate;
    const char *keywords[] = {"supporteddatarate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &supporteddatarate)) {
        return NULL;
    }
    if (supporteddatarate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxHighestSupportedLgiDataRate(supporteddatarate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetRxStbc(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rxstbc;
    const char *keywords[] = {"rxstbc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rxstbc)) {
        return NULL;
    }
    if (rxstbc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRxStbc(rxstbc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtCapabilities_SetMaxAmpduLengthExponent(PyNs3VhtCapabilities *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int exponent;
    const char *keywords[] = {"exponent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &exponent)) {
        return NULL;
    }
    if (exponent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxAmpduLengthExponent(exponent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3VhtCapabilities__copy__(PyNs3VhtCapabilities *self)
{

    PyNs3VhtCapabilities *py_copy;
    py_copy = PyObject_New(PyNs3VhtCapabilities, &PyNs3VhtCapabilities_Type);
    
    py_copy->obj = new ns3::VhtCapabilities(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3VhtCapabilities_methods[] = {
    {(char *) "SetTxStbc", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetTxStbc, METH_KEYWORDS|METH_VARARGS, "SetTxStbc(txstbc)\n\ntype: txstbc: uint8_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3VhtCapabilities_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(vhtsupported)\n\ntype: vhtsupported: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3VhtCapabilities_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "IsSupportedRxMcs", (PyCFunction) _wrap_PyNs3VhtCapabilities_IsSupportedRxMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedRxMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "SetRxLdpc", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetRxLdpc, METH_KEYWORDS|METH_VARARGS, "SetRxLdpc(rxldpc)\n\ntype: rxldpc: uint8_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3VhtCapabilities_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "GetRxStbc", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetRxStbc, METH_NOARGS, "GetRxStbc()\n\n" },
    {(char *) "GetVhtCapabilitiesInfo", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetVhtCapabilitiesInfo, METH_NOARGS, "GetVhtCapabilitiesInfo()\n\n" },
    {(char *) "SetSupportedMcsAndNssSet", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetSupportedMcsAndNssSet, METH_KEYWORDS|METH_VARARGS, "SetSupportedMcsAndNssSet(ctrl)\n\ntype: ctrl: uint64_t" },
    {(char *) "SetTxHighestSupportedLgiDataRate", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetTxHighestSupportedLgiDataRate, METH_KEYWORDS|METH_VARARGS, "SetTxHighestSupportedLgiDataRate(supporteddatarate)\n\ntype: supporteddatarate: uint16_t" },
    {(char *) "SetRxMcsMap", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetRxMcsMap, METH_KEYWORDS|METH_VARARGS, "SetRxMcsMap(mcs, nss)\n\ntype: mcs: uint8_t\ntype: nss: uint8_t" },
    {(char *) "SetTxMcsMap", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetTxMcsMap, METH_KEYWORDS|METH_VARARGS, "SetTxMcsMap(mcs, nss)\n\ntype: mcs: uint8_t\ntype: nss: uint8_t" },
    {(char *) "SetShortGuardIntervalFor160Mhz", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetShortGuardIntervalFor160Mhz, METH_KEYWORDS|METH_VARARGS, "SetShortGuardIntervalFor160Mhz(shortguardinterval)\n\ntype: shortguardinterval: uint8_t" },
    {(char *) "GetRxLdpc", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetRxLdpc, METH_NOARGS, "GetRxLdpc()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "IsSupportedMcs", (PyCFunction) _wrap_PyNs3VhtCapabilities_IsSupportedMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedMcs(mcs, Nss)\n\ntype: mcs: uint8_t\ntype: Nss: uint8_t" },
    {(char *) "GetTxStbc", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetTxStbc, METH_NOARGS, "GetTxStbc()\n\n" },
    {(char *) "SetMaxMpduLength", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetMaxMpduLength, METH_KEYWORDS|METH_VARARGS, "SetMaxMpduLength(length)\n\ntype: length: uint8_t" },
    {(char *) "SetVhtCapabilitiesInfo", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetVhtCapabilitiesInfo, METH_KEYWORDS|METH_VARARGS, "SetVhtCapabilitiesInfo(ctrl)\n\ntype: ctrl: uint32_t" },
    {(char *) "SetShortGuardIntervalFor80Mhz", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetShortGuardIntervalFor80Mhz, METH_KEYWORDS|METH_VARARGS, "SetShortGuardIntervalFor80Mhz(shortguardinterval)\n\ntype: shortguardinterval: uint8_t" },
    {(char *) "SetSupportedChannelWidthSet", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetSupportedChannelWidthSet, METH_KEYWORDS|METH_VARARGS, "SetSupportedChannelWidthSet(channelwidthset)\n\ntype: channelwidthset: uint8_t" },
    {(char *) "GetSupportedMcsAndNssSet", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetSupportedMcsAndNssSet, METH_NOARGS, "GetSupportedMcsAndNssSet()\n\n" },
    {(char *) "GetRxHighestSupportedLgiDataRate", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetRxHighestSupportedLgiDataRate, METH_NOARGS, "GetRxHighestSupportedLgiDataRate()\n\n" },
    {(char *) "IsSupportedTxMcs", (PyCFunction) _wrap_PyNs3VhtCapabilities_IsSupportedTxMcs, METH_KEYWORDS|METH_VARARGS, "IsSupportedTxMcs(mcs)\n\ntype: mcs: uint8_t" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetSupportedChannelWidthSet", (PyCFunction) _wrap_PyNs3VhtCapabilities_GetSupportedChannelWidthSet, METH_NOARGS, "GetSupportedChannelWidthSet()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3VhtCapabilities_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetRxHighestSupportedLgiDataRate", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetRxHighestSupportedLgiDataRate, METH_KEYWORDS|METH_VARARGS, "SetRxHighestSupportedLgiDataRate(supporteddatarate)\n\ntype: supporteddatarate: uint16_t" },
    {(char *) "SetRxStbc", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetRxStbc, METH_KEYWORDS|METH_VARARGS, "SetRxStbc(rxstbc)\n\ntype: rxstbc: uint8_t" },
    {(char *) "SetMaxAmpduLengthExponent", (PyCFunction) _wrap_PyNs3VhtCapabilities_SetMaxAmpduLengthExponent, METH_KEYWORDS|METH_VARARGS, "SetMaxAmpduLengthExponent(exponent)\n\ntype: exponent: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3VhtCapabilities__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3VhtCapabilities__tp_dealloc(PyNs3VhtCapabilities *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::VhtCapabilities *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3VhtCapabilities__tp_str(PyNs3VhtCapabilities *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3VhtCapabilities__tp_richcompare (PyNs3VhtCapabilities *PYBINDGEN_UNUSED(self), PyNs3VhtCapabilities *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3VhtCapabilities_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3VhtCapabilities_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.VhtCapabilities",            /* tp_name */
    sizeof(PyNs3VhtCapabilities),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3VhtCapabilities__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3VhtCapabilities__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "VhtCapabilities(arg0)\nVhtCapabilities()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3VhtCapabilities__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3VhtCapabilities_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3VhtCapabilities__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3VhtOperation__tp_init__0(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3VhtOperation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3VhtOperation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::VhtOperation(*((PyNs3VhtOperation *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3VhtOperation__tp_init__1(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::VhtOperation();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3VhtOperation__tp_init(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3VhtOperation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3VhtOperation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3VhtOperation_SetChannelWidth(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelWidth;
    const char *keywords[] = {"channelWidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelWidth)) {
        return NULL;
    }
    if (channelWidth > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelWidth(channelWidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetChannelWidth(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelWidth();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetBasicVhtMcsAndNssSet(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBasicVhtMcsAndNssSet();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_DeserializeInformationField(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_Serialize(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetChannelCenterFrequencySegment0(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelCenterFrequencySegment0();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetChannelCenterFrequencySegment1(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelCenterFrequencySegment1();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SetMaxVhtMcsPerNss(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nss;
    int maxVhtMcs;
    const char *keywords[] = {"nss", "maxVhtMcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &nss, &maxVhtMcs)) {
        return NULL;
    }
    if (nss > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (maxVhtMcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxVhtMcsPerNss(nss, maxVhtMcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SetChannelCenterFrequencySegment0(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelCenterFrequencySegment0;
    const char *keywords[] = {"channelCenterFrequencySegment0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelCenterFrequencySegment0)) {
        return NULL;
    }
    if (channelCenterFrequencySegment0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelCenterFrequencySegment0(channelCenterFrequencySegment0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SetChannelCenterFrequencySegment1(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelCenterFrequencySegment1;
    const char *keywords[] = {"channelCenterFrequencySegment1", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelCenterFrequencySegment1)) {
        return NULL;
    }
    if (channelCenterFrequencySegment1 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelCenterFrequencySegment1(channelCenterFrequencySegment1);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetInformationFieldSize(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SetVhtSupported(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int vhtsupported;
    const char *keywords[] = {"vhtsupported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &vhtsupported)) {
        return NULL;
    }
    if (vhtsupported > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetVhtSupported(vhtsupported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SerializeInformationField(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_GetSerializedSize(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_SetBasicVhtMcsAndNssSet(PyNs3VhtOperation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int basicVhtMcsAndNssSet;
    const char *keywords[] = {"basicVhtMcsAndNssSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &basicVhtMcsAndNssSet)) {
        return NULL;
    }
    if (basicVhtMcsAndNssSet > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBasicVhtMcsAndNssSet(basicVhtMcsAndNssSet);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VhtOperation_ElementId(PyNs3VhtOperation *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3VhtOperation__copy__(PyNs3VhtOperation *self)
{

    PyNs3VhtOperation *py_copy;
    py_copy = PyObject_New(PyNs3VhtOperation, &PyNs3VhtOperation_Type);
    
    py_copy->obj = new ns3::VhtOperation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3VhtOperation_methods[] = {
    {(char *) "SetChannelWidth", (PyCFunction) _wrap_PyNs3VhtOperation_SetChannelWidth, METH_KEYWORDS|METH_VARARGS, "SetChannelWidth(channelWidth)\n\ntype: channelWidth: uint8_t" },
    {(char *) "GetChannelWidth", (PyCFunction) _wrap_PyNs3VhtOperation_GetChannelWidth, METH_NOARGS, "GetChannelWidth()\n\n" },
    {(char *) "GetBasicVhtMcsAndNssSet", (PyCFunction) _wrap_PyNs3VhtOperation_GetBasicVhtMcsAndNssSet, METH_NOARGS, "GetBasicVhtMcsAndNssSet()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3VhtOperation_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3VhtOperation_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetChannelCenterFrequencySegment0", (PyCFunction) _wrap_PyNs3VhtOperation_GetChannelCenterFrequencySegment0, METH_NOARGS, "GetChannelCenterFrequencySegment0()\n\n" },
    {(char *) "GetChannelCenterFrequencySegment1", (PyCFunction) _wrap_PyNs3VhtOperation_GetChannelCenterFrequencySegment1, METH_NOARGS, "GetChannelCenterFrequencySegment1()\n\n" },
    {(char *) "SetMaxVhtMcsPerNss", (PyCFunction) _wrap_PyNs3VhtOperation_SetMaxVhtMcsPerNss, METH_KEYWORDS|METH_VARARGS, "SetMaxVhtMcsPerNss(nss, maxVhtMcs)\n\ntype: nss: uint8_t\ntype: maxVhtMcs: uint8_t" },
    {(char *) "SetChannelCenterFrequencySegment0", (PyCFunction) _wrap_PyNs3VhtOperation_SetChannelCenterFrequencySegment0, METH_KEYWORDS|METH_VARARGS, "SetChannelCenterFrequencySegment0(channelCenterFrequencySegment0)\n\ntype: channelCenterFrequencySegment0: uint8_t" },
    {(char *) "SetChannelCenterFrequencySegment1", (PyCFunction) _wrap_PyNs3VhtOperation_SetChannelCenterFrequencySegment1, METH_KEYWORDS|METH_VARARGS, "SetChannelCenterFrequencySegment1(channelCenterFrequencySegment1)\n\ntype: channelCenterFrequencySegment1: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3VhtOperation_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetVhtSupported", (PyCFunction) _wrap_PyNs3VhtOperation_SetVhtSupported, METH_KEYWORDS|METH_VARARGS, "SetVhtSupported(vhtsupported)\n\ntype: vhtsupported: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3VhtOperation_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3VhtOperation_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetBasicVhtMcsAndNssSet", (PyCFunction) _wrap_PyNs3VhtOperation_SetBasicVhtMcsAndNssSet, METH_KEYWORDS|METH_VARARGS, "SetBasicVhtMcsAndNssSet(basicVhtMcsAndNssSet)\n\ntype: basicVhtMcsAndNssSet: uint16_t" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3VhtOperation_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3VhtOperation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3VhtOperation__tp_dealloc(PyNs3VhtOperation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::VhtOperation *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3VhtOperation__tp_str(PyNs3VhtOperation *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3VhtOperation__tp_richcompare (PyNs3VhtOperation *PYBINDGEN_UNUSED(self), PyNs3VhtOperation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3VhtOperation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3VhtOperation_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.VhtOperation",            /* tp_name */
    sizeof(PyNs3VhtOperation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3VhtOperation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3VhtOperation__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "VhtOperation(arg0)\nVhtOperation()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3VhtOperation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3VhtOperation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3VhtOperation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiMacQueue__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    PyNs3WifiMacQueue__PythonHelper *helper = dynamic_cast< PyNs3WifiMacQueue__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiMacQueue__PythonHelper::_wrap_DoInitialize(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    PyNs3WifiMacQueue__PythonHelper *helper = dynamic_cast< PyNs3WifiMacQueue__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiMacQueue__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    PyNs3WifiMacQueue__PythonHelper *helper = dynamic_cast< PyNs3WifiMacQueue__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiMacQueue__PythonHelper::_wrap_DoDispose(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    PyNs3WifiMacQueue__PythonHelper *helper = dynamic_cast< PyNs3WifiMacQueue__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3WifiMacQueue__PythonHelper::Enqueue(ns3::Ptr< ns3::WifiMacQueueItem > item)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacQueue *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Enqueue(item);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = (ns3::WifiMacQueue*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (item));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "N", py_WifiMacQueueItem);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Enqueue(item);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Enqueue(item);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem >
PyNs3WifiMacQueue__PythonHelper::Dequeue()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacQueue *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Dequeue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Dequeue();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = (ns3::WifiMacQueue*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Dequeue", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Dequeue();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Dequeue();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem const >
PyNs3WifiMacQueue__PythonHelper::Peek() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacQueue *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem const > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Peek"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Peek();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = const_cast< ns3::WifiMacQueue* >((const ns3::WifiMacQueue*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Peek", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Peek();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Peek();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiMacQueueItem >
PyNs3WifiMacQueue__PythonHelper::Remove()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacQueue *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueueItem *tmp_WifiMacQueueItem;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Remove"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Remove();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = (ns3::WifiMacQueue*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Remove", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Remove();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMacQueueItem_Type, &tmp_WifiMacQueueItem)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacQueue::Remove();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiMacQueueItem  > (tmp_WifiMacQueueItem->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacQueue* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiMacQueue__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiMacQueue__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiMacQueue__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiMacQueue__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiMacQueue__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiMacQueue__tp_init__0(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiMacQueue_Type)
    {
        self->obj = new PyNs3WifiMacQueue__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiMacQueue__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacQueue();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiMacQueue__tp_init__1(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMacQueue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiMacQueue_Type)
    {
        self->obj = new PyNs3WifiMacQueue__PythonHelper(*((PyNs3WifiMacQueue *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiMacQueue__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacQueue(*((PyNs3WifiMacQueue *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3WifiMacQueue__tp_init(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacQueue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacQueue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMacQueue_SetMaxDelay(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *delay;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &delay)) {
        return NULL;
    }
    self->obj->SetMaxDelay(*((PyNs3Time *) delay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_Peek(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem const > retval;
    PyNs3WifiMacQueue__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacQueue__PythonHelper*> (self->obj);
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->Peek()) : (self->obj->ns3::WifiMacQueue::Peek());
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetNPacketsByTidAndAddress(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int tid;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"tid", "dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNPacketsByTidAndAddress(tid, *((PyNs3Mac48Address *) dest)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_DequeueByTidAndAddress(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    int tid;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"tid", "dest", NULL};
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DequeueByTidAndAddress(tid, *((PyNs3Mac48Address *) dest)->obj);
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetMaxDelay(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetNBytes(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNBytes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_PushFront(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    retval = self->obj->PushFront(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_Dequeue(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueue__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacQueue__PythonHelper*> (self->obj);
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->Dequeue()) : (self->obj->ns3::WifiMacQueue::Dequeue());
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMacQueue::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_DequeueByAddress(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"dest", NULL};
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    retval = self->obj->DequeueByAddress(*((PyNs3Mac48Address *) dest)->obj);
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiMacQueue_Remove__0(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem > retval;
    PyNs3WifiMacQueue__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacQueue__PythonHelper*> (self->obj);
    const char *keywords[] = {NULL};
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Remove()) : (self->obj->ns3::WifiMacQueue::Remove());
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMacQueue_Remove__1(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Remove(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3WifiMacQueue_Remove(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacQueue_Remove__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacQueue_Remove__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiMacQueue_Enqueue(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiMacQueueItem *item;
    ns3::WifiMacQueueItem *item_ptr;
    PyNs3WifiMacQueue__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacQueue__PythonHelper*> (self->obj);
    const char *keywords[] = {"item", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacQueueItem_Type, &item)) {
        return NULL;
    }
    item_ptr = (item ? item->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr))) : (self->obj->ns3::WifiMacQueue::Enqueue(ns3::Ptr< ns3::WifiMacQueueItem  > (item_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_PeekByTidAndAddress(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMacQueueItem const > retval;
    int tid;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"tid", "dest", NULL};
    PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &tid, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->PeekByTidAndAddress(tid, *((PyNs3Mac48Address *) dest)->obj);
    if (!(const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiMacQueueItem = NULL;
    } else {
        py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMacQueueItem);
    }
    
    if (py_WifiMacQueueItem == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval)))), &PyNs3WifiMacQueueItem_Type);
        py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);
    
        py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMacQueueItem);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_IsEmpty(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsEmpty();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetNPackets(PyNs3WifiMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNPackets();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacQueue_GetNPacketsByAddress(PyNs3WifiMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    retval = self->obj->GetNPacketsByAddress(*((PyNs3Mac48Address *) dest)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMacQueue__copy__(PyNs3WifiMacQueue *self)
{

    PyNs3WifiMacQueue *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiMacQueue, &PyNs3WifiMacQueue_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::WifiMacQueue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMacQueue_methods[] = {
    {(char *) "SetMaxDelay", (PyCFunction) _wrap_PyNs3WifiMacQueue_SetMaxDelay, METH_KEYWORDS|METH_VARARGS, "SetMaxDelay(delay)\n\ntype: delay: ns3::Time" },
    {(char *) "Peek", (PyCFunction) _wrap_PyNs3WifiMacQueue_Peek, METH_NOARGS, "Peek()\n\n" },
    {(char *) "GetNPacketsByTidAndAddress", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetNPacketsByTidAndAddress, METH_KEYWORDS|METH_VARARGS, "GetNPacketsByTidAndAddress(tid, dest)\n\ntype: tid: uint8_t\ntype: dest: ns3::Mac48Address" },
    {(char *) "DequeueByTidAndAddress", (PyCFunction) _wrap_PyNs3WifiMacQueue_DequeueByTidAndAddress, METH_KEYWORDS|METH_VARARGS, "DequeueByTidAndAddress(tid, dest)\n\ntype: tid: uint8_t\ntype: dest: ns3::Mac48Address" },
    {(char *) "GetMaxDelay", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetMaxDelay, METH_NOARGS, "GetMaxDelay()\n\n" },
    {(char *) "GetNBytes", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetNBytes, METH_NOARGS, "GetNBytes()\n\n" },
    {(char *) "PushFront", (PyCFunction) _wrap_PyNs3WifiMacQueue_PushFront, METH_KEYWORDS|METH_VARARGS, "PushFront(item)\n\ntype: item: ns3::Ptr< ns3::WifiMacQueueItem >" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3WifiMacQueue_Dequeue, METH_NOARGS, "Dequeue()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "DequeueByAddress", (PyCFunction) _wrap_PyNs3WifiMacQueue_DequeueByAddress, METH_KEYWORDS|METH_VARARGS, "DequeueByAddress(dest)\n\ntype: dest: ns3::Mac48Address" },
    {(char *) "Remove", (PyCFunction) _wrap_PyNs3WifiMacQueue_Remove, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WifiMacQueue_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(item)\n\ntype: item: ns3::Ptr< ns3::WifiMacQueueItem >" },
    {(char *) "PeekByTidAndAddress", (PyCFunction) _wrap_PyNs3WifiMacQueue_PeekByTidAndAddress, METH_KEYWORDS|METH_VARARGS, "PeekByTidAndAddress(tid, dest)\n\ntype: tid: uint8_t\ntype: dest: ns3::Mac48Address" },
    {(char *) "IsEmpty", (PyCFunction) _wrap_PyNs3WifiMacQueue_IsEmpty, METH_NOARGS, "IsEmpty()\n\n" },
    {(char *) "GetNPackets", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetNPackets, METH_NOARGS, "GetNPackets()\n\n" },
    {(char *) "GetNPacketsByAddress", (PyCFunction) _wrap_PyNs3WifiMacQueue_GetNPacketsByAddress, METH_KEYWORDS|METH_VARARGS, "GetNPacketsByAddress(dest)\n\ntype: dest: ns3::Mac48Address" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiMacQueue__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiMacQueue__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiMacQueue__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3WifiMacQueue__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMacQueue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMacQueue__tp_clear(PyNs3WifiMacQueue *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiMacQueue *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiMacQueue__tp_traverse(PyNs3WifiMacQueue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiMacQueue__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiMacQueue__tp_dealloc(PyNs3WifiMacQueue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMacQueue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacQueue__tp_richcompare (PyNs3WifiMacQueue *PYBINDGEN_UNUSED(self), PyNs3WifiMacQueue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacQueue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacQueue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiMacQueue",            /* tp_name */
    sizeof(PyNs3WifiMacQueue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacQueue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiMacQueue(arg0)\nWifiMacQueue()",                        /* Documentation string */
    (traverseproc)PyNs3WifiMacQueue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMacQueue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacQueue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacQueue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMacQueue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacQueue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiModeChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiModeChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3WifiModeChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeChecker__tp_dealloc(PyNs3WifiModeChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiModeChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeChecker__tp_richcompare (PyNs3WifiModeChecker *PYBINDGEN_UNUSED(self), PyNs3WifiModeChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeChecker_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiModeChecker",            /* tp_name */
    sizeof(PyNs3WifiModeChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiModeChecker(arg0)\nWifiModeChecker()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiModeValue__tp_init__0(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiModeValue__tp_init__1(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMode *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue(*((PyNs3WifiMode *) value)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WifiModeValue__tp_init__2(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiModeValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiModeValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue(*((PyNs3WifiModeValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WifiModeValue__tp_init(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiModeValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiModeValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiModeValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiModeValue_Set(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3WifiMode *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_Get(PyNs3WifiModeValue *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->Get();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_Copy(PyNs3WifiModeValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
    
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_SerializeToString(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_DeserializeFromString(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiModeValue__copy__(PyNs3WifiModeValue *self)
{

    PyNs3WifiModeValue *py_copy;
    py_copy = PyObject_New(PyNs3WifiModeValue, &PyNs3WifiModeValue_Type);
    
    py_copy->obj = new ns3::WifiModeValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiModeValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3WifiModeValue_Set, METH_KEYWORDS|METH_VARARGS, "Set(value)\n\ntype: value: ns3::WifiMode const &" },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3WifiModeValue_Get, METH_NOARGS, "Get()\n\n" },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3WifiModeValue_Copy, METH_NOARGS, "Copy()\n\n" },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3WifiModeValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, "SerializeToString(checker)\n\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3WifiModeValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, "DeserializeFromString(value, checker)\n\ntype: value: std::string\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiModeValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeValue__tp_dealloc(PyNs3WifiModeValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiModeValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeValue__tp_richcompare (PyNs3WifiModeValue *PYBINDGEN_UNUSED(self), PyNs3WifiModeValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiModeValue",            /* tp_name */
    sizeof(PyNs3WifiModeValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "WifiModeValue(value)\nWifiModeValue(arg0)\nWifiModeValue()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_ForwardUp(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *from;
    PyNs3Mac48Address *to;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "from", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &from, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method ForwardUp of class WifiNetDevice is protected and can only be called by a subclass");
        return NULL;
    }
    helper->ForwardUp__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) from)->obj, *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_DoInitialize(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class WifiNetDevice is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class WifiNetDevice is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_DoDispose(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class WifiNetDevice is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3WifiNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiNetDevice::SetIfIndex(index);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3WifiNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3WifiNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiNetDevice::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3WifiNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


bool
PyNs3WifiNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Node >
PyNs3WifiNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


bool
PyNs3WifiNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiNetDevice::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiNetDevice::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiNetDevice::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NetDevice* >(m_pyself)->obj = (ns3::NetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WifiNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3WifiNetDevice__tp_init(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiNetDevice_Type)
    {
        self->obj = new PyNs3WifiNetDevice__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiNetDevice' cannot be constructed");
        return -1;
    }
    return 0;
}



PyObject *
_wrap_PyNs3WifiNetDevice_GetMulticast__0(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::WifiNetDevice::GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiNetDevice_GetMulticast__1(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *addr;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv6Address_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv6Address *) addr)->obj)) : (self->obj->ns3::WifiNetDevice::GetMulticast(*((PyNs3Ipv6Address *) addr)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiNetDevice_GetMulticast(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiNetDevice_GetMulticast__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiNetDevice_GetMulticast__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsPointToPoint(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsPointToPoint()) : (self->obj->ns3::WifiNetDevice::IsPointToPoint());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_Send(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &packet, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac8Address_Type)) {
        dest2 = *((PyNs3Mac8Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address, Mac8Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber)) : (self->obj->ns3::WifiNetDevice::Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_AddLinkChangeCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    (helper_class == NULL)? (self->obj->AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::WifiNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_NeedsArp(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedsArp()) : (self->obj->ns3::WifiNetDevice::NeedsArp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetPromiscReceiveCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl15> cb_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl15> (cb);
    (helper_class == NULL)? (self->obj->SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WifiNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetNode(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::WifiNetDevice::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetRemoteStationManager(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRemoteStationManager();
    if (!(const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetMac(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMac > retval;
    PyNs3WifiMac *py_WifiMac;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMac();
    if (!(const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMac = NULL;
    } else {
        py_WifiMac = (PyNs3WifiMac *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMac);
    }
    
    if (py_WifiMac == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))), &PyNs3WifiMac_Type);
        py_WifiMac = PyObject_GC_New(PyNs3WifiMac, wrapper_type);
        py_WifiMac->inst_dict = NULL;
    
        py_WifiMac->inst_dict = NULL;
        py_WifiMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMac->obj = const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMac->obj] = (PyObject *) py_WifiMac;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMac);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SendFrom(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *source;
    ns3::Address source2;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "source", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OOi", (char **) keywords, &PyNs3Packet_Type, &packet, &source, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(source, (PyObject*) &PyNs3Address_Type)) {
        source2 = *((PyNs3Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv4Address_Type)) {
        source2 = *((PyNs3Ipv4Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv6Address_Type)) {
        source2 = *((PyNs3Ipv6Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac48Address_Type)) {
        source2 = *((PyNs3Mac48Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac8Address_Type)) {
        source2 = *((PyNs3Mac8Address *) source)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address, Mac8Address), not %s", Py_TYPE(source)->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac8Address_Type)) {
        dest2 = *((PyNs3Mac8Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address, Mac8Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber)) : (self->obj->ns3::WifiNetDevice::SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsBroadcast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBroadcast()) : (self->obj->ns3::WifiNetDevice::IsBroadcast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetMtu(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMtu()) : (self->obj->ns3::WifiNetDevice::GetMtu());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsBridge(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBridge()) : (self->obj->ns3::WifiNetDevice::IsBridge());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetAddress(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::WifiNetDevice::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsLinkUp(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsLinkUp()) : (self->obj->ns3::WifiNetDevice::IsLinkUp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetIfIndex(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int index;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &index)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetIfIndex(index)) : (self->obj->ns3::WifiNetDevice::SetIfIndex(index));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetAddress(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *address;
    ns3::Address address2;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac8Address_Type)) {
        address2 = *((PyNs3Mac8Address *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address, Mac8Address), not %s", Py_TYPE(address)->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(address2)) : (self->obj->ns3::WifiNetDevice::SetAddress(address2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetBroadcast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::WifiNetDevice::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetIfIndex(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetIfIndex()) : (self->obj->ns3::WifiNetDevice::GetIfIndex());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetReceiveCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl14> cb_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl14> (cb);
    (helper_class == NULL)? (self->obj->SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WifiNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsMulticast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsMulticast()) : (self->obj->ns3::WifiNetDevice::IsMulticast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetMtu(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mtu;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"mtu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mtu)) {
        return NULL;
    }
    if (mtu > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetMtu(mtu)) : (self->obj->ns3::WifiNetDevice::SetMtu(mtu));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetPhy(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy();
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = reinterpret_cast< PyNs3WifiPhy* >(reinterpret_cast< PyNs3WifiPhy__PythonHelper* >(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->inst_dict = NULL;
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SupportsSendFrom(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::WifiNetDevice::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetChannel(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::WifiNetDevice::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}

static PyMethodDef PyNs3WifiNetDevice_methods[] = {
    {(char *) "GetMulticast", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsPointToPoint", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsPointToPoint, METH_NOARGS, "IsPointToPoint()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3WifiNetDevice_Send, METH_KEYWORDS|METH_VARARGS, "Send(packet, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "AddLinkChangeCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_AddLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, "AddLinkChangeCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "NeedsArp", (PyCFunction) _wrap_PyNs3WifiNetDevice_NeedsArp, METH_NOARGS, "NeedsArp()\n\n" },
    {(char *) "SetPromiscReceiveCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetPromiscReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetPromiscReceiveCallback(cb)\n\ntype: cb: ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetNode, METH_NOARGS, "GetNode()\n\n" },
    {(char *) "GetRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetRemoteStationManager, METH_NOARGS, "GetRemoteStationManager()\n\n" },
    {(char *) "GetMac", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMac, METH_NOARGS, "GetMac()\n\n" },
    {(char *) "SendFrom", (PyCFunction) _wrap_PyNs3WifiNetDevice_SendFrom, METH_KEYWORDS|METH_VARARGS, "SendFrom(packet, source, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Address const &\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "GetMtu", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMtu, METH_NOARGS, "GetMtu()\n\n" },
    {(char *) "IsBridge", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsBridge, METH_NOARGS, "IsBridge()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "IsLinkUp", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsLinkUp, METH_NOARGS, "IsLinkUp()\n\n" },
    {(char *) "SetIfIndex", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetIfIndex, METH_KEYWORDS|METH_VARARGS, "SetIfIndex(index)\n\ntype: index: uint32_t const" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Address" },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetBroadcast, METH_NOARGS, "GetBroadcast()\n\n" },
    {(char *) "GetIfIndex", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetIfIndex, METH_NOARGS, "GetIfIndex()\n\n" },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveCallback(cb)\n\ntype: cb: ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsMulticast, METH_NOARGS, "IsMulticast()\n\n" },
    {(char *) "SetMtu", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetMtu, METH_KEYWORDS|METH_VARARGS, "SetMtu(mtu)\n\ntype: mtu: uint16_t const" },
    {(char *) "GetPhy", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetPhy, METH_NOARGS, "GetPhy()\n\n" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3WifiNetDevice_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "ForwardUp", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_ForwardUp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiNetDevice__tp_clear(PyNs3WifiNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiNetDevice__tp_traverse(PyNs3WifiNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiNetDevice__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiNetDevice__tp_dealloc(PyNs3WifiNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiNetDevice__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiNetDevice__tp_richcompare (PyNs3WifiNetDevice *PYBINDGEN_UNUSED(self), PyNs3WifiNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiNetDevice_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiNetDevice",            /* tp_name */
    sizeof(PyNs3WifiNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiNetDevice()",                        /* Documentation string */
    (traverseproc)PyNs3WifiNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_DoInitialize(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::ChangeState(int newState)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ChangeState"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::ChangeState(newState);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ChangeState", (char *) "i", newState);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3WifiRadioEnergyModel__PythonHelper::GetTotalEnergyConsumption() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetTotalEnergyConsumption"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModel* >((const ns3::WifiRadioEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetTotalEnergyConsumption", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::HandleEnergyChanged()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HandleEnergyChanged"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::HandleEnergyChanged();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HandleEnergyChanged", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::HandleEnergyDepletion()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HandleEnergyDepletion"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::HandleEnergyDepletion();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HandleEnergyDepletion", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::HandleEnergyRecharged()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HandleEnergyRecharged"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::HandleEnergyRecharged();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HandleEnergyRecharged", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3WifiRadioEnergyModel__PythonHelper::DoGetCurrentA() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetCurrentA"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModel* >((const ns3::WifiRadioEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetCurrentA", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::SetEnergySource(ns3::Ptr< ns3::EnergySource > source)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEnergySource"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = (ns3::DeviceEnergyModel*) this;
    if (typeid(*(const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))).name() == typeid(PyNs3EnergySource__PythonHelper).name())
    {
        py_EnergySource = (PyNs3EnergySource*) (((PyNs3EnergySource__PythonHelper*) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type);
            py_EnergySource->inst_dict = NULL;
    
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEnergySource", (char *) "N", py_EnergySource);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WifiRadioEnergyModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiRadioEnergyModel__tp_init__0(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRadioEnergyModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRadioEnergyModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModel_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModel__PythonHelper(*((PyNs3WifiRadioEnergyModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiRadioEnergyModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiRadioEnergyModel__tp_init__1(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WifiRadioEnergyModel_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WifiRadioEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiRadioEnergyModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiRadioEnergyModel__tp_init(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRadioEnergyModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRadioEnergyModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiRadioEnergyModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetSwitchingCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSwitchingCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetIdleCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetIdleCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetMaximumTimeInState(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int state;
    const char *keywords[] = {"state", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &state)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetMaximumTimeInState(state);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetRxCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetCcaBusyCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double ccaBusyCurrentA;
    const char *keywords[] = {"ccaBusyCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &ccaBusyCurrentA)) {
        return NULL;
    }
    self->obj->SetCcaBusyCurrentA(ccaBusyCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txCurrentA;
    const char *keywords[] = {"txCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txCurrentA)) {
        return NULL;
    }
    self->obj->SetTxCurrentA(txCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetEnergyDepletionCallback(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetEnergyDepletionCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetCcaBusyCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaBusyCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetEnergyRechargedCallback(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl4> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl4> (callback);
    self->obj->SetEnergyRechargedCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentFromModel(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txPowerDbm;
    const char *keywords[] = {"txPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txPowerDbm)) {
        return NULL;
    }
    self->obj->SetTxCurrentFromModel(txPowerDbm);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetSleepCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double sleepCurrentA;
    const char *keywords[] = {"sleepCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &sleepCurrentA)) {
        return NULL;
    }
    self->obj->SetSleepCurrentA(sleepCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_HandleEnergyRecharged(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->HandleEnergyRecharged()) : (self->obj->ns3::WifiRadioEnergyModel::HandleEnergyRecharged());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_HandleEnergyDepletion(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->HandleEnergyDepletion()) : (self->obj->ns3::WifiRadioEnergyModel::HandleEnergyDepletion());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetIdleCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double idleCurrentA;
    const char *keywords[] = {"idleCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &idleCurrentA)) {
        return NULL;
    }
    self->obj->SetIdleCurrentA(idleCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_ChangeState(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int newState;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"newState", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &newState)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->ChangeState(newState)) : (self->obj->ns3::WifiRadioEnergyModel::ChangeState(newState));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTxCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTotalEnergyConsumption(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetTotalEnergyConsumption()) : (self->obj->ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetSleepCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSleepCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetRxCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double rxCurrentA;
    const char *keywords[] = {"rxCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &rxCurrentA)) {
        return NULL;
    }
    self->obj->SetRxCurrentA(rxCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetSwitchingCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double switchingCurrentA;
    const char *keywords[] = {"switchingCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &switchingCurrentA)) {
        return NULL;
    }
    self->obj->SetSwitchingCurrentA(switchingCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_HandleEnergyChanged(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->HandleEnergyChanged()) : (self->obj->ns3::WifiRadioEnergyModel::HandleEnergyChanged());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiRadioEnergyModel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetSwitchingCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetSwitchingCurrentA, METH_NOARGS, "GetSwitchingCurrentA()\n\n" },
    {(char *) "GetIdleCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetIdleCurrentA, METH_NOARGS, "GetIdleCurrentA()\n\n" },
    {(char *) "GetMaximumTimeInState", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetMaximumTimeInState, METH_KEYWORDS|METH_VARARGS, "GetMaximumTimeInState(state)\n\ntype: state: int" },
    {(char *) "GetRxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetRxCurrentA, METH_NOARGS, "GetRxCurrentA()\n\n" },
    {(char *) "SetCcaBusyCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetCcaBusyCurrentA, METH_KEYWORDS|METH_VARARGS, "SetCcaBusyCurrentA(ccaBusyCurrentA)\n\ntype: ccaBusyCurrentA: double" },
    {(char *) "SetTxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentA, METH_KEYWORDS|METH_VARARGS, "SetTxCurrentA(txCurrentA)\n\ntype: txCurrentA: double" },
    {(char *) "SetEnergyDepletionCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetEnergyDepletionCallback, METH_KEYWORDS|METH_VARARGS, "SetEnergyDepletionCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetCcaBusyCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetCcaBusyCurrentA, METH_NOARGS, "GetCcaBusyCurrentA()\n\n" },
    {(char *) "SetEnergyRechargedCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetEnergyRechargedCallback, METH_KEYWORDS|METH_VARARGS, "SetEnergyRechargedCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetTxCurrentFromModel", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentFromModel, METH_KEYWORDS|METH_VARARGS, "SetTxCurrentFromModel(txPowerDbm)\n\ntype: txPowerDbm: double" },
    {(char *) "SetSleepCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetSleepCurrentA, METH_KEYWORDS|METH_VARARGS, "SetSleepCurrentA(sleepCurrentA)\n\ntype: sleepCurrentA: double" },
    {(char *) "HandleEnergyRecharged", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_HandleEnergyRecharged, METH_NOARGS, "HandleEnergyRecharged()\n\n" },
    {(char *) "HandleEnergyDepletion", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_HandleEnergyDepletion, METH_NOARGS, "HandleEnergyDepletion()\n\n" },
    {(char *) "SetIdleCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetIdleCurrentA, METH_KEYWORDS|METH_VARARGS, "SetIdleCurrentA(idleCurrentA)\n\ntype: idleCurrentA: double" },
    {(char *) "ChangeState", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_ChangeState, METH_KEYWORDS|METH_VARARGS, "ChangeState(newState)\n\ntype: newState: int" },
    {(char *) "GetTxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTxCurrentA, METH_NOARGS, "GetTxCurrentA()\n\n" },
    {(char *) "GetTotalEnergyConsumption", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTotalEnergyConsumption, METH_NOARGS, "GetTotalEnergyConsumption()\n\n" },
    {(char *) "GetSleepCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetSleepCurrentA, METH_NOARGS, "GetSleepCurrentA()\n\n" },
    {(char *) "SetRxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetRxCurrentA, METH_KEYWORDS|METH_VARARGS, "SetRxCurrentA(rxCurrentA)\n\ntype: rxCurrentA: double" },
    {(char *) "SetSwitchingCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetSwitchingCurrentA, METH_KEYWORDS|METH_VARARGS, "SetSwitchingCurrentA(switchingCurrentA)\n\ntype: switchingCurrentA: double" },
    {(char *) "HandleEnergyChanged", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_HandleEnergyChanged, METH_NOARGS, "HandleEnergyChanged()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRadioEnergyModel__tp_clear(PyNs3WifiRadioEnergyModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiRadioEnergyModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiRadioEnergyModel__tp_traverse(PyNs3WifiRadioEnergyModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WifiRadioEnergyModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiRadioEnergyModel__tp_dealloc(PyNs3WifiRadioEnergyModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRadioEnergyModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRadioEnergyModel__tp_richcompare (PyNs3WifiRadioEnergyModel *PYBINDGEN_UNUSED(self), PyNs3WifiRadioEnergyModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRadioEnergyModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRadioEnergyModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.WifiRadioEnergyModel",            /* tp_name */
    sizeof(PyNs3WifiRadioEnergyModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRadioEnergyModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WifiRadioEnergyModel(arg0)\nWifiRadioEnergyModel()",                        /* Documentation string */
    (traverseproc)PyNs3WifiRadioEnergyModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRadioEnergyModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRadioEnergyModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRadioEnergyModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRadioEnergyModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRadioEnergyModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_DoInitialize(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3YansErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    PyNs3WifiTxVector *py_WifiTxVector;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    self_obj_before = reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = const_cast< ns3::YansErrorRateModel* >((const ns3::YansErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
    py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiTxVector->obj = new ns3::WifiTxVector(txVector);
    PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NNdK", py_WifiMode, py_WifiTxVector, snr, nbits);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, txVector, snr, nbits);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3YansErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansErrorRateModel__tp_init__0(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansErrorRateModel_Type)
    {
        self->obj = new PyNs3YansErrorRateModel__PythonHelper(*((PyNs3YansErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansErrorRateModel(*((PyNs3YansErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3YansErrorRateModel__tp_init__1(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansErrorRateModel_Type)
    {
        self->obj = new PyNs3YansErrorRateModel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansErrorRateModel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3YansErrorRateModel__tp_init(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansErrorRateModel_GetChunkSuccessRate(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    PyNs3WifiTxVector *txVector;
    double snr;
    uint64_t nbits;
    PyNs3YansErrorRateModel__PythonHelper *helper_class = dynamic_cast<PyNs3YansErrorRateModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"mode", "txVector", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dK", (char **) keywords, &PyNs3WifiMode_Type, &mode, &PyNs3WifiTxVector_Type, &txVector, &snr, &nbits)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, *((PyNs3WifiTxVector *) txVector)->obj, snr, nbits)) : (self->obj->ns3::YansErrorRateModel::GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, *((PyNs3WifiTxVector *) txVector)->obj, snr, nbits));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansErrorRateModel__copy__(PyNs3YansErrorRateModel *self)
{

    PyNs3YansErrorRateModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansErrorRateModel, &PyNs3YansErrorRateModel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::YansErrorRateModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3YansErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, "GetChunkSuccessRate(mode, txVector, snr, nbits)\n\ntype: mode: ns3::WifiMode\ntype: txVector: ns3::WifiTxVector\ntype: snr: double\ntype: nbits: uint64_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansErrorRateModel__tp_clear(PyNs3YansErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansErrorRateModel__tp_traverse(PyNs3YansErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3YansErrorRateModel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansErrorRateModel__tp_dealloc(PyNs3YansErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansErrorRateModel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansErrorRateModel__tp_richcompare (PyNs3YansErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3YansErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansErrorRateModel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.YansErrorRateModel",            /* tp_name */
    sizeof(PyNs3YansErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "YansErrorRateModel(arg0)\nYansErrorRateModel()",                        /* Documentation string */
    (traverseproc)PyNs3YansErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_DoInitialize(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_DoDispose(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3YansWifiChannel__PythonHelper::GetDevice(std::size_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = const_cast< ns3::YansWifiChannel* >((const ns3::YansWifiChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "K", ((unsigned PY_LONG_LONG) i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

std::size_t
PyNs3YansWifiChannel__PythonHelper::GetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiChannel *self_obj_before;
    PyObject *py_retval;
    std::size_t retval;
    unsigned PY_LONG_LONG retval_tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNDevices"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = const_cast< ns3::YansWifiChannel* >((const ns3::YansWifiChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &retval_tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    retval = retval_tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3YansWifiChannel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiChannel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansWifiChannel__tp_init__0(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansWifiChannel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiChannel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiChannel_Type)
    {
        self->obj = new PyNs3YansWifiChannel__PythonHelper(*((PyNs3YansWifiChannel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiChannel(*((PyNs3YansWifiChannel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3YansWifiChannel__tp_init__1(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3YansWifiChannel_Type)
    {
        self->obj = new PyNs3YansWifiChannel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3YansWifiChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiChannel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3YansWifiChannel__tp_init(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiChannel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiChannel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansWifiChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_Send(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy *sender;
    ns3::YansWifiPhy *sender_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDbm;
    PyNs3Time *duration;
    const char *keywords[] = {"sender", "packet", "txPowerDbm", "duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3YansWifiPhy_Type, &sender, &PyNs3Packet_Type, &packet, &txPowerDbm, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    sender_ptr = (sender ? sender->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Send(ns3::Ptr< ns3::YansWifiPhy  > (sender_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDbm, *((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetNDevices(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    std::size_t retval;
    PyNs3YansWifiChannel__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiChannel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetNDevices()) : (self->obj->ns3::YansWifiChannel::GetNDevices());
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_Add(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy *phy;
    ns3::YansWifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->Add(ns3::Ptr< ns3::YansWifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_AssignStreams(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetDevice(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    unsigned PY_LONG_LONG i;
    PyNs3YansWifiChannel__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiChannel__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &i)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetDevice(i)) : (self->obj->ns3::YansWifiChannel::GetDevice(i));
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansWifiChannel__copy__(PyNs3YansWifiChannel *self)
{

    PyNs3YansWifiChannel *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansWifiChannel, &PyNs3YansWifiChannel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::YansWifiChannel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansWifiChannel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3YansWifiChannel_Send, METH_KEYWORDS|METH_VARARGS, "Send(sender, packet, txPowerDbm, duration)\n\ntype: sender: ns3::Ptr< ns3::YansWifiPhy >\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: txPowerDbm: double\ntype: duration: ns3::Time" },
    {(char *) "GetNDevices", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetNDevices, METH_NOARGS, "GetNDevices()\n\n" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3YansWifiChannel_Add, METH_KEYWORDS|METH_VARARGS, "Add(phy)\n\ntype: phy: ns3::Ptr< ns3::YansWifiPhy >" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3YansWifiChannel_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetDevice, METH_KEYWORDS|METH_VARARGS, "GetDevice(i)\n\ntype: i: std::size_t" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansWifiChannel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansWifiChannel__tp_clear(PyNs3YansWifiChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansWifiChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansWifiChannel__tp_traverse(PyNs3YansWifiChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3YansWifiChannel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansWifiChannel__tp_dealloc(PyNs3YansWifiChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansWifiChannel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiChannel__tp_richcompare (PyNs3YansWifiChannel *PYBINDGEN_UNUSED(self), PyNs3YansWifiChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiChannel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.YansWifiChannel",            /* tp_name */
    sizeof(PyNs3YansWifiChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "YansWifiChannel(arg0)\nYansWifiChannel()",                        /* Documentation string */
    (traverseproc)PyNs3YansWifiChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansWifiChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansWifiChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_TxOk(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxOk of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxOk__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_DoInitialize(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_SetQosSupported(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetQosSupported of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetQosSupported__parent_caller(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_TxFailed(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxFailed of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxFailed__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_DoDispose(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"aggregatedPacket", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DeaggregateAmsduAndForward of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_FinishConfigureStandard(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FinishConfigureStandard of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FinishConfigureStandard__parent_caller(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


void
PyNs3AdhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::AdhocWifiMac::Enqueue(packet, to);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Mac48Address
PyNs3AdhocWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3AdhocWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3AdhocWifiMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3AdhocWifiMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3AdhocWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3AdhocWifiMac__PythonHelper::GetRifsSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifsSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifsSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3AdhocWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ssid
PyNs3AdhocWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3AdhocWifiMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxOk(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxFailed(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetQosSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetQosSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetQosSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetQosSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    if (typeid(*(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = (PyNs3WifiPhy*) (((PyNs3WifiPhy__PythonHelper*) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3AdhocWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3AdhocWifiMac__tp_init(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3AdhocWifiMac_Type)
    {
        self->obj = new PyNs3AdhocWifiMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3AdhocWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'AdhocWifiMac' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_Enqueue(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::AdhocWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AdhocWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetLinkUpCallback(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl4> linkUp_cb_impl;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl4> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::AdhocWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetAddress(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::AdhocWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3AdhocWifiMac_methods[] = {
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3AdhocWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, to)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: to: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkUpCallback(linkUp)\n\ntype: linkUp: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "TxOk", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_TxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "SetQosSupported", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_SetQosSupported, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TxFailed", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_TxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "DeaggregateAmsduAndForward", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "FinishConfigureStandard", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AdhocWifiMac__tp_clear(PyNs3AdhocWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AdhocWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AdhocWifiMac__tp_traverse(PyNs3AdhocWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3AdhocWifiMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3AdhocWifiMac__tp_dealloc(PyNs3AdhocWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AdhocWifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AdhocWifiMac__tp_richcompare (PyNs3AdhocWifiMac *PYBINDGEN_UNUSED(self), PyNs3AdhocWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AdhocWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AdhocWifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.AdhocWifiMac",            /* tp_name */
    sizeof(PyNs3AdhocWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AdhocWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "AdhocWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3AdhocWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AdhocWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AdhocWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AdhocWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AdhocWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AdhocWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *arg0;
    ns3::Packet *arg0_ptr;
    double arg1;
    PyNs3WifiMode *arg2;
    ns3::WifiPreamble arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!i", (char **) keywords, &PyNs3Packet_Type, &arg0, &arg1, &PyNs3WifiMode_Type, &arg2, &arg3)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->operator()(ns3::Ptr< ns3::Packet  > (arg0_ptr), arg1, *((PyNs3WifiMode *) arg2)->obj, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *arg0;
    ns3::Packet *arg0_ptr;
    PyNs3WifiMode *arg1;
    ns3::WifiPreamble arg2;
    int arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!ii", (char **) keywords, &PyNs3Packet_Type, &arg0, &PyNs3WifiMode_Type, &arg1, &arg2, &arg3)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    if (arg3 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->operator()(ns3::Ptr< ns3::Packet  > (arg0_ptr), *((PyNs3WifiMode *) arg1)->obj, arg2, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__(PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *arg0;
    ns3::Packet *arg0_ptr;
    double arg1;
    PyNs3WifiTxVector *arg2;
    const char *keywords[] = {"arg0", "arg1", "arg2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &arg0, &arg1, &PyNs3WifiTxVector_Type, &arg2)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->operator()(ns3::Ptr< ns3::Packet  > (arg0_ptr), arg1, *((PyNs3WifiTxVector *) arg2)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty___call__,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CallbackImpl' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >::DoGetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid(PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeid();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods[] = {
    {(char *) "DoGetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_DoGetTypeid, METH_NOARGS|METH_STATIC, "DoGetTypeid()\n\n" },
    {(char *) "GetTypeid", (PyCFunction) _wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_GetTypeid, METH_NOARGS, "GetTypeid()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc(PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare (PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *PYBINDGEN_UNUSED(self), PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty",            /* tp_name */
    sizeof(PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty(arg0)\nCallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3InfrastructureWifiMac *self)
{
    PyObject *py_retval;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_TxOk(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxOk of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxOk__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_Receive(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DoInitialize(PyNs3InfrastructureWifiMac *self)
{
    PyObject *py_retval;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3InfrastructureWifiMac *self)
{
    PyObject *py_retval;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_TxFailed(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxFailed of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxFailed__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DoDispose(PyNs3InfrastructureWifiMac *self)
{
    PyObject *py_retval;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"aggregatedPacket", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DeaggregateAmsduAndForward of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3InfrastructureWifiMac__PythonHelper::_wrap_FinishConfigureStandard(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3InfrastructureWifiMac__PythonHelper *helper = dynamic_cast< PyNs3InfrastructureWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FinishConfigureStandard of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FinishConfigureStandard__parent_caller(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::InfrastructureWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = (ns3::InfrastructureWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetQosSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::InfrastructureWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetQosSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::InfrastructureWifiMac::SetQosSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = (ns3::InfrastructureWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetQosSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Mac48Address
PyNs3InfrastructureWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3InfrastructureWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3InfrastructureWifiMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3InfrastructureWifiMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3InfrastructureWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3InfrastructureWifiMac__PythonHelper::GetRifsSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifsSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifsSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3InfrastructureWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ssid
PyNs3InfrastructureWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3InfrastructureWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3InfrastructureWifiMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Receive(packet, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxOk(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxFailed(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    if (typeid(*(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = (PyNs3WifiPhy*) (((PyNs3WifiPhy__PythonHelper*) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3InfrastructureWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3InfrastructureWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3InfrastructureWifiMac__tp_init(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3InfrastructureWifiMac_Type)
    {
        self->obj = new PyNs3InfrastructureWifiMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3InfrastructureWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'InfrastructureWifiMac' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3InfrastructureWifiMac_GetPcfSupported(PyNs3InfrastructureWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetPcfSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3InfrastructureWifiMac_Enqueue(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InfrastructureWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::InfrastructureWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3InfrastructureWifiMac_SetQosSupported(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    PyNs3InfrastructureWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3InfrastructureWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    (helper_class == NULL)? (self->obj->SetQosSupported(enable)) : (self->obj->ns3::InfrastructureWifiMac::SetQosSupported(enable));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InfrastructureWifiMac_SetPcfSupported(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetPcfSupported(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3InfrastructureWifiMac_methods[] = {
    {(char *) "GetPcfSupported", (PyCFunction) _wrap_PyNs3InfrastructureWifiMac_GetPcfSupported, METH_NOARGS, "GetPcfSupported()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3InfrastructureWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, to)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: to: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3InfrastructureWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetQosSupported", (PyCFunction) _wrap_PyNs3InfrastructureWifiMac_SetQosSupported, METH_KEYWORDS|METH_VARARGS, "SetQosSupported(enable)\n\ntype: enable: bool" },
    {(char *) "SetPcfSupported", (PyCFunction) _wrap_PyNs3InfrastructureWifiMac_SetPcfSupported, METH_KEYWORDS|METH_VARARGS, "SetPcfSupported(enable)\n\ntype: enable: bool" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "TxOk", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_TxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "TxFailed", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_TxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "DeaggregateAmsduAndForward", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "FinishConfigureStandard", (PyCFunction) PyNs3InfrastructureWifiMac__PythonHelper::_wrap_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3InfrastructureWifiMac__tp_clear(PyNs3InfrastructureWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::InfrastructureWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3InfrastructureWifiMac__tp_traverse(PyNs3InfrastructureWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3InfrastructureWifiMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3InfrastructureWifiMac__tp_dealloc(PyNs3InfrastructureWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3InfrastructureWifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3InfrastructureWifiMac__tp_richcompare (PyNs3InfrastructureWifiMac *PYBINDGEN_UNUSED(self), PyNs3InfrastructureWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3InfrastructureWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3InfrastructureWifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.InfrastructureWifiMac",            /* tp_name */
    sizeof(PyNs3InfrastructureWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3InfrastructureWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "InfrastructureWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3InfrastructureWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3InfrastructureWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3InfrastructureWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3InfrastructureWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3InfrastructureWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3InfrastructureWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3StaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_TxOk(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxOk of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxOk__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3StaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_TxFailed(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxFailed of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxFailed__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_DoDispose(PyNs3StaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"aggregatedPacket", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DeaggregateAmsduAndForward of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3StaWifiMac__PythonHelper::_wrap_FinishConfigureStandard(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3StaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3StaWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FinishConfigureStandard of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FinishConfigureStandard__parent_caller(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3StaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::StaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::StaWifiMac::Enqueue(packet, to);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = (ns3::StaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::StaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = (ns3::StaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::StaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = (ns3::StaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3StaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetQosSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::InfrastructureWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetQosSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::InfrastructureWifiMac::SetQosSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = (ns3::InfrastructureWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetQosSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Mac48Address
PyNs3StaWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3StaWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3StaWifiMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3StaWifiMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3StaWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3StaWifiMac__PythonHelper::GetRifsSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifsSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifsSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3StaWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ssid
PyNs3StaWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3StaWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3StaWifiMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxOk(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxFailed(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    if (typeid(*(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = (PyNs3WifiPhy*) (((PyNs3WifiPhy__PythonHelper*) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3StaWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3StaWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3StaWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3StaWifiMac__tp_init(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3StaWifiMac_Type)
    {
        self->obj = new PyNs3StaWifiMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3StaWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'StaWifiMac' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3StaWifiMac_Enqueue(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3StaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3StaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::StaWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3StaWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::StaWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}

static PyMethodDef PyNs3StaWifiMac_methods[] = {
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3StaWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, to)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: to: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3StaWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "TxOk", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_TxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "TxFailed", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_TxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "DeaggregateAmsduAndForward", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_DeaggregateAmsduAndForward, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "FinishConfigureStandard", (PyCFunction) PyNs3StaWifiMac__PythonHelper::_wrap_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3StaWifiMac__tp_clear(PyNs3StaWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::StaWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3StaWifiMac__tp_traverse(PyNs3StaWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3StaWifiMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3StaWifiMac__tp_dealloc(PyNs3StaWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3StaWifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3StaWifiMac__tp_richcompare (PyNs3StaWifiMac *PYBINDGEN_UNUSED(self), PyNs3StaWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3StaWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3StaWifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.StaWifiMac",            /* tp_name */
    sizeof(PyNs3StaWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3StaWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "StaWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3StaWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3StaWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3StaWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3StaWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3StaWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3StaWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ApWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    PyNs3ApWifiMac__PythonHelper *helper = dynamic_cast< PyNs3ApWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ApWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    PyNs3ApWifiMac__PythonHelper *helper = dynamic_cast< PyNs3ApWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ApWifiMac__PythonHelper::_wrap_FinishConfigureStandard(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3ApWifiMac__PythonHelper *helper = dynamic_cast< PyNs3ApWifiMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FinishConfigureStandard of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FinishConfigureStandard__parent_caller(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


void
PyNs3ApWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ApWifiMac::Enqueue(packet, to);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ApWifiMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3ApWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ApWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = const_cast< ns3::ApWifiMac* >((const ns3::ApWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ApWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ApWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ApWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ApWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = (ns3::ApWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ApWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetQosSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::InfrastructureWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetQosSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::InfrastructureWifiMac::SetQosSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = (ns3::InfrastructureWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetQosSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3InfrastructureWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Mac48Address
PyNs3ApWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3ApWifiMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3ApWifiMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3ApWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3ApWifiMac__PythonHelper::GetRifsSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifsSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifsSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifsSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3ApWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ssid
PyNs3ApWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3ApWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3ApWifiMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    if (typeid(*(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))).name() == typeid(PyNs3WifiPhy__PythonHelper).name())
    {
        py_WifiPhy = (PyNs3WifiPhy*) (((PyNs3WifiPhy__PythonHelper*) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)))->m_pyself);
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        Py_INCREF(py_WifiPhy);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiPhy = NULL;
        } else {
            py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPhy);
        }
    
        if (py_WifiPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
            py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
            py_WifiPhy->inst_dict = NULL;
    
            py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
            py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3ApWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ApWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ApWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3ApWifiMac__tp_init(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ApWifiMac_Type)
    {
        self->obj = new PyNs3ApWifiMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ApWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ApWifiMac' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetVhtOperationalChannelWidth(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetVhtOperationalChannelWidth();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_SetCfpMaxDuration(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &duration)) {
        return NULL;
    }
    self->obj->SetCfpMaxDuration(*((PyNs3Time *) duration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ApWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetBeaconInterval(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_SetBeaconInterval(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval)) {
        return NULL;
    }
    self->obj->SetBeaconInterval(*((PyNs3Time *) interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_IsNonGfHtStasPresent(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsNonGfHtStasPresent();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3ApWifiMac_Enqueue__0(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3ApWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3ApWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::ApWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3ApWifiMac_Enqueue__1(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3ApWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3ApWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::ApWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3ApWifiMac_Enqueue(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ApWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ApWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3ApWifiMac_SupportsSendFrom(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3ApWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3ApWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::ApWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetCfpMaxDuration(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCfpMaxDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_AssignStreams(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_SetAddress(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3ApWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3ApWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::ApWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_SetLinkUpCallback(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl4> linkUp_cb_impl;
    PyNs3ApWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3ApWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl4> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::ApWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetShortPreambleEnabled(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortPreambleEnabled();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ApWifiMac_GetShortSlotTimeEnabled(PyNs3ApWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetShortSlotTimeEnabled();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3ApWifiMac_methods[] = {
    {(char *) "GetVhtOperationalChannelWidth", (PyCFunction) _wrap_PyNs3ApWifiMac_GetVhtOperationalChannelWidth, METH_NOARGS, "GetVhtOperationalChannelWidth()\n\n" },
    {(char *) "SetCfpMaxDuration", (PyCFunction) _wrap_PyNs3ApWifiMac_SetCfpMaxDuration, METH_KEYWORDS|METH_VARARGS, "SetCfpMaxDuration(duration)\n\ntype: duration: ns3::Time" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ApWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3ApWifiMac_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3ApWifiMac_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, "SetBeaconInterval(interval)\n\ntype: interval: ns3::Time" },
    {(char *) "IsNonGfHtStasPresent", (PyCFunction) _wrap_PyNs3ApWifiMac_IsNonGfHtStasPresent, METH_NOARGS, "IsNonGfHtStasPresent()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3ApWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3ApWifiMac_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "GetCfpMaxDuration", (PyCFunction) _wrap_PyNs3ApWifiMac_GetCfpMaxDuration, METH_NOARGS, "GetCfpMaxDuration()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3ApWifiMac_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3ApWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3ApWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkUpCallback(linkUp)\n\ntype: linkUp: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetShortPreambleEnabled", (PyCFunction) _wrap_PyNs3ApWifiMac_GetShortPreambleEnabled, METH_NOARGS, "GetShortPreambleEnabled()\n\n" },
    {(char *) "GetShortSlotTimeEnabled", (PyCFunction) _wrap_PyNs3ApWifiMac_GetShortSlotTimeEnabled, METH_NOARGS, "GetShortSlotTimeEnabled()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ApWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ApWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "FinishConfigureStandard", (PyCFunction) PyNs3ApWifiMac__PythonHelper::_wrap_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ApWifiMac__tp_clear(PyNs3ApWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ApWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ApWifiMac__tp_traverse(PyNs3ApWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3ApWifiMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ApWifiMac__tp_dealloc(PyNs3ApWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ApWifiMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ApWifiMac__tp_richcompare (PyNs3ApWifiMac *PYBINDGEN_UNUSED(self), PyNs3ApWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ApWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ApWifiMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.ApWifiMac",            /* tp_name */
    sizeof(PyNs3ApWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ApWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ApWifiMac()",                        /* Documentation string */
    (traverseproc)PyNs3ApWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ApWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ApWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ApWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ApWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ApWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pyns3__HtMinstrelRateIter__tp_clear(Pyns3__HtMinstrelRateIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__HtMinstrelRateIter__tp_traverse(Pyns3__HtMinstrelRateIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__HtMinstrelRate__tp_dealloc(Pyns3__HtMinstrelRate *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__HtMinstrelRateIter__tp_dealloc(Pyns3__HtMinstrelRateIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__HtMinstrelRate__tp_iter(Pyns3__HtMinstrelRate *self)
{
    Pyns3__HtMinstrelRateIter *iter = PyObject_GC_New(Pyns3__HtMinstrelRateIter, &Pyns3__HtMinstrelRateIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::HtMinstrelRate::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__HtMinstrelRateIter__tp_iter(Pyns3__HtMinstrelRateIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__HtMinstrelRateIter__tp_iternext(Pyns3__HtMinstrelRateIter *self)
{
    PyObject *py_retval;
    ns3::HtMinstrelRate::iterator iter;
    PyNs3HtRateInfo *py_HtRateInfo;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_HtRateInfo = PyObject_New(PyNs3HtRateInfo, &PyNs3HtRateInfo_Type);
    py_HtRateInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_HtRateInfo->obj = new ns3::HtRateInfo((*iter));
    PyNs3HtRateInfo_wrapper_registry[(void *) py_HtRateInfo->obj] = (PyObject *) py_HtRateInfo;
    py_retval = Py_BuildValue((char *) "N", py_HtRateInfo);
    return py_retval;
}

int _wrap_convert_py2c__ns3__HtRateInfo(PyObject *value, ns3::HtRateInfo *address)
{
    PyObject *py_retval;
    PyNs3HtRateInfo *tmp_HtRateInfo;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3HtRateInfo_Type, &tmp_HtRateInfo)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_HtRateInfo->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__HtMinstrelRate(PyObject *arg, ns3::HtMinstrelRate *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__HtMinstrelRate_Type)) {
        *container = *((Pyns3__HtMinstrelRate*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::HtRateInfo item;
            if (!_wrap_convert_py2c__ns3__HtRateInfo(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__HtMinstrelRate instance, or a list of ns3::HtRateInfo");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__HtMinstrelRate__tp_init(Pyns3__HtMinstrelRate *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::HtMinstrelRate;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__HtMinstrelRate(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__HtMinstrelRate_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__HtMinstrelRate",            /* tp_name */
    sizeof(Pyns3__HtMinstrelRate),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__HtMinstrelRate__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__HtMinstrelRate__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__HtMinstrelRate__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__HtMinstrelRateIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__HtMinstrelRateIter",            /* tp_name */
    sizeof(Pyns3__HtMinstrelRateIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__HtMinstrelRateIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__HtMinstrelRateIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__HtMinstrelRateIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__HtMinstrelRateIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__HtMinstrelRateIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__TxTimeIter__tp_clear(Pyns3__TxTimeIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__TxTimeIter__tp_traverse(Pyns3__TxTimeIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__TxTime__tp_dealloc(Pyns3__TxTime *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__TxTimeIter__tp_dealloc(Pyns3__TxTimeIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__TxTime__tp_iter(Pyns3__TxTime *self)
{
    Pyns3__TxTimeIter *iter = PyObject_GC_New(Pyns3__TxTimeIter, &Pyns3__TxTimeIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::TxTime::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__TxTimeIter__tp_iter(Pyns3__TxTimeIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__TxTimeIter__tp_iternext(Pyns3__TxTimeIter *self)
{
    PyObject *py_retval;
    ns3::TxTime::iterator iter;
    PyNs3Time *py_Time;
    PyNs3WifiMode *py_WifiMode;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(iter->second);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(iter->first);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "NN", py_WifiMode, py_Time);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Time(PyObject *value, ns3::Time *address)
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address)
{
    PyObject *py_retval;
    PyNs3WifiMode *tmp_WifiMode;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMode_Type, &tmp_WifiMode)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_WifiMode->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__TxTime(PyObject *arg, ns3::TxTime *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__TxTime_Type)) {
        *container = *((Pyns3__TxTime*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< ns3::WifiMode, ns3::Time > item;
            if (!_wrap_convert_py2c__ns3__WifiMode(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__ns3__Time(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__TxTime instance, or a list of ns3::Time");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__TxTime__tp_init(Pyns3__TxTime *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::TxTime;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__TxTime(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__TxTime_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__TxTime",            /* tp_name */
    sizeof(Pyns3__TxTime),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__TxTime__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__TxTime__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__TxTime__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__TxTimeIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__TxTimeIter",            /* tp_name */
    sizeof(Pyns3__TxTimeIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__TxTimeIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__TxTimeIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__TxTimeIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__TxTimeIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__TxTimeIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__WifiModeListIter__tp_clear(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__WifiModeListIter__tp_traverse(Pyns3__WifiModeListIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__WifiModeList__tp_dealloc(Pyns3__WifiModeList *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__WifiModeListIter__tp_dealloc(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__WifiModeList__tp_iter(Pyns3__WifiModeList *self)
{
    Pyns3__WifiModeListIter *iter = PyObject_GC_New(Pyns3__WifiModeListIter, &Pyns3__WifiModeListIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::WifiModeList::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__WifiModeListIter__tp_iter(Pyns3__WifiModeListIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__WifiModeListIter__tp_iternext(Pyns3__WifiModeListIter *self)
{
    PyObject *py_retval;
    ns3::WifiModeList::iterator iter;
    PyNs3WifiMode *py_WifiMode;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode((*iter));
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__WifiModeList_Type)) {
        *container = *((Pyns3__WifiModeList*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::WifiMode item;
            if (!_wrap_convert_py2c__ns3__WifiMode(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__WifiModeList instance, or a list of ns3::WifiMode");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__WifiModeList__tp_init(Pyns3__WifiModeList *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::WifiModeList;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__WifiModeList(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__WifiModeList_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__WifiModeList",            /* tp_name */
    sizeof(Pyns3__WifiModeList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeList__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__WifiModeList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__WifiModeListIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__WifiModeListIter",            /* tp_name */
    sizeof(Pyns3__WifiModeListIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeListIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__WifiModeListIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__WifiModeListIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeListIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__WifiModeListIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__MinstrelRateIter__tp_clear(Pyns3__MinstrelRateIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__MinstrelRateIter__tp_traverse(Pyns3__MinstrelRateIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__MinstrelRate__tp_dealloc(Pyns3__MinstrelRate *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__MinstrelRateIter__tp_dealloc(Pyns3__MinstrelRateIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__MinstrelRate__tp_iter(Pyns3__MinstrelRate *self)
{
    Pyns3__MinstrelRateIter *iter = PyObject_GC_New(Pyns3__MinstrelRateIter, &Pyns3__MinstrelRateIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::MinstrelRate::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__MinstrelRateIter__tp_iter(Pyns3__MinstrelRateIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__MinstrelRateIter__tp_iternext(Pyns3__MinstrelRateIter *self)
{
    PyObject *py_retval;
    ns3::MinstrelRate::iterator iter;
    PyNs3RateInfo *py_RateInfo;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_RateInfo = PyObject_New(PyNs3RateInfo, &PyNs3RateInfo_Type);
    py_RateInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_RateInfo->obj = new ns3::RateInfo((*iter));
    PyNs3RateInfo_wrapper_registry[(void *) py_RateInfo->obj] = (PyObject *) py_RateInfo;
    py_retval = Py_BuildValue((char *) "N", py_RateInfo);
    return py_retval;
}

int _wrap_convert_py2c__ns3__RateInfo(PyObject *value, ns3::RateInfo *address)
{
    PyObject *py_retval;
    PyNs3RateInfo *tmp_RateInfo;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3RateInfo_Type, &tmp_RateInfo)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_RateInfo->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__MinstrelRate(PyObject *arg, ns3::MinstrelRate *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__MinstrelRate_Type)) {
        *container = *((Pyns3__MinstrelRate*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::RateInfo item;
            if (!_wrap_convert_py2c__ns3__RateInfo(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__MinstrelRate instance, or a list of ns3::RateInfo");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__MinstrelRate__tp_init(Pyns3__MinstrelRate *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::MinstrelRate;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__MinstrelRate(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__MinstrelRate_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__MinstrelRate",            /* tp_name */
    sizeof(Pyns3__MinstrelRate),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__MinstrelRate__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__MinstrelRate__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__MinstrelRate__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__MinstrelRateIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__MinstrelRateIter",            /* tp_name */
    sizeof(Pyns3__MinstrelRateIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__MinstrelRateIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__MinstrelRateIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__MinstrelRateIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__MinstrelRateIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__MinstrelRateIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___double___gt__Iter__tp_clear(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___double___gt__Iter__tp_traverse(Pystd__vector__lt___double___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___double___gt____tp_dealloc(Pystd__vector__lt___double___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___double___gt__Iter__tp_dealloc(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___double___gt____tp_iter(Pystd__vector__lt___double___gt__ *self)
{
    Pystd__vector__lt___double___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___double___gt__Iter, &Pystd__vector__lt___double___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< double >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___double___gt__Iter__tp_iter(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___double___gt__Iter__tp_iternext(Pystd__vector__lt___double___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< double >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "d", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__double(PyObject *value, double *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___double___gt___Type)) {
        *container = *((Pystd__vector__lt___double___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            double item;
            if (!_wrap_convert_py2c__double(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___double___gt__ instance, or a list of double");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___double___gt____tp_init(Pystd__vector__lt___double___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< double >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___double___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___double___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___double___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___double___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___double___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___double___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___double___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___double___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___double___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___double___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___double___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___double___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___double___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___double___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___double___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__BandsIter__tp_clear(Pyns3__BandsIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__BandsIter__tp_traverse(Pyns3__BandsIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__Bands__tp_dealloc(Pyns3__Bands *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__BandsIter__tp_dealloc(Pyns3__BandsIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__Bands__tp_iter(Pyns3__Bands *self)
{
    Pyns3__BandsIter *iter = PyObject_GC_New(Pyns3__BandsIter, &Pyns3__BandsIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::Bands::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__BandsIter__tp_iter(Pyns3__BandsIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__BandsIter__tp_iternext(Pyns3__BandsIter *self)
{
    PyObject *py_retval;
    ns3::Bands::iterator iter;
    PyNs3BandInfo *py_BandInfo;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_BandInfo = PyObject_New(PyNs3BandInfo, &PyNs3BandInfo_Type);
    py_BandInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_BandInfo->obj = new ns3::BandInfo((*iter));
    PyNs3BandInfo_wrapper_registry[(void *) py_BandInfo->obj] = (PyObject *) py_BandInfo;
    py_retval = Py_BuildValue((char *) "N", py_BandInfo);
    return py_retval;
}

int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address)
{
    PyObject *py_retval;
    PyNs3BandInfo *tmp_BandInfo;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BandInfo_Type, &tmp_BandInfo)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_BandInfo->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__Bands_Type)) {
        *container = *((Pyns3__Bands*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::BandInfo item;
            if (!_wrap_convert_py2c__ns3__BandInfo(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__Bands instance, or a list of ns3::BandInfo");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__Bands__tp_init(Pyns3__Bands *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::Bands;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__Bands(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__Bands_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__Bands",            /* tp_name */
    sizeof(Pyns3__Bands),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__Bands__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__Bands__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__Bands__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__BandsIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Ns3__BandsIter",            /* tp_name */
    sizeof(Pyns3__BandsIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__BandsIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__BandsIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__BandsIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__BandsIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__BandsIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___unsigned_short___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_short___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_short___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_short___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_short___gt____tp_dealloc(Pystd__vector__lt___unsigned_short___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_short___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_short___gt____tp_iter(Pystd__vector__lt___unsigned_short___gt__ *self)
{
    Pystd__vector__lt___unsigned_short___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_short___gt__Iter, &Pystd__vector__lt___unsigned_short___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned short >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_short___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_short___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned short >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "i", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address)
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return 0;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return 0;
    }
    *address = tmp;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_short___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_short___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            short unsigned int item;
            if (!_wrap_convert_py2c__short_unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_short___gt__ instance, or a list of short unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_short___gt____tp_init(Pystd__vector__lt___unsigned_short___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned short >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___unsigned_short___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_short___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_short___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_short___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_short___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___unsigned_short___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_short___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_short___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_short___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_short___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_clear(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_traverse(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_dealloc(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_dealloc(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_iter(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self)
{
    Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter, &Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< ns3::Mac48Address, bool >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iter(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iternext(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< ns3::Mac48Address, bool >::iterator iter;
    PyNs3Mac48Address *py_Mac48Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(iter->first);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "NN", py_Mac48Address, PyBool_FromLong(iter->second));
    return py_retval;
}

int _wrap_convert_py2c__bool(PyObject *value, bool *address)
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__Mac48Address(PyObject *value, ns3::Mac48Address *address)
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(PyObject *arg, std::map< ns3::Mac48Address, bool > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___ns3__Mac48Address__bool___gt___Type)) {
        *container = *((Pystd__map__lt___ns3__Mac48Address__bool___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< ns3::Mac48Address, bool > item;
            if (!_wrap_convert_py2c__ns3__Mac48Address(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__bool(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___ns3__Mac48Address__bool___gt__ instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_init(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< ns3::Mac48Address, bool >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__map__lt___ns3__Mac48Address__bool___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Mac48Address__bool___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__map__lt___ns3__Mac48Address__bool___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___unsigned_char___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_char___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_char___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_char___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_char___gt____tp_dealloc(Pystd__vector__lt___unsigned_char___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_char___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_char___gt____tp_iter(Pystd__vector__lt___unsigned_char___gt__ *self)
{
    Pystd__vector__lt___unsigned_char___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_char___gt__Iter, &Pystd__vector__lt___unsigned_char___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned char >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_char___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_char___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned char >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "i", (int)(*iter));
    return py_retval;
}

int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address)
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return 0;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return 0;
    }
    *address = tmp;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___unsigned_char___gt__(PyObject *arg, std::vector< unsigned char > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_char___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_char___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned char item;
            if (!_wrap_convert_py2c__unsigned_char(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_char___gt__ instance, or a list of unsigned char");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_char___gt____tp_init(Pystd__vector__lt___unsigned_char___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned char >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_char___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_char___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___unsigned_char___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_char___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_char___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_char___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_char___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_char___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wifi.Std__vector__lt___unsigned_char___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_char___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_char___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_char___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_char___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */









































































#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wifi_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wifi",
    NULL,
    -1,
    wifi_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(wifi)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wifi_moduledef);
    #else
    m = Py_InitModule3((char *) "wifi", wifi_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    /* Import the 'ns3::Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Angles' class from module 'ns.antenna' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.antenna");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Angles_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Angles");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Angles_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Angles_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Angles_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeConstructionList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList::Item' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionListItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionListItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionListItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionListItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::BandInfo' class from module 'ns.spectrum' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.spectrum");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BandInfo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BandInfo");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BandInfo_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BandInfo_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BandInfo_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Buffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Buffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Buffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Buffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Buffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BufferIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BufferIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BufferIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BufferIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CallbackBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CallbackBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CallbackBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CallbackBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DataRate' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DataRate_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DataRate");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DataRate_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DataRate_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DataRate_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::AttributeAccessor >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::AttributeChecker >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::AttributeValue >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::CallbackImplBase >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::EventImpl >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::Hash::Implementation >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3HashImplementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::NixVector >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::OutputStreamWrapper >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3OutputStreamWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::Packet >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3Packet_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3Packet_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::SpectrumModel >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3SpectrumModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3SpectrumModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DefaultDeleter< ns3::TraceSourceAccessor >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DefaultDeleter__Ns3TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DeviceEnergyModelContainer' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeviceEnergyModelContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeviceEnergyModelContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DeviceEnergyModelContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DeviceEnergyModelContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DeviceEnergyModelContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::DeviceEnergyModelHelper' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeviceEnergyModelHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeviceEnergyModelHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3DeviceEnergyModelHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3DeviceEnergyModelHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3DeviceEnergyModelHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EnergySourceHelper' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnergySourceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnergySourceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EnergySourceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EnergySourceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EnergySourceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Hasher' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Hasher_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hasher");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Hasher_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Hasher_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Hasher_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Mask' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Mask_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Mask");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Mask_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Mask_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Mask_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Prefix' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Prefix_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Prefix");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Prefix_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Prefix_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Prefix_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::LogComponent' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogComponent_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogComponent");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3LogComponent_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3LogComponent_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3LogComponent_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Mac48Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Mac48Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Mac48Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Mac48Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Mac8Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac8Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac8Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Mac8Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Mac8Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Mac8Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NetDeviceContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NetDeviceContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NetDeviceContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NetDeviceContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NodeContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NodeContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NodeContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectDeleter' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectDeleter_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectDeleter_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectDeleter_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectFactory' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadata_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketMetadata");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadata_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadata_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadata_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::ItemIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItemIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItemIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItemIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList::TagData' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagListTagData_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagData");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagListTagData_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagListTagData_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagListTagData_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ParameterLogger' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParameterLogger_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParameterLogger");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ParameterLogger_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ParameterLogger_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ParameterLogger_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapFile' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFile_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFile");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapFile_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapFile_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapFile_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PropagationCache< ns3::JakesProcess >' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PropagationCache__Ns3JakesProcess_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PropagationCache__Ns3JakesProcess");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::QueueSize' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueSize_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueSize");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3QueueSize_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3QueueSize_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3QueueSize_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Simulator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Simulator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Simulator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Simulator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Simulator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Simulator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Tag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Tag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Tag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TagBuffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TagBuffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagBuffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TagBuffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TagBuffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TagBuffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TimeWithUnit' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeWithUnit_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeWithUnit");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TimeWithUnit_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TimeWithUnit_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TimeWithUnit_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TracedValue< double >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TracedValue__Double_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TracedValue__Double");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TracedValue__Double_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TracedValue__Double_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TracedValue__Double_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TracedValue< unsigned int >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TracedValue__Unsigned_int_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TracedValue__Unsigned_int");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TracedValue__Unsigned_int_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TracedValue< unsigned long >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TracedValue__Unsigned_long_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TracedValue__Unsigned_long");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TracedValue__Unsigned_long_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TracedValue__Unsigned_long_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TracedValue__Unsigned_long_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::AttributeInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdAttributeInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdAttributeInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::TraceSourceInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdTraceSourceInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdTraceSourceInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector2D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector2D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector2D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector2D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector3D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector3D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector3D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector3D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::empty' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Empty_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Empty_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Empty_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::int64x64_t' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Int64x64_t_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "int64x64_t");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Int64x64_t_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Int64x64_t_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Int64x64_t_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Chunk' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Chunk_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Chunk");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Header' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object::AggregateIterator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectAggregateIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AggregateIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectAggregateIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectAggregateIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectAggregateIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapFileWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFileWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFileWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::PropagationDelayModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PropagationDelayModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PropagationDelayModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::PropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueBase' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomPropagationDelayModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomPropagationDelayModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomPropagationDelayModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableStream' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableStream_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableStream");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RangePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RangePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RangePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SequentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SpectrumModel' class from module 'ns.spectrum' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.spectrum");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SpectrumModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SpectrumModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SpectrumPhy' class from module 'ns.spectrum' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.spectrum");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SpectrumPhy_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SpectrumPhy");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SpectrumSignalParameters' class from module 'ns.spectrum' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.spectrum");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SpectrumSignalParameters_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SpectrumSignalParameters");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ThreeLogDistancePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ThreeLogDistancePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ThreeLogDistancePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Time_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Time_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Time_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TraceSourceAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Trailer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Trailer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Trailer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TriangularRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TriangularRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TriangularRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TwoRayGroundPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TwoRayGroundPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TwoRayGroundPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UniformRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UniformRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UniformRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WeibullRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WeibullRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WeibullRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZetaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZetaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZetaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZipfRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZipfRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZipfRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AntennaModel' class from module 'ns.antenna' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.antenna");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AntennaModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AntennaModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImplBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Channel' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Channel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Channel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantSpeedPropagationDelayModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantSpeedPropagationDelayModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantSpeedPropagationDelayModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Cost231PropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Cost231PropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Cost231PropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DataRateChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DataRateChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DataRateChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DataRateValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DataRateValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DataRateValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeterministicRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeterministicRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeterministicRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeviceEnergyModel' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeviceEnergyModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeviceEnergyModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DoubleValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DoubleValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DoubleValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmpiricalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmpiricalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmpiricalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnergyHarvester' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnergyHarvester_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnergyHarvester");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnergySource' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnergySource_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnergySource");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnergySourceContainer' class from module 'ns.energy' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.energy");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnergySourceContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnergySourceContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErlangRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErlangRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErlangRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EventImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExponentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExponentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExponentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::FixedRssLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3FixedRssLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "FixedRssLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::FriisPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3FriisPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "FriisPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::GammaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3GammaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "GammaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IntegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ItuR1411LosPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ItuR1411LosPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItuR1411LosPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ItuR1411NlosOverRooftopPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItuR1411NlosOverRooftopPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::JakesProcess' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3JakesProcess_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "JakesProcess");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::JakesPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3JakesPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "JakesPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Kun2600MhzPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Kun2600MhzPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Kun2600MhzPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogDistancePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogDistancePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogDistancePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogNormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogNormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogNormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MatrixPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MatrixPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MatrixPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MobilityModel' class from module 'ns.mobility' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.mobility");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MobilityModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MobilityModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NakagamiPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NakagamiPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NakagamiPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NixVector' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::OkumuraHataPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OkumuraHataPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OkumuraHataPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::OutputStreamWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OutputStreamWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OutputStreamWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Packet' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ParetoRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParetoRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParetoRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueSizeChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueSizeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueSizeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueSizeValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueSizeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueSizeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SpectrumChannel' class from module 'ns.spectrum' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.spectrum");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SpectrumChannel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SpectrumChannel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TimeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UintegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UintegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UintegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, bool, unsigned int, double, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, double, double, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::DataRate, ns3::DataRate, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, const ns3::WifiMacHeader *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3WifiMacHeader___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Const_ns3WifiMacHeader___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImpl< void, unsigned long, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    PyModule_AddObject(m, (char *) "_PyNs3ApInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3ApInfo_wrapper_registry, NULL));
    /* Register the 'ns3::ApInfo' class */
    if (PyType_Ready(&PyNs3ApInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ApInfo", (PyObject *) &PyNs3ApInfo_Type);
    PyModule_AddObject(m, (char *) "_PyNs3AthstatsHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3AthstatsHelper_wrapper_registry, NULL));
    /* Register the 'ns3::AthstatsHelper' class */
    if (PyType_Ready(&PyNs3AthstatsHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AthstatsHelper", (PyObject *) &PyNs3AthstatsHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Bar_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Bar_wrapper_registry, NULL));
    /* Register the 'ns3::Bar' class */
    if (PyType_Ready(&PyNs3Bar_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Bar", (PyObject *) &PyNs3Bar_Type);
    PyModule_AddObject(m, (char *) "_PyNs3BlockAckAgreement_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3BlockAckAgreement_wrapper_registry, NULL));
    /* Register the 'ns3::BlockAckAgreement' class */
    if (PyType_Ready(&PyNs3BlockAckAgreement_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BlockAckAgreement", (PyObject *) &PyNs3BlockAckAgreement_Type);
    PyModule_AddObject(m, (char *) "_PyNs3BlockAckCache_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3BlockAckCache_wrapper_registry, NULL));
    /* Register the 'ns3::BlockAckCache' class */
    if (PyType_Ready(&PyNs3BlockAckCache_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BlockAckCache", (PyObject *) &PyNs3BlockAckCache_Type);
    PyModule_AddObject(m, (char *) "_PyNs3CapabilityInformation_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3CapabilityInformation_wrapper_registry, NULL));
    /* Register the 'ns3::CapabilityInformation' class */
    if (PyType_Ready(&PyNs3CapabilityInformation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CapabilityInformation", (PyObject *) &PyNs3CapabilityInformation_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3Event_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3Event_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::Event >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3Event_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3Event", (PyObject *) &PyNs3DefaultDeleter__Ns3Event_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::MacRxMiddle >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3MacRxMiddle_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3MacRxMiddle", (PyObject *) &PyNs3DefaultDeleter__Ns3MacRxMiddle_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::MacTxMiddle >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3MacTxMiddle_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3MacTxMiddle", (PyObject *) &PyNs3DefaultDeleter__Ns3MacTxMiddle_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::QosBlockedDestinations >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3QosBlockedDestinations", (PyObject *) &PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::WifiInformationElement >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3WifiInformationElement_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3WifiInformationElement", (PyObject *) &PyNs3DefaultDeleter__Ns3WifiInformationElement_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry, NULL));
    /* Register the 'ns3::DefaultDeleter< ns3::WifiMacQueueItem >' class */
    if (PyType_Ready(&PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DefaultDeleter__Ns3WifiMacQueueItem", (PyObject *) &PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsssErrorRateModel_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsssErrorRateModel_wrapper_registry, NULL));
    /* Register the 'ns3::DsssErrorRateModel' class */
    if (PyType_Ready(&PyNs3DsssErrorRateModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsssErrorRateModel", (PyObject *) &PyNs3DsssErrorRateModel_Type);
    PyModule_AddObject(m, (char *) "_PyNs3GroupInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3GroupInfo_wrapper_registry, NULL));
    /* Register the 'ns3::GroupInfo' class */
    if (PyType_Ready(&PyNs3GroupInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "GroupInfo", (PyObject *) &PyNs3GroupInfo_Type);
    PyModule_AddObject(m, (char *) "_PyNs3HtRateInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3HtRateInfo_wrapper_registry, NULL));
    /* Register the 'ns3::HtRateInfo' class */
    if (PyType_Ready(&PyNs3HtRateInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "HtRateInfo", (PyObject *) &PyNs3HtRateInfo_Type);
    PyModule_AddObject(m, (char *) "_PyNs3InterferenceHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3InterferenceHelper_wrapper_registry, NULL));
    /* Register the 'ns3::InterferenceHelper' class */
    if (PyType_Ready(&PyNs3InterferenceHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "InterferenceHelper", (PyObject *) &PyNs3InterferenceHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3InterferenceHelperSnrPer_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3InterferenceHelperSnrPer_wrapper_registry, NULL));
    /* Register the 'ns3::InterferenceHelper::SnrPer' class */
    if (PyType_Ready(&PyNs3InterferenceHelperSnrPer_Type)) {
        return MOD_ERROR;
    }
    PyDict_SetItemString((PyObject*) PyNs3InterferenceHelper_Type.tp_dict, (char *) "SnrPer", (PyObject *) &PyNs3InterferenceHelperSnrPer_Type);
    PyModule_AddObject(m, (char *) "_PyNs3MacLowTransmissionParameters_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3MacLowTransmissionParameters_wrapper_registry, NULL));
    /* Register the 'ns3::MacLowTransmissionParameters' class */
    if (PyType_Ready(&PyNs3MacLowTransmissionParameters_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MacLowTransmissionParameters", (PyObject *) &PyNs3MacLowTransmissionParameters_Type);
    PyModule_AddObject(m, (char *) "_PyNs3McsGroup_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3McsGroup_wrapper_registry, NULL));
    /* Register the 'ns3::McsGroup' class */
    if (PyType_Ready(&PyNs3McsGroup_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "McsGroup", (PyObject *) &PyNs3McsGroup_Type);
    PyModule_AddObject(m, (char *) "_PyNs3MpduInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3MpduInfo_wrapper_registry, NULL));
    /* Register the 'ns3::MpduInfo' class */
    if (PyType_Ready(&PyNs3MpduInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MpduInfo", (PyObject *) &PyNs3MpduInfo_Type);
    /* Register the 'ns3::OriginatorBlockAckAgreement' class */
    PyNs3OriginatorBlockAckAgreement_Type.tp_base = &PyNs3BlockAckAgreement_Type;
    if (PyType_Ready(&PyNs3OriginatorBlockAckAgreement_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OriginatorBlockAckAgreement", (PyObject *) &PyNs3OriginatorBlockAckAgreement_Type);
    PyModule_AddObject(m, (char *) "_PyNs3RateInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3RateInfo_wrapper_registry, NULL));
    /* Register the 'ns3::RateInfo' class */
    if (PyType_Ready(&PyNs3RateInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RateInfo", (PyObject *) &PyNs3RateInfo_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SignalNoiseDbm_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SignalNoiseDbm_wrapper_registry, NULL));
    /* Register the 'ns3::SignalNoiseDbm' class */
    if (PyType_Ready(&PyNs3SignalNoiseDbm_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SignalNoiseDbm", (PyObject *) &PyNs3SignalNoiseDbm_Type);
    PyModule_AddObject(m, (char *) "_PyNs3StatusCode_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3StatusCode_wrapper_registry, NULL));
    /* Register the 'ns3::StatusCode' class */
    if (PyType_Ready(&PyNs3StatusCode_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "StatusCode", (PyObject *) &PyNs3StatusCode_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiHelper_wrapper_registry, NULL));
    /* Register the 'ns3::WifiHelper' class */
    if (PyType_Ready(&PyNs3WifiHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiHelper", (PyObject *) &PyNs3WifiHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiMacHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiMacHelper_wrapper_registry, NULL));
    /* Register the 'ns3::WifiMacHelper' class */
    if (PyType_Ready(&PyNs3WifiMacHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMacHelper", (PyObject *) &PyNs3WifiMacHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiMode_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiMode_wrapper_registry, NULL));
    /* Register the 'ns3::WifiMode' class */
    if (PyType_Ready(&PyNs3WifiMode_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMode", (PyObject *) &PyNs3WifiMode_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiModeFactory_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiModeFactory_wrapper_registry, NULL));
    /* Register the 'ns3::WifiModeFactory' class */
    if (PyType_Ready(&PyNs3WifiModeFactory_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiModeFactory", (PyObject *) &PyNs3WifiModeFactory_Type);
    /* Register the 'ns3::WifiPhyHelper' class */
    PyNs3WifiPhyHelper_Type.tp_base = &PyNs3PcapHelperForDevice_Type;
    PyNs3WifiPhyHelper_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WifiPhyHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WifiPhyHelper_Type.tp_bases, 1, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3WifiPhyHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiPhyHelper", (PyObject *) &PyNs3WifiPhyHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiPhyListener_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiPhyListener_wrapper_registry, NULL));
    /* Register the 'ns3::WifiPhyListener' class */
    if (PyType_Ready(&PyNs3WifiPhyListener_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiPhyListener", (PyObject *) &PyNs3WifiPhyListener_Type);
    /* Register the 'ns3::WifiPhyTag' class */
    PyNs3WifiPhyTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3WifiPhyTag_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiPhyTag", (PyObject *) &PyNs3WifiPhyTag_Type);
    /* Register the 'ns3::WifiRadioEnergyModelHelper' class */
    PyNs3WifiRadioEnergyModelHelper_Type.tp_base = &PyNs3DeviceEnergyModelHelper_Type;
    if (PyType_Ready(&PyNs3WifiRadioEnergyModelHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRadioEnergyModelHelper", (PyObject *) &PyNs3WifiRadioEnergyModelHelper_Type);
    /* Register the 'ns3::WifiRadioEnergyModelPhyListener' class */
    PyNs3WifiRadioEnergyModelPhyListener_Type.tp_base = &PyNs3WifiPhyListener_Type;
    if (PyType_Ready(&PyNs3WifiRadioEnergyModelPhyListener_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRadioEnergyModelPhyListener", (PyObject *) &PyNs3WifiRadioEnergyModelPhyListener_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiRemoteStation_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiRemoteStation_wrapper_registry, NULL));
    /* Register the 'ns3::WifiRemoteStation' class */
    if (PyType_Ready(&PyNs3WifiRemoteStation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStation", (PyObject *) &PyNs3WifiRemoteStation_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiRemoteStationInfo_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiRemoteStationInfo_wrapper_registry, NULL));
    /* Register the 'ns3::WifiRemoteStationInfo' class */
    if (PyType_Ready(&PyNs3WifiRemoteStationInfo_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationInfo", (PyObject *) &PyNs3WifiRemoteStationInfo_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiRemoteStationState_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiRemoteStationState_wrapper_registry, NULL));
    /* Register the 'ns3::WifiRemoteStationState' class */
    if (PyType_Ready(&PyNs3WifiRemoteStationState_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationState", (PyObject *) &PyNs3WifiRemoteStationState_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiRraaThresholds_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiRraaThresholds_wrapper_registry, NULL));
    /* Register the 'ns3::WifiRraaThresholds' class */
    if (PyType_Ready(&PyNs3WifiRraaThresholds_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRraaThresholds", (PyObject *) &PyNs3WifiRraaThresholds_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiRrpaaThresholds_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiRrpaaThresholds_wrapper_registry, NULL));
    /* Register the 'ns3::WifiRrpaaThresholds' class */
    if (PyType_Ready(&PyNs3WifiRrpaaThresholds_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRrpaaThresholds", (PyObject *) &PyNs3WifiRrpaaThresholds_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiTxVector_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiTxVector_wrapper_registry, NULL));
    /* Register the 'ns3::WifiTxVector' class */
    if (PyType_Ready(&PyNs3WifiTxVector_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiTxVector", (PyObject *) &PyNs3WifiTxVector_Type);
    PyModule_AddObject(m, (char *) "_PyNs3YansWifiChannelHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3YansWifiChannelHelper_wrapper_registry, NULL));
    /* Register the 'ns3::YansWifiChannelHelper' class */
    if (PyType_Ready(&PyNs3YansWifiChannelHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "YansWifiChannelHelper", (PyObject *) &PyNs3YansWifiChannelHelper_Type);
    /* Register the 'ns3::YansWifiPhyHelper' class */
    PyNs3YansWifiPhyHelper_Type.tp_base = &PyNs3WifiPhyHelper_Type;
    if (PyType_Ready(&PyNs3YansWifiPhyHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "YansWifiPhyHelper", (PyObject *) &PyNs3YansWifiPhyHelper_Type);
    /* Register the 'ns3::AmpduTag' class */
    PyNs3AmpduTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3AmpduTag_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AmpduTag", (PyObject *) &PyNs3AmpduTag_Type);
    /* Register the 'ns3::MgtAddBaRequestHeader' class */
    PyNs3MgtAddBaRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAddBaRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtAddBaRequestHeader", (PyObject *) &PyNs3MgtAddBaRequestHeader_Type);
    /* Register the 'ns3::MgtAddBaResponseHeader' class */
    PyNs3MgtAddBaResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAddBaResponseHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtAddBaResponseHeader", (PyObject *) &PyNs3MgtAddBaResponseHeader_Type);
    /* Register the 'ns3::MgtAssocRequestHeader' class */
    PyNs3MgtAssocRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAssocRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtAssocRequestHeader", (PyObject *) &PyNs3MgtAssocRequestHeader_Type);
    /* Register the 'ns3::MgtAssocResponseHeader' class */
    PyNs3MgtAssocResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAssocResponseHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtAssocResponseHeader", (PyObject *) &PyNs3MgtAssocResponseHeader_Type);
    /* Register the 'ns3::MgtDelBaHeader' class */
    PyNs3MgtDelBaHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtDelBaHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtDelBaHeader", (PyObject *) &PyNs3MgtDelBaHeader_Type);
    /* Register the 'ns3::MgtProbeRequestHeader' class */
    PyNs3MgtProbeRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtProbeRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtProbeRequestHeader", (PyObject *) &PyNs3MgtProbeRequestHeader_Type);
    /* Register the 'ns3::MgtProbeResponseHeader' class */
    PyNs3MgtProbeResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtProbeResponseHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtProbeResponseHeader", (PyObject *) &PyNs3MgtProbeResponseHeader_Type);
    /* Register the 'ns3::MgtReassocRequestHeader' class */
    PyNs3MgtReassocRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtReassocRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtReassocRequestHeader", (PyObject *) &PyNs3MgtReassocRequestHeader_Type);
    /* Register the 'ns3::MinstrelWifiRemoteStation' class */
    PyNs3MinstrelWifiRemoteStation_Type.tp_base = &PyNs3WifiRemoteStation_Type;
    if (PyType_Ready(&PyNs3MinstrelWifiRemoteStation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MinstrelWifiRemoteStation", (PyObject *) &PyNs3MinstrelWifiRemoteStation_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> >), &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> >' class */
    PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> >), &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> >' class */
    PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> >), &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> >' class */
    PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> >), &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> >' class */
    PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >), &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class */
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> >), &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> >' class */
    PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type);
    /* Register the 'ns3::SnrTag' class */
    PyNs3SnrTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3SnrTag_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SnrTag", (PyObject *) &PyNs3SnrTag_Type);
    /* Register the 'ns3::SpectrumWifiPhyHelper' class */
    PyNs3SpectrumWifiPhyHelper_Type.tp_base = &PyNs3WifiPhyHelper_Type;
    if (PyType_Ready(&PyNs3SpectrumWifiPhyHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SpectrumWifiPhyHelper", (PyObject *) &PyNs3SpectrumWifiPhyHelper_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Txop), &PyNs3Txop_Type);
    /* Register the 'ns3::Txop' class */
    PyNs3Txop_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Txop_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Txop", (PyObject *) &PyNs3Txop_Type);
    /* Register the 'ns3::WifiActionHeader' class */
    PyNs3WifiActionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiActionHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiActionHeader", (PyObject *) &PyNs3WifiActionHeader_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WifiActionHeaderActionValue_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WifiActionHeaderActionValue_wrapper_registry, NULL));
    /* Register the 'ns3::WifiActionHeader::ActionValue' class */
    if (PyType_Ready(&PyNs3WifiActionHeaderActionValue_Type)) {
        return MOD_ERROR;
    }
    PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, (char *) "ActionValue", (PyObject *) &PyNs3WifiActionHeaderActionValue_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::WifiInformationElement), &PyNs3WifiInformationElement_Type);
    /* Register the 'ns3::WifiInformationElement' class */
    PyNs3WifiInformationElement_Type.tp_base = &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;
    if (PyType_Ready(&PyNs3WifiInformationElement_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiInformationElement", (PyObject *) &PyNs3WifiInformationElement_Type);
    /* Register the 'ns3::WifiInformationElementVector' class */
    PyNs3WifiInformationElementVector_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiInformationElementVector_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiInformationElementVector", (PyObject *) &PyNs3WifiInformationElementVector_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiMac), &PyNs3WifiMac_Type);
    /* Register the 'ns3::WifiMac' class */
    PyNs3WifiMac_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMac", (PyObject *) &PyNs3WifiMac_Type);
    /* Register the 'ns3::WifiMacHeader' class */
    PyNs3WifiMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiMacHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMacHeader", (PyObject *) &PyNs3WifiMacHeader_Type);
    PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.register_wrapper(typeid(ns3::WifiMacQueueItem), &PyNs3WifiMacQueueItem_Type);
    /* Register the 'ns3::WifiMacQueueItem' class */
    PyNs3WifiMacQueueItem_Type.tp_base = &PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type;
    if (PyType_Ready(&PyNs3WifiMacQueueItem_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMacQueueItem", (PyObject *) &PyNs3WifiMacQueueItem_Type);
    /* Register the 'ns3::WifiMacTrailer' class */
    PyNs3WifiMacTrailer_Type.tp_base = &PyNs3Trailer_Type;
    if (PyType_Ready(&PyNs3WifiMacTrailer_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMacTrailer", (PyObject *) &PyNs3WifiMacTrailer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiPhy), &PyNs3WifiPhy_Type);
    /* Register the 'ns3::WifiPhy' class */
    PyNs3WifiPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiPhy_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiPhy", (PyObject *) &PyNs3WifiPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiPhyStateHelper), &PyNs3WifiPhyStateHelper_Type);
    /* Register the 'ns3::WifiPhyStateHelper' class */
    PyNs3WifiPhyStateHelper_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiPhyStateHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiPhyStateHelper", (PyObject *) &PyNs3WifiPhyStateHelper_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiRemoteStationManager), &PyNs3WifiRemoteStationManager_Type);
    /* Register the 'ns3::WifiRemoteStationManager' class */
    PyNs3WifiRemoteStationManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiRemoteStationManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationManager", (PyObject *) &PyNs3WifiRemoteStationManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiSpectrumPhyInterface), &PyNs3WifiSpectrumPhyInterface_Type);
    /* Register the 'ns3::WifiSpectrumPhyInterface' class */
    PyNs3WifiSpectrumPhyInterface_Type.tp_base = &PyNs3SpectrumPhy_Type;
    if (PyType_Ready(&PyNs3WifiSpectrumPhyInterface_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiSpectrumPhyInterface", (PyObject *) &PyNs3WifiSpectrumPhyInterface_Type);
    PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.register_wrapper(typeid(ns3::WifiSpectrumSignalParameters), &PyNs3WifiSpectrumSignalParameters_Type);
    /* Register the 'ns3::WifiSpectrumSignalParameters' class */
    PyNs3WifiSpectrumSignalParameters_Type.tp_base = &PyNs3SpectrumSignalParameters_Type;
    if (PyType_Ready(&PyNs3WifiSpectrumSignalParameters_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiSpectrumSignalParameters", (PyObject *) &PyNs3WifiSpectrumSignalParameters_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiTxCurrentModel), &PyNs3WifiTxCurrentModel_Type);
    /* Register the 'ns3::WifiTxCurrentModel' class */
    PyNs3WifiTxCurrentModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiTxCurrentModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiTxCurrentModel", (PyObject *) &PyNs3WifiTxCurrentModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansWifiPhy), &PyNs3YansWifiPhy_Type);
    /* Register the 'ns3::YansWifiPhy' class */
    PyNs3YansWifiPhy_Type.tp_base = &PyNs3WifiPhy_Type;
    if (PyType_Ready(&PyNs3YansWifiPhy_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "YansWifiPhy", (PyObject *) &PyNs3YansWifiPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AarfWifiManager), &PyNs3AarfWifiManager_Type);
    /* Register the 'ns3::AarfWifiManager' class */
    PyNs3AarfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AarfWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AarfWifiManager", (PyObject *) &PyNs3AarfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AarfcdWifiManager), &PyNs3AarfcdWifiManager_Type);
    /* Register the 'ns3::AarfcdWifiManager' class */
    PyNs3AarfcdWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AarfcdWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AarfcdWifiManager", (PyObject *) &PyNs3AarfcdWifiManager_Type);
    /* Register the 'ns3::AmpduSubframeHeader' class */
    PyNs3AmpduSubframeHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AmpduSubframeHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AmpduSubframeHeader", (PyObject *) &PyNs3AmpduSubframeHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AmrrWifiManager), &PyNs3AmrrWifiManager_Type);
    /* Register the 'ns3::AmrrWifiManager' class */
    PyNs3AmrrWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AmrrWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AmrrWifiManager", (PyObject *) &PyNs3AmrrWifiManager_Type);
    /* Register the 'ns3::AmsduSubframeHeader' class */
    PyNs3AmsduSubframeHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AmsduSubframeHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AmsduSubframeHeader", (PyObject *) &PyNs3AmsduSubframeHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AparfWifiManager), &PyNs3AparfWifiManager_Type);
    /* Register the 'ns3::AparfWifiManager' class */
    PyNs3AparfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AparfWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AparfWifiManager", (PyObject *) &PyNs3AparfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ArfWifiManager), &PyNs3ArfWifiManager_Type);
    /* Register the 'ns3::ArfWifiManager' class */
    PyNs3ArfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3ArfWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ArfWifiManager", (PyObject *) &PyNs3ArfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AthstatsWifiTraceSink), &PyNs3AthstatsWifiTraceSink_Type);
    /* Register the 'ns3::AthstatsWifiTraceSink' class */
    PyNs3AthstatsWifiTraceSink_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3AthstatsWifiTraceSink_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AthstatsWifiTraceSink", (PyObject *) &PyNs3AthstatsWifiTraceSink_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BlockAckManager), &PyNs3BlockAckManager_Type);
    /* Register the 'ns3::BlockAckManager' class */
    PyNs3BlockAckManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3BlockAckManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BlockAckManager", (PyObject *) &PyNs3BlockAckManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CaraWifiManager), &PyNs3CaraWifiManager_Type);
    /* Register the 'ns3::CaraWifiManager' class */
    PyNs3CaraWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3CaraWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CaraWifiManager", (PyObject *) &PyNs3CaraWifiManager_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::CfParameterSet), &PyNs3CfParameterSet_Type);
    /* Register the 'ns3::CfParameterSet' class */
    PyNs3CfParameterSet_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3CfParameterSet_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CfParameterSet", (PyObject *) &PyNs3CfParameterSet_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ChannelAccessManager), &PyNs3ChannelAccessManager_Type);
    /* Register the 'ns3::ChannelAccessManager' class */
    PyNs3ChannelAccessManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ChannelAccessManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ChannelAccessManager", (PyObject *) &PyNs3ChannelAccessManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantRateWifiManager), &PyNs3ConstantRateWifiManager_Type);
    /* Register the 'ns3::ConstantRateWifiManager' class */
    PyNs3ConstantRateWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3ConstantRateWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ConstantRateWifiManager", (PyObject *) &PyNs3ConstantRateWifiManager_Type);
    /* Register the 'ns3::CtrlBAckRequestHeader' class */
    PyNs3CtrlBAckRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3CtrlBAckRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CtrlBAckRequestHeader", (PyObject *) &PyNs3CtrlBAckRequestHeader_Type);
    /* Register the 'ns3::CtrlBAckResponseHeader' class */
    PyNs3CtrlBAckResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3CtrlBAckResponseHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CtrlBAckResponseHeader", (PyObject *) &PyNs3CtrlBAckResponseHeader_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::DsssParameterSet), &PyNs3DsssParameterSet_Type);
    /* Register the 'ns3::DsssParameterSet' class */
    PyNs3DsssParameterSet_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3DsssParameterSet_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsssParameterSet", (PyObject *) &PyNs3DsssParameterSet_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::EdcaParameterSet), &PyNs3EdcaParameterSet_Type);
    /* Register the 'ns3::EdcaParameterSet' class */
    PyNs3EdcaParameterSet_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3EdcaParameterSet_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "EdcaParameterSet", (PyObject *) &PyNs3EdcaParameterSet_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::ErpInformation), &PyNs3ErpInformation_Type);
    /* Register the 'ns3::ErpInformation' class */
    PyNs3ErpInformation_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3ErpInformation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ErpInformation", (PyObject *) &PyNs3ErpInformation_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ErrorRateModel), &PyNs3ErrorRateModel_Type);
    /* Register the 'ns3::ErrorRateModel' class */
    PyNs3ErrorRateModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ErrorRateModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ErrorRateModel", (PyObject *) &PyNs3ErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map.register_wrapper(typeid(ns3::Event), &PyNs3Event_Type);
    /* Register the 'ns3::Event' class */
    PyNs3Event_Type.tp_base = &PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type;
    if (PyType_Ready(&PyNs3Event_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Event", (PyObject *) &PyNs3Event_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::ExtendedCapabilities), &PyNs3ExtendedCapabilities_Type);
    /* Register the 'ns3::ExtendedCapabilities' class */
    PyNs3ExtendedCapabilities_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3ExtendedCapabilities_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ExtendedCapabilities", (PyObject *) &PyNs3ExtendedCapabilities_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::ExtendedSupportedRatesIE), &PyNs3ExtendedSupportedRatesIE_Type);
    /* Register the 'ns3::ExtendedSupportedRatesIE' class */
    PyNs3ExtendedSupportedRatesIE_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3ExtendedSupportedRatesIE_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ExtendedSupportedRatesIE", (PyObject *) &PyNs3ExtendedSupportedRatesIE_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FrameCaptureModel), &PyNs3FrameCaptureModel_Type);
    /* Register the 'ns3::FrameCaptureModel' class */
    PyNs3FrameCaptureModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3FrameCaptureModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "FrameCaptureModel", (PyObject *) &PyNs3FrameCaptureModel_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::HeCapabilities), &PyNs3HeCapabilities_Type);
    /* Register the 'ns3::HeCapabilities' class */
    PyNs3HeCapabilities_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3HeCapabilities_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "HeCapabilities", (PyObject *) &PyNs3HeCapabilities_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::HeOperation), &PyNs3HeOperation_Type);
    /* Register the 'ns3::HeOperation' class */
    PyNs3HeOperation_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3HeOperation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "HeOperation", (PyObject *) &PyNs3HeOperation_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::HtCapabilities), &PyNs3HtCapabilities_Type);
    /* Register the 'ns3::HtCapabilities' class */
    PyNs3HtCapabilities_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3HtCapabilities_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "HtCapabilities", (PyObject *) &PyNs3HtCapabilities_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::HtOperation), &PyNs3HtOperation_Type);
    /* Register the 'ns3::HtOperation' class */
    PyNs3HtOperation_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3HtOperation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "HtOperation", (PyObject *) &PyNs3HtOperation_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::IdealWifiManager), &PyNs3IdealWifiManager_Type);
    /* Register the 'ns3::IdealWifiManager' class */
    PyNs3IdealWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3IdealWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "IdealWifiManager", (PyObject *) &PyNs3IdealWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::LinearWifiTxCurrentModel), &PyNs3LinearWifiTxCurrentModel_Type);
    /* Register the 'ns3::LinearWifiTxCurrentModel' class */
    PyNs3LinearWifiTxCurrentModel_Type.tp_base = &PyNs3WifiTxCurrentModel_Type;
    if (PyType_Ready(&PyNs3LinearWifiTxCurrentModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "LinearWifiTxCurrentModel", (PyObject *) &PyNs3LinearWifiTxCurrentModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MacLow), &PyNs3MacLow_Type);
    /* Register the 'ns3::MacLow' class */
    PyNs3MacLow_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MacLow_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MacLow", (PyObject *) &PyNs3MacLow_Type);
    PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map.register_wrapper(typeid(ns3::MacRxMiddle), &PyNs3MacRxMiddle_Type);
    /* Register the 'ns3::MacRxMiddle' class */
    PyNs3MacRxMiddle_Type.tp_base = &PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type;
    if (PyType_Ready(&PyNs3MacRxMiddle_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MacRxMiddle", (PyObject *) &PyNs3MacRxMiddle_Type);
    PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map.register_wrapper(typeid(ns3::MacTxMiddle), &PyNs3MacTxMiddle_Type);
    /* Register the 'ns3::MacTxMiddle' class */
    PyNs3MacTxMiddle_Type.tp_base = &PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type;
    if (PyType_Ready(&PyNs3MacTxMiddle_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MacTxMiddle", (PyObject *) &PyNs3MacTxMiddle_Type);
    /* Register the 'ns3::MgtBeaconHeader' class */
    PyNs3MgtBeaconHeader_Type.tp_base = &PyNs3MgtProbeResponseHeader_Type;
    if (PyType_Ready(&PyNs3MgtBeaconHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MgtBeaconHeader", (PyObject *) &PyNs3MgtBeaconHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MinstrelHtWifiManager), &PyNs3MinstrelHtWifiManager_Type);
    /* Register the 'ns3::MinstrelHtWifiManager' class */
    PyNs3MinstrelHtWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3MinstrelHtWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MinstrelHtWifiManager", (PyObject *) &PyNs3MinstrelHtWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MinstrelWifiManager), &PyNs3MinstrelWifiManager_Type);
    /* Register the 'ns3::MinstrelWifiManager' class */
    PyNs3MinstrelWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3MinstrelWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MinstrelWifiManager", (PyObject *) &PyNs3MinstrelWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MpduAggregator), &PyNs3MpduAggregator_Type);
    /* Register the 'ns3::MpduAggregator' class */
    PyNs3MpduAggregator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MpduAggregator_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MpduAggregator", (PyObject *) &PyNs3MpduAggregator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MsduAggregator), &PyNs3MsduAggregator_Type);
    /* Register the 'ns3::MsduAggregator' class */
    PyNs3MsduAggregator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MsduAggregator_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MsduAggregator", (PyObject *) &PyNs3MsduAggregator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NistErrorRateModel), &PyNs3NistErrorRateModel_Type);
    /* Register the 'ns3::NistErrorRateModel' class */
    PyNs3NistErrorRateModel_Type.tp_base = &PyNs3ErrorRateModel_Type;
    if (PyType_Ready(&PyNs3NistErrorRateModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "NistErrorRateModel", (PyObject *) &PyNs3NistErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::OnoeWifiManager), &PyNs3OnoeWifiManager_Type);
    /* Register the 'ns3::OnoeWifiManager' class */
    PyNs3OnoeWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3OnoeWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OnoeWifiManager", (PyObject *) &PyNs3OnoeWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ParfWifiManager), &PyNs3ParfWifiManager_Type);
    /* Register the 'ns3::ParfWifiManager' class */
    PyNs3ParfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3ParfWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ParfWifiManager", (PyObject *) &PyNs3ParfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map.register_wrapper(typeid(ns3::QosBlockedDestinations), &PyNs3QosBlockedDestinations_Type);
    /* Register the 'ns3::QosBlockedDestinations' class */
    PyNs3QosBlockedDestinations_Type.tp_base = &PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type;
    if (PyType_Ready(&PyNs3QosBlockedDestinations_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "QosBlockedDestinations", (PyObject *) &PyNs3QosBlockedDestinations_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::QosTxop), &PyNs3QosTxop_Type);
    /* Register the 'ns3::QosTxop' class */
    PyNs3QosTxop_Type.tp_base = &PyNs3Txop_Type;
    if (PyType_Ready(&PyNs3QosTxop_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "QosTxop", (PyObject *) &PyNs3QosTxop_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Queue< ns3::WifiMacQueueItem >), &PyNs3Queue__Ns3WifiMacQueueItem_Type);
    /* Register the 'ns3::Queue< ns3::WifiMacQueueItem >' class */
    PyNs3Queue__Ns3WifiMacQueueItem_Type.tp_base = &PyNs3QueueBase_Type;
    if (PyType_Ready(&PyNs3Queue__Ns3WifiMacQueueItem_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Queue__Ns3WifiMacQueueItem", (PyObject *) &PyNs3Queue__Ns3WifiMacQueueItem_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RegularWifiMac), &PyNs3RegularWifiMac_Type);
    /* Register the 'ns3::RegularWifiMac' class */
    PyNs3RegularWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3RegularWifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RegularWifiMac", (PyObject *) &PyNs3RegularWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RraaWifiManager), &PyNs3RraaWifiManager_Type);
    /* Register the 'ns3::RraaWifiManager' class */
    PyNs3RraaWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3RraaWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RraaWifiManager", (PyObject *) &PyNs3RraaWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RrpaaWifiManager), &PyNs3RrpaaWifiManager_Type);
    /* Register the 'ns3::RrpaaWifiManager' class */
    PyNs3RrpaaWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3RrpaaWifiManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RrpaaWifiManager", (PyObject *) &PyNs3RrpaaWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleFrameCaptureModel), &PyNs3SimpleFrameCaptureModel_Type);
    /* Register the 'ns3::SimpleFrameCaptureModel' class */
    PyNs3SimpleFrameCaptureModel_Type.tp_base = &PyNs3FrameCaptureModel_Type;
    if (PyType_Ready(&PyNs3SimpleFrameCaptureModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleFrameCaptureModel", (PyObject *) &PyNs3SimpleFrameCaptureModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumWifiPhy), &PyNs3SpectrumWifiPhy_Type);
    /* Register the 'ns3::SpectrumWifiPhy' class */
    PyNs3SpectrumWifiPhy_Type.tp_base = &PyNs3WifiPhy_Type;
    if (PyType_Ready(&PyNs3SpectrumWifiPhy_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SpectrumWifiPhy", (PyObject *) &PyNs3SpectrumWifiPhy_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::Ssid), &PyNs3Ssid_Type);
    /* Register the 'ns3::Ssid' class */
    PyNs3Ssid_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Ssid_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ssid", (PyObject *) &PyNs3Ssid_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::SsidChecker), &PyNs3SsidChecker_Type);
    /* Register the 'ns3::SsidChecker' class */
    PyNs3SsidChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3SsidChecker_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SsidChecker", (PyObject *) &PyNs3SsidChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::SsidValue), &PyNs3SsidValue_Type);
    /* Register the 'ns3::SsidValue' class */
    PyNs3SsidValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3SsidValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SsidValue", (PyObject *) &PyNs3SsidValue_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::SupportedRates), &PyNs3SupportedRates_Type);
    /* Register the 'ns3::SupportedRates' class */
    
    PyNs3SupportedRatesMeta_Type.tp_base = Py_TYPE(&PyNs3WifiInformationElement_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3SupportedRatesMeta_Type.tp_traverse = Py_TYPE(&PyNs3WifiInformationElement_Type)->tp_traverse;
    PyNs3SupportedRatesMeta_Type.tp_clear = Py_TYPE(&PyNs3WifiInformationElement_Type)->tp_clear;
    PyNs3SupportedRatesMeta_Type.tp_is_gc = Py_TYPE(&PyNs3WifiInformationElement_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3SupportedRatesMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3SupportedRatesMeta_Type);
    
    PyNs3SupportedRates_Type.tp_base = &PyNs3WifiInformationElement_Type;
    Py_TYPE(&PyNs3SupportedRates_Type) = &PyNs3SupportedRatesMeta_Type;
    if (PyType_Ready(&PyNs3SupportedRates_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SupportedRates", (PyObject *) &PyNs3SupportedRates_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::VhtCapabilities), &PyNs3VhtCapabilities_Type);
    /* Register the 'ns3::VhtCapabilities' class */
    PyNs3VhtCapabilities_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3VhtCapabilities_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "VhtCapabilities", (PyObject *) &PyNs3VhtCapabilities_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::VhtOperation), &PyNs3VhtOperation_Type);
    /* Register the 'ns3::VhtOperation' class */
    PyNs3VhtOperation_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3VhtOperation_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "VhtOperation", (PyObject *) &PyNs3VhtOperation_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiMacQueue), &PyNs3WifiMacQueue_Type);
    /* Register the 'ns3::WifiMacQueue' class */
    PyNs3WifiMacQueue_Type.tp_base = &PyNs3Queue__Ns3WifiMacQueueItem_Type;
    if (PyType_Ready(&PyNs3WifiMacQueue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiMacQueue", (PyObject *) &PyNs3WifiMacQueue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::WifiModeChecker), &PyNs3WifiModeChecker_Type);
    /* Register the 'ns3::WifiModeChecker' class */
    PyNs3WifiModeChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3WifiModeChecker_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiModeChecker", (PyObject *) &PyNs3WifiModeChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::WifiModeValue), &PyNs3WifiModeValue_Type);
    /* Register the 'ns3::WifiModeValue' class */
    PyNs3WifiModeValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3WifiModeValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiModeValue", (PyObject *) &PyNs3WifiModeValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiNetDevice), &PyNs3WifiNetDevice_Type);
    /* Register the 'ns3::WifiNetDevice' class */
    PyNs3WifiNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3WifiNetDevice_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiNetDevice", (PyObject *) &PyNs3WifiNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiRadioEnergyModel), &PyNs3WifiRadioEnergyModel_Type);
    /* Register the 'ns3::WifiRadioEnergyModel' class */
    PyNs3WifiRadioEnergyModel_Type.tp_base = &PyNs3DeviceEnergyModel_Type;
    if (PyType_Ready(&PyNs3WifiRadioEnergyModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WifiRadioEnergyModel", (PyObject *) &PyNs3WifiRadioEnergyModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansErrorRateModel), &PyNs3YansErrorRateModel_Type);
    /* Register the 'ns3::YansErrorRateModel' class */
    PyNs3YansErrorRateModel_Type.tp_base = &PyNs3ErrorRateModel_Type;
    if (PyType_Ready(&PyNs3YansErrorRateModel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "YansErrorRateModel", (PyObject *) &PyNs3YansErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansWifiChannel), &PyNs3YansWifiChannel_Type);
    /* Register the 'ns3::YansWifiChannel' class */
    PyNs3YansWifiChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3YansWifiChannel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "YansWifiChannel", (PyObject *) &PyNs3YansWifiChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AdhocWifiMac), &PyNs3AdhocWifiMac_Type);
    /* Register the 'ns3::AdhocWifiMac' class */
    PyNs3AdhocWifiMac_Type.tp_base = &PyNs3RegularWifiMac_Type;
    if (PyType_Ready(&PyNs3AdhocWifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AdhocWifiMac", (PyObject *) &PyNs3AdhocWifiMac_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::WifiTxVector, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3WifiTxVector_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >), &PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    /* Register the 'ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >' class */
    PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type.tp_base = &PyNs3CallbackImplBase_Type;
    if (PyType_Ready(&PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty", (PyObject *) &PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::InfrastructureWifiMac), &PyNs3InfrastructureWifiMac_Type);
    /* Register the 'ns3::InfrastructureWifiMac' class */
    PyNs3InfrastructureWifiMac_Type.tp_base = &PyNs3RegularWifiMac_Type;
    if (PyType_Ready(&PyNs3InfrastructureWifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "InfrastructureWifiMac", (PyObject *) &PyNs3InfrastructureWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::StaWifiMac), &PyNs3StaWifiMac_Type);
    /* Register the 'ns3::StaWifiMac' class */
    PyNs3StaWifiMac_Type.tp_base = &PyNs3InfrastructureWifiMac_Type;
    if (PyType_Ready(&PyNs3StaWifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "StaWifiMac", (PyObject *) &PyNs3StaWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ApWifiMac), &PyNs3ApWifiMac_Type);
    /* Register the 'ns3::ApWifiMac' class */
    PyNs3ApWifiMac_Type.tp_base = &PyNs3InfrastructureWifiMac_Type;
    if (PyType_Ready(&PyNs3ApWifiMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ApWifiMac", (PyObject *) &PyNs3ApWifiMac_Type);
    /* Register the 'ns3::HtMinstrelRate' class */
    if (PyType_Ready(&Pyns3__HtMinstrelRate_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__HtMinstrelRateIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__HtMinstrelRate", (PyObject *) &Pyns3__HtMinstrelRate_Type);
    PyModule_AddObject(m, (char *) "Ns3__HtMinstrelRateIter", (PyObject *) &Pyns3__HtMinstrelRateIter_Type);
    /* Register the 'ns3::TxTime' class */
    if (PyType_Ready(&Pyns3__TxTime_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__TxTimeIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__TxTime", (PyObject *) &Pyns3__TxTime_Type);
    PyModule_AddObject(m, (char *) "Ns3__TxTimeIter", (PyObject *) &Pyns3__TxTimeIter_Type);
    /* Register the 'ns3::WifiModeList' class */
    if (PyType_Ready(&Pyns3__WifiModeList_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__WifiModeListIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__WifiModeList", (PyObject *) &Pyns3__WifiModeList_Type);
    PyModule_AddObject(m, (char *) "Ns3__WifiModeListIter", (PyObject *) &Pyns3__WifiModeListIter_Type);
    /* Register the 'ns3::MinstrelRate' class */
    if (PyType_Ready(&Pyns3__MinstrelRate_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__MinstrelRateIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__MinstrelRate", (PyObject *) &Pyns3__MinstrelRate_Type);
    PyModule_AddObject(m, (char *) "Ns3__MinstrelRateIter", (PyObject *) &Pyns3__MinstrelRateIter_Type);
    /* Register the 'std::vector< double >' class */
    if (PyType_Ready(&Pystd__vector__lt___double___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___double___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___double___gt__", (PyObject *) &Pystd__vector__lt___double___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___double___gt__Iter", (PyObject *) &Pystd__vector__lt___double___gt__Iter_Type);
    /* Register the 'ns3::Bands' class */
    if (PyType_Ready(&Pyns3__Bands_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__BandsIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__Bands", (PyObject *) &Pyns3__Bands_Type);
    PyModule_AddObject(m, (char *) "Ns3__BandsIter", (PyObject *) &Pyns3__BandsIter_Type);
    /* Register the 'std::vector< unsigned short >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_short___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_short___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_short___gt__", (PyObject *) &Pystd__vector__lt___unsigned_short___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_short___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_short___gt__Iter_Type);
    /* Register the 'std::map< ns3::Mac48Address, bool >' class */
    if (PyType_Ready(&Pystd__map__lt___ns3__Mac48Address__bool___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Mac48Address__bool___gt__", (PyObject *) &Pystd__map__lt___ns3__Mac48Address__bool___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Mac48Address__bool___gt__Iter", (PyObject *) &Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type);
    /* Register the 'std::vector< unsigned char >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_char___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_char___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_char___gt__", (PyObject *) &Pystd__vector__lt___unsigned_char___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_char___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_char___gt__Iter_Type);
    PyModule_AddObject(m, (char *) "ActionValue", (PyObject *) &PyNs3WifiActionHeaderActionValue_Type);
    PyModule_AddObject(m, (char *) "Vector", (PyObject *) &PyNs3Vector3D_Type);
    PyModule_AddObject(m, (char *) "VectorValue", (PyObject *) &PyNs3Vector3DValue_Type);
    PyModule_AddObject(m, (char *) "VectorChecker", (PyObject *) &PyNs3Vector3DChecker_Type);
    PyModule_AddIntConstant(m, (char *) "NORMAL_MPDU", ns3::NORMAL_MPDU);
    PyModule_AddIntConstant(m, (char *) "MPDU_IN_AGGREGATE", ns3::MPDU_IN_AGGREGATE);
    PyModule_AddIntConstant(m, (char *) "LAST_MPDU_IN_AGGREGATE", ns3::LAST_MPDU_IN_AGGREGATE);
    PyModule_AddIntConstant(m, (char *) "NO_PROTECTION", ns3::NO_PROTECTION);
    PyModule_AddIntConstant(m, (char *) "NON_MEMBER_PROTECTION", ns3::NON_MEMBER_PROTECTION);
    PyModule_AddIntConstant(m, (char *) "TWENTY_MHZ_PROTECTION", ns3::TWENTY_MHZ_PROTECTION);
    PyModule_AddIntConstant(m, (char *) "MIXED_MODE_PROTECTION", ns3::MIXED_MODE_PROTECTION);
    PyModule_AddIntConstant(m, (char *) "STA", ns3::STA);
    PyModule_AddIntConstant(m, (char *) "AP", ns3::AP);
    PyModule_AddIntConstant(m, (char *) "ADHOC_STA", ns3::ADHOC_STA);
    PyModule_AddIntConstant(m, (char *) "MESH", ns3::MESH);
    PyModule_AddIntConstant(m, (char *) "HT_STA", ns3::HT_STA);
    PyModule_AddIntConstant(m, (char *) "HT_AP", ns3::HT_AP);
    PyModule_AddIntConstant(m, (char *) "HT_ADHOC_STA", ns3::HT_ADHOC_STA);
    PyModule_AddIntConstant(m, (char *) "OCB", ns3::OCB);
    PyModule_AddIntConstant(m, (char *) "BASIC_BLOCK_ACK", ns3::BASIC_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "COMPRESSED_BLOCK_ACK", ns3::COMPRESSED_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "MULTI_TID_BLOCK_ACK", ns3::MULTI_TID_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_CTLWRAPPER", ns3::WIFI_MAC_CTL_CTLWRAPPER);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_RTS", ns3::WIFI_MAC_CTL_RTS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_CTS", ns3::WIFI_MAC_CTL_CTS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_ACK", ns3::WIFI_MAC_CTL_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_BACKREQ", ns3::WIFI_MAC_CTL_BACKREQ);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_BACKRESP", ns3::WIFI_MAC_CTL_BACKRESP);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_END", ns3::WIFI_MAC_CTL_END);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_END_ACK", ns3::WIFI_MAC_CTL_END_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_BEACON", ns3::WIFI_MAC_MGT_BEACON);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ASSOCIATION_REQUEST", ns3::WIFI_MAC_MGT_ASSOCIATION_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ASSOCIATION_RESPONSE", ns3::WIFI_MAC_MGT_ASSOCIATION_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_DISASSOCIATION", ns3::WIFI_MAC_MGT_DISASSOCIATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_REASSOCIATION_REQUEST", ns3::WIFI_MAC_MGT_REASSOCIATION_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_REASSOCIATION_RESPONSE", ns3::WIFI_MAC_MGT_REASSOCIATION_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_PROBE_REQUEST", ns3::WIFI_MAC_MGT_PROBE_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_PROBE_RESPONSE", ns3::WIFI_MAC_MGT_PROBE_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_AUTHENTICATION", ns3::WIFI_MAC_MGT_AUTHENTICATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_DEAUTHENTICATION", ns3::WIFI_MAC_MGT_DEAUTHENTICATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ACTION", ns3::WIFI_MAC_MGT_ACTION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ACTION_NO_ACK", ns3::WIFI_MAC_MGT_ACTION_NO_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_MULTIHOP_ACTION", ns3::WIFI_MAC_MGT_MULTIHOP_ACTION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA", ns3::WIFI_MAC_DATA);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFACK", ns3::WIFI_MAC_DATA_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFPOLL", ns3::WIFI_MAC_DATA_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFACK_CFPOLL", ns3::WIFI_MAC_DATA_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL", ns3::WIFI_MAC_DATA_NULL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFACK", ns3::WIFI_MAC_DATA_NULL_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFPOLL", ns3::WIFI_MAC_DATA_NULL_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFACK_CFPOLL", ns3::WIFI_MAC_DATA_NULL_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA", ns3::WIFI_MAC_QOSDATA);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFACK", ns3::WIFI_MAC_QOSDATA_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFPOLL", ns3::WIFI_MAC_QOSDATA_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFACK_CFPOLL", ns3::WIFI_MAC_QOSDATA_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL", ns3::WIFI_MAC_QOSDATA_NULL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL_CFPOLL", ns3::WIFI_MAC_QOSDATA_NULL_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL_CFACK_CFPOLL", ns3::WIFI_MAC_QOSDATA_NULL_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "AC_BE", ns3::AC_BE);
    PyModule_AddIntConstant(m, (char *) "AC_BK", ns3::AC_BK);
    PyModule_AddIntConstant(m, (char *) "AC_VI", ns3::AC_VI);
    PyModule_AddIntConstant(m, (char *) "AC_VO", ns3::AC_VO);
    PyModule_AddIntConstant(m, (char *) "AC_BE_NQOS", ns3::AC_BE_NQOS);
    PyModule_AddIntConstant(m, (char *) "AC_UNDEF", ns3::AC_UNDEF);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211a", ns3::WIFI_PHY_STANDARD_80211a);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211b", ns3::WIFI_PHY_STANDARD_80211b);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211g", ns3::WIFI_PHY_STANDARD_80211g);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211_10MHZ", ns3::WIFI_PHY_STANDARD_80211_10MHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211_5MHZ", ns3::WIFI_PHY_STANDARD_80211_5MHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_holland", ns3::WIFI_PHY_STANDARD_holland);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211n_2_4GHZ", ns3::WIFI_PHY_STANDARD_80211n_2_4GHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211n_5GHZ", ns3::WIFI_PHY_STANDARD_80211n_5GHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211ac", ns3::WIFI_PHY_STANDARD_80211ac);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211ax_2_4GHZ", ns3::WIFI_PHY_STANDARD_80211ax_2_4GHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211ax_5GHZ", ns3::WIFI_PHY_STANDARD_80211ax_5GHZ);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_UNSPECIFIED", ns3::WIFI_PHY_STANDARD_UNSPECIFIED);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_LONG", ns3::WIFI_PREAMBLE_LONG);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_SHORT", ns3::WIFI_PREAMBLE_SHORT);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HT_MF", ns3::WIFI_PREAMBLE_HT_MF);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HT_GF", ns3::WIFI_PREAMBLE_HT_GF);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_VHT", ns3::WIFI_PREAMBLE_VHT);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HE_SU", ns3::WIFI_PREAMBLE_HE_SU);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HE_ER_SU", ns3::WIFI_PREAMBLE_HE_ER_SU);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HE_MU", ns3::WIFI_PREAMBLE_HE_MU);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_HE_TB", ns3::WIFI_PREAMBLE_HE_TB);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_NONE", ns3::WIFI_PREAMBLE_NONE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_UNKNOWN", ns3::WIFI_MOD_CLASS_UNKNOWN);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_IR", ns3::WIFI_MOD_CLASS_IR);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_FHSS", ns3::WIFI_MOD_CLASS_FHSS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_DSSS", ns3::WIFI_MOD_CLASS_DSSS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_HR_DSSS", ns3::WIFI_MOD_CLASS_HR_DSSS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_ERP_PBCC", ns3::WIFI_MOD_CLASS_ERP_PBCC);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_DSSS_OFDM", ns3::WIFI_MOD_CLASS_DSSS_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_ERP_OFDM", ns3::WIFI_MOD_CLASS_ERP_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_OFDM", ns3::WIFI_MOD_CLASS_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_HT", ns3::WIFI_MOD_CLASS_HT);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_VHT", ns3::WIFI_MOD_CLASS_VHT);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_HE", ns3::WIFI_MOD_CLASS_HE);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_UNDEFINED", ns3::WIFI_CODE_RATE_UNDEFINED);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_3_4", ns3::WIFI_CODE_RATE_3_4);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_2_3", ns3::WIFI_CODE_RATE_2_3);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_1_2", ns3::WIFI_CODE_RATE_1_2);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_5_6", ns3::WIFI_CODE_RATE_5_6);
    {
        PyObject *tmp_value;
         // ns3::OriginatorBlockAckAgreement::PENDING
        tmp_value = PyLong_FromLong(ns3::OriginatorBlockAckAgreement::PENDING);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "PENDING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::ESTABLISHED
        tmp_value = PyLong_FromLong(ns3::OriginatorBlockAckAgreement::ESTABLISHED);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "ESTABLISHED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::INACTIVE
        tmp_value = PyLong_FromLong(ns3::OriginatorBlockAckAgreement::INACTIVE);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "INACTIVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::UNSUCCESSFUL
        tmp_value = PyLong_FromLong(ns3::OriginatorBlockAckAgreement::UNSUCCESSFUL);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "UNSUCCESSFUL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiPhyHelper::DLT_IEEE802_11
        tmp_value = PyLong_FromLong(ns3::WifiPhyHelper::DLT_IEEE802_11);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhyHelper_Type.tp_dict, "DLT_IEEE802_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhyHelper::DLT_PRISM_HEADER
        tmp_value = PyLong_FromLong(ns3::WifiPhyHelper::DLT_PRISM_HEADER);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhyHelper_Type.tp_dict, "DLT_PRISM_HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhyHelper::DLT_IEEE802_11_RADIO
        tmp_value = PyLong_FromLong(ns3::WifiPhyHelper::DLT_IEEE802_11_RADIO);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhyHelper_Type.tp_dict, "DLT_IEEE802_11_RADIO", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiRemoteStationState::BRAND_NEW
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationState::BRAND_NEW);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "BRAND_NEW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::DISASSOC
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationState::DISASSOC);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "DISASSOC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::WAIT_ASSOC_TX_OK
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationState::WAIT_ASSOC_TX_OK);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "WAIT_ASSOC_TX_OK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::GOT_ASSOC_TX_OK
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationState::GOT_ASSOC_TX_OK);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "GOT_ASSOC_TX_OK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::BLOCK_ACK
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::BLOCK_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MESH);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MULTIHOP
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MULTIHOP);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MULTIHOP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::SELF_PROTECTED
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::SELF_PROTECTED);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "SELF_PROTECTED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::VENDOR_SPECIFIC_ACTION
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::VENDOR_SPECIFIC_ACTION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "VENDOR_SPECIFIC_ACTION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::PEER_LINK_OPEN
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PEER_LINK_OPEN);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_OPEN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PEER_LINK_CONFIRM
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PEER_LINK_CONFIRM);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_CONFIRM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PEER_LINK_CLOSE
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PEER_LINK_CLOSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_CLOSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::GROUP_KEY_INFORM
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::GROUP_KEY_INFORM);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "GROUP_KEY_INFORM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::GROUP_KEY_ACK
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::GROUP_KEY_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "GROUP_KEY_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::PROXY_UPDATE
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PROXY_UPDATE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PROXY_UPDATE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PROXY_UPDATE_CONFIRMATION
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PROXY_UPDATE_CONFIRMATION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PROXY_UPDATE_CONFIRMATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::LINK_METRIC_REPORT
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::LINK_METRIC_REPORT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "LINK_METRIC_REPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PATH_SELECTION
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PATH_SELECTION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PATH_SELECTION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PORTAL_ANNOUNCEMENT
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::PORTAL_ANNOUNCEMENT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PORTAL_ANNOUNCEMENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::CONGESTION_CONTROL_NOTIFICATION
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::CONGESTION_CONTROL_NOTIFICATION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "CONGESTION_CONTROL_NOTIFICATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDA_SETUP_REQUEST
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MDA_SETUP_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDA_SETUP_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDA_SETUP_REPLY
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MDA_SETUP_REPLY);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDA_SETUP_REPLY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_ADVERTISMENT_REQUEST
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MDAOP_ADVERTISMENT_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_ADVERTISMENT_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_ADVERTISMENTS
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MDAOP_ADVERTISMENTS);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_ADVERTISMENTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_SET_TEARDOWN
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::MDAOP_SET_TEARDOWN);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_SET_TEARDOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::TBTT_ADJUSTMENT_REQUEST
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::TBTT_ADJUSTMENT_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "TBTT_ADJUSTMENT_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::TBTT_ADJUSTMENT_RESPONSE
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::TBTT_ADJUSTMENT_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "TBTT_ADJUSTMENT_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::BLOCK_ACK_ADDBA_REQUEST
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::BLOCK_ACK_ADDBA_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_ADDBA_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BLOCK_ACK_ADDBA_RESPONSE
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::BLOCK_ACK_ADDBA_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_ADDBA_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BLOCK_ACK_DELBA
        tmp_value = PyLong_FromLong(ns3::WifiActionHeader::BLOCK_ACK_DELBA);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_DELBA", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiMacHeader::NORMAL_ACK
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::NORMAL_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NORMAL_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::NO_ACK
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::NO_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NO_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::NO_EXPLICIT_ACK
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::NO_EXPLICIT_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NO_EXPLICIT_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::BLOCK_ACK
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::BLOCK_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "BLOCK_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiMacHeader::ADDR1
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::ADDR1);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR2
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::ADDR2);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR3
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::ADDR3);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR3", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR4
        tmp_value = PyLong_FromLong(ns3::WifiMacHeader::ADDR4);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR4", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiRemoteStationManager::RTS_CTS
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationManager::RTS_CTS);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationManager_Type.tp_dict, "RTS_CTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationManager::CTS_TO_SELF
        tmp_value = PyLong_FromLong(ns3::WifiRemoteStationManager::CTS_TO_SELF);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationManager_Type.tp_dict, "CTS_TO_SELF", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::AparfWifiManager::High
        tmp_value = PyLong_FromLong(ns3::AparfWifiManager::High);
        PyDict_SetItemString((PyObject*) PyNs3AparfWifiManager_Type.tp_dict, "High", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::AparfWifiManager::Low
        tmp_value = PyLong_FromLong(ns3::AparfWifiManager::Low);
        PyDict_SetItemString((PyObject*) PyNs3AparfWifiManager_Type.tp_dict, "Low", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::AparfWifiManager::Spread
        tmp_value = PyLong_FromLong(ns3::AparfWifiManager::Spread);
        PyDict_SetItemString((PyObject*) PyNs3AparfWifiManager_Type.tp_dict, "Spread", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiMacQueue::DROP_NEWEST
        tmp_value = PyLong_FromLong(ns3::WifiMacQueue::DROP_NEWEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacQueue_Type.tp_dict, "DROP_NEWEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacQueue::DROP_OLDEST
        tmp_value = PyLong_FromLong(ns3::WifiMacQueue::DROP_OLDEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacQueue_Type.tp_dict, "DROP_OLDEST", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initwifi_FatalImpl();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initwifi_Hash();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Hash", submodule);
    submodule = initwifi_TracedValueCallback();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "TracedValueCallback", submodule);
    submodule = initwifi_internal();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    return MOD_RETURN(m);
}
